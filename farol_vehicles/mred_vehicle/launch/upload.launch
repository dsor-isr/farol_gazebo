<!-- Spawns the mred vehicle in the simulation -->
<launch>
  <!-- Debug flag -->
  <arg name="debug" default="0"/>

  <!-- Vehicle's initial pose in ENU-->
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="0"/>
  <arg name="roll"  default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw"   default="0"/>

  <!-- Mode to open different robot configurations as set the in file
  nomenclature standard for the files in /robots/<mode>.xacro-->
  <arg name="mode" default="default"/>

  <!-- Vehicle's namespace -->
  <arg name="namespace" default="mred"/>
  <arg name="world_frame" default="world_ned"/>

  <param name="robot_description"
    command="$(find xacro)/xacro '$(find mred_vehicle)/robots/$(arg mode).xacro'
    debug:=$(arg debug) 
    namespace:=$(arg namespace) 
    inertial_reference_frame:=$(arg world_frame)" />
  
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>

  <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

  <!-- Publish robot model for ROS -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
    <param name="robot_description" value="/$(arg namespace)/robot_description" />
    <param name="publish_frequency" value="5" />
  </node>

  <!-- Publish state and tf for in relation to the world frame -->
  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(arg namespace)/base_link"/>
  </include>
</launch>