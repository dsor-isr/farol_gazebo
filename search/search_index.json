{"config":{"indexing":"full","lang":["en","pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;"},"docs":[{"location":"","text":"Farol Simulation This repository holds the Farol Simulation code stack for underwater marine vehicles of DSOR-ISR (Dynamical Systems for Ocean Robotics - Institute for System Robotics). It contains the necessary components to simulate and control the FAROL class of marine vehicles. It provides 2 types of simulation. A matlab like simulation written in C++ and another using gazebo simulator. Requirements This code stack was developed with ROS1 in mind. In order to use, you are required to have: - Ubuntu 20.04LTS (64-bit) - ROS1 Noetic - Python 3","title":"Introduction"},{"location":"#farol-simulation","text":"This repository holds the Farol Simulation code stack for underwater marine vehicles of DSOR-ISR (Dynamical Systems for Ocean Robotics - Institute for System Robotics). It contains the necessary components to simulate and control the FAROL class of marine vehicles. It provides 2 types of simulation. A matlab like simulation written in C++ and another using gazebo simulator.","title":"Farol Simulation"},{"location":"#requirements","text":"This code stack was developed with ROS1 in mind. In order to use, you are required to have: - Ubuntu 20.04LTS (64-bit) - ROS1 Noetic - Python 3","title":"Requirements"},{"location":"AMUNED/","text":"","title":"Overview"},{"location":"MBlack/","text":"","title":"Overview"},{"location":"MRed/","text":"","title":"Overview"},{"location":"MVector/","text":"","title":"Overview"},{"location":"MYellow/","text":"","title":"Overview"},{"location":"api/markdown/farol_worlds/Classes/","text":"Classes namespace terrain_generator Updated on 2022-11-24 at 19:19:31 +0000","title":"Classes"},{"location":"api/markdown/farol_worlds/Classes/#classes","text":"namespace terrain_generator Updated on 2022-11-24 at 19:19:31 +0000","title":"Classes"},{"location":"api/markdown/farol_worlds/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:31 +0000","title":"Examples"},{"location":"api/markdown/farol_worlds/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:31 +0000","title":"Examples"},{"location":"api/markdown/farol_worlds/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:31 +0000","title":"Modules"},{"location":"api/markdown/farol_worlds/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:31 +0000","title":"Modules"},{"location":"api/markdown/farol_worlds/Namespaces/","text":"Namespaces namespace terrain_generator Updated on 2022-11-24 at 19:19:31 +0000","title":"Namespaces"},{"location":"api/markdown/farol_worlds/Namespaces/#namespaces","text":"namespace terrain_generator Updated on 2022-11-24 at 19:19:31 +0000","title":"Namespaces"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/","text":"terrain_generator More... Functions Name def main () Detailed Description Convert .mat files with that into the corresponding .npy and .stl files @author: Marcelo Fialho Jacinto @email: marcelo.jacinto@tecnico.ulisboa.pt @date: 06/03/2021 Functions Documentation function main def main() Updated on 2022-11-24 at 19:19:31 +0000","title":"terrain_generator"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/#terrain_generator","text":"More...","title":"terrain_generator"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/#functions","text":"Name def main ()","title":"Functions"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/#detailed-description","text":"Convert .mat files with that into the corresponding .npy and .stl files @author: Marcelo Fialho Jacinto @email: marcelo.jacinto@tecnico.ulisboa.pt @date: 06/03/2021","title":"Detailed Description"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/farol_worlds/Namespaces/namespaceterrain__generator/#function-main","text":"def main() Updated on 2022-11-24 at 19:19:31 +0000","title":"function main"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/","text":"Classes namespace publish_footprints namespace publish_vehicle_footprint class VehicleFootprint namespace publish_world_models class WorldPublisher namespace set_simulation_timer namespace setup namespace tf namespace tf_quaternion namespace transformations class Arcball namespace unpause_simulation Updated on 2022-11-24 at 19:19:32 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/#classes","text":"namespace publish_footprints namespace publish_vehicle_footprint class VehicleFootprint namespace publish_world_models class WorldPublisher namespace set_simulation_timer namespace setup namespace tf namespace tf_quaternion namespace transformations class Arcball namespace unpause_simulation Updated on 2022-11-24 at 19:19:32 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/","text":"publish_vehicle_footprint::VehicleFootprint Public Functions Name def init (self self) def odometry_callback (self self, msg msg) def rot (alpha alpha) Public Attributes Name MARKER Public Functions Documentation function init def __init__( self self ) function odometry_callback def odometry_callback( self self, msg msg ) function rot static def rot( alpha alpha ) Public Attributes Documentation variable MARKER static MARKER = np.array([[0, 0.75], [-0.5, -0.25], [0.5, -0.25]]); Updated on 2022-11-24 at 19:19:32 +0000","title":"publish_vehicle_footprint::VehicleFootprint"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#publish_vehicle_footprintvehiclefootprint","text":"","title":"publish_vehicle_footprint::VehicleFootprint"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#public-functions","text":"Name def init (self self) def odometry_callback (self self, msg msg) def rot (alpha alpha)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#public-attributes","text":"Name MARKER","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#function-init","text":"def __init__( self self )","title":"function init"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#function-odometry_callback","text":"def odometry_callback( self self, msg msg )","title":"function odometry_callback"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#function-rot","text":"static def rot( alpha alpha )","title":"function rot"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__vehicle__footprint_1_1VehicleFootprint/#variable-marker","text":"static MARKER = np.array([[0, 0.75], [-0.5, -0.25], [0.5, -0.25]]); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable MARKER"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/","text":"publish_world_models::WorldPublisher Public Functions Name def init (self self) def add_meshes (self self, models models) def publish_meshes (self self) Public Functions Documentation function init def __init__( self self ) function add_meshes def add_meshes( self self, models models ) function publish_meshes def publish_meshes( self self ) Updated on 2022-11-24 at 19:19:32 +0000","title":"publish_world_models::WorldPublisher"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#publish_world_modelsworldpublisher","text":"","title":"publish_world_models::WorldPublisher"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#public-functions","text":"Name def init (self self) def add_meshes (self self, models models) def publish_meshes (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#function-init","text":"def __init__( self self )","title":"function init"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#function-add_meshes","text":"def add_meshes( self self, models models )","title":"function add_meshes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classpublish__world__models_1_1WorldPublisher/#function-publish_meshes","text":"def publish_meshes( self self ) Updated on 2022-11-24 at 19:19:32 +0000","title":"function publish_meshes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classtf__quaternion_1_1transformations_1_1Arcball/","text":"tf_quaternion::transformations::Arcball More... Inherits from object Public Functions Name def init (self self, initial initial =None) def place (self self, center center, radius radius) def setaxes (self self, * axes) def setconstrain (self self, constrain constrain) def getconstrain (self self) def down (self self, point point) def drag (self self, point point) def next (self self, acceleration acceleration =0.0) def matrix (self self) Detailed Description class tf_quaternion::transformations::Arcball; Virtual Trackball Control. >>> ball = Arcball() >>> ball = Arcball(initial=numpy.identity(4)) >>> ball.place([320, 320], 320) >>> ball.down([500, 250]) >>> ball.drag([475, 275]) >>> R = ball.matrix() >>> numpy.allclose(numpy.sum(R), 3.90583455) True >>> ball = Arcball(initial=[0, 0, 0, 1]) >>> ball.place([320, 320], 320) >>> ball.setaxes([1,1,0], [-1, 1, 0]) >>> ball.setconstrain(True) >>> ball.down([400, 200]) >>> ball.drag([200, 400]) >>> R = ball.matrix() >>> numpy.allclose(numpy.sum(R), 0.2055924) True >>> ball.next()``` ## Public Functions Documentation ### function __init__ ```python def __init__( self self, initial initial =None ) Initialize virtual trackball control. initial : quaternion or rotation matrix``` ### function place ```python def place( self self, center center, radius radius ) Place Arcball, e.g. when window size changes. center : sequence[2] Window coordinates of trackball center. radius : float Radius of trackball in window coordinates.``` ### function setaxes ```python def setaxes( self self, * axes ) Set axes to constrain rotations.``` ### function setconstrain ```python def setconstrain( self self, constrain constrain ) Set state of constrain to axis mode.``` ### function getconstrain ```python def getconstrain( self self ) Return state of constrain to axis mode.``` ### function down ```python def down( self self, point point ) Set initial cursor window coordinates and pick constrain-axis.``` ### function drag ```python def drag( self self, point point ) Update current cursor window coordinates.``` ### function next ```python def next( self self, acceleration acceleration =0.0 ) Continue rotation in direction of last drag.``` ### function matrix ```python def matrix( self self ) Return homogeneous rotation matrix. Updated on 2022-11-24 at 19:19:32 +0000","title":"tf_quaternion::transformations::Arcball"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classtf__quaternion_1_1transformations_1_1Arcball/#tf_quaterniontransformationsarcball","text":"More... Inherits from object","title":"tf_quaternion::transformations::Arcball"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classtf__quaternion_1_1transformations_1_1Arcball/#public-functions","text":"Name def init (self self, initial initial =None) def place (self self, center center, radius radius) def setaxes (self self, * axes) def setconstrain (self self, constrain constrain) def getconstrain (self self) def down (self self, point point) def drag (self self, point point) def next (self self, acceleration acceleration =0.0) def matrix (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Classes/classtf__quaternion_1_1transformations_1_1Arcball/#detailed-description","text":"class tf_quaternion::transformations::Arcball; Virtual Trackball Control. >>> ball = Arcball() >>> ball = Arcball(initial=numpy.identity(4)) >>> ball.place([320, 320], 320) >>> ball.down([500, 250]) >>> ball.drag([475, 275]) >>> R = ball.matrix() >>> numpy.allclose(numpy.sum(R), 3.90583455) True >>> ball = Arcball(initial=[0, 0, 0, 1]) >>> ball.place([320, 320], 320) >>> ball.setaxes([1,1,0], [-1, 1, 0]) >>> ball.setconstrain(True) >>> ball.down([400, 200]) >>> ball.drag([200, 400]) >>> R = ball.matrix() >>> numpy.allclose(numpy.sum(R), 0.2055924) True >>> ball.next()``` ## Public Functions Documentation ### function __init__ ```python def __init__( self self, initial initial =None ) Initialize virtual trackball control. initial : quaternion or rotation matrix``` ### function place ```python def place( self self, center center, radius radius ) Place Arcball, e.g. when window size changes. center : sequence[2] Window coordinates of trackball center. radius : float Radius of trackball in window coordinates.``` ### function setaxes ```python def setaxes( self self, * axes ) Set axes to constrain rotations.``` ### function setconstrain ```python def setconstrain( self self, constrain constrain ) Set state of constrain to axis mode.``` ### function getconstrain ```python def getconstrain( self self ) Return state of constrain to axis mode.``` ### function down ```python def down( self self, point point ) Set initial cursor window coordinates and pick constrain-axis.``` ### function drag ```python def drag( self self, point point ) Update current cursor window coordinates.``` ### function next ```python def next( self self, acceleration acceleration =0.0 ) Continue rotation in direction of last drag.``` ### function matrix ```python def matrix( self self ) Return homogeneous rotation matrix. Updated on 2022-11-24 at 19:19:32 +0000","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:32 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:32 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:32 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:32 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/","text":"Namespaces namespace publish_footprints namespace publish_vehicle_footprint namespace publish_world_models namespace set_simulation_timer namespace setup namespace tf namespace tf_quaternion namespace transformations namespace unpause_simulation Updated on 2022-11-24 at 19:19:32 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/#namespaces","text":"namespace publish_footprints namespace publish_vehicle_footprint namespace publish_world_models namespace set_simulation_timer namespace setup namespace tf namespace tf_quaternion namespace transformations namespace unpause_simulation Updated on 2022-11-24 at 19:19:32 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/","text":"publish_footprints Functions Name def rot (alpha alpha) def odometry_callback (msg msg, name name) def get_topics (name name) def sub_odometry_topic (name name) def update_vehicle_list (event event) def main () Attributes Name vehicle_pub odom_sub get_world_props get_model_props marker Functions Documentation function rot def rot( alpha alpha ) function odometry_callback def odometry_callback( msg msg, name name ) function get_topics def get_topics( name name ) function sub_odometry_topic def sub_odometry_topic( name name ) function update_vehicle_list def update_vehicle_list( event event ) Call list of models in the Gazebo simulation and filter out the marine crafts. function main def main() Attributes Documentation variable vehicle_pub vehicle_pub = dict(); variable odom_sub odom_sub = dict(); variable get_world_props get_world_props = None; variable get_model_props get_model_props = None; variable marker marker = np.array([[0, 0.75], [-0.5, -0.25], [0.5, -0.25]]); Updated on 2022-11-24 at 19:19:32 +0000","title":"publish_footprints"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#publish_footprints","text":"","title":"publish_footprints"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#functions","text":"Name def rot (alpha alpha) def odometry_callback (msg msg, name name) def get_topics (name name) def sub_odometry_topic (name name) def update_vehicle_list (event event) def main ()","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#attributes","text":"Name vehicle_pub odom_sub get_world_props get_model_props marker","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-rot","text":"def rot( alpha alpha )","title":"function rot"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-odometry_callback","text":"def odometry_callback( msg msg, name name )","title":"function odometry_callback"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-get_topics","text":"def get_topics( name name )","title":"function get_topics"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-sub_odometry_topic","text":"def sub_odometry_topic( name name )","title":"function sub_odometry_topic"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-update_vehicle_list","text":"def update_vehicle_list( event event ) Call list of models in the Gazebo simulation and filter out the marine crafts.","title":"function update_vehicle_list"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#function-main","text":"def main()","title":"function main"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#variable-vehicle_pub","text":"vehicle_pub = dict();","title":"variable vehicle_pub"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#variable-odom_sub","text":"odom_sub = dict();","title":"variable odom_sub"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#variable-get_world_props","text":"get_world_props = None;","title":"variable get_world_props"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#variable-get_model_props","text":"get_model_props = None;","title":"variable get_model_props"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__footprints/#variable-marker","text":"marker = np.array([[0, 0.75], [-0.5, -0.25], [0.5, -0.25]]); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable marker"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/","text":"publish_vehicle_footprint Classes Name class publish_vehicle_footprint::VehicleFootprint Attributes Name node Attributes Documentation variable node node = VehicleFootprint(); Updated on 2022-11-24 at 19:19:32 +0000","title":"publish_vehicle_footprint"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/#publish_vehicle_footprint","text":"","title":"publish_vehicle_footprint"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/#classes","text":"Name class publish_vehicle_footprint::VehicleFootprint","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/#attributes","text":"Name node","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__vehicle__footprint/#variable-node","text":"node = VehicleFootprint(); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/","text":"publish_world_models Classes Name class publish_world_models::WorldPublisher Attributes Name world_pub Attributes Documentation variable world_pub world_pub = WorldPublisher(); Updated on 2022-11-24 at 19:19:32 +0000","title":"publish_world_models"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/#publish_world_models","text":"","title":"publish_world_models"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/#classes","text":"Name class publish_world_models::WorldPublisher","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/#attributes","text":"Name world_pub","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacepublish__world__models/#variable-world_pub","text":"world_pub = WorldPublisher(); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable world_pub"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/","text":"set_simulation_timer Attributes Name float timeout rate Attributes Documentation variable timeout float timeout = 0.0; variable rate rate = rospy.Rate(100); Updated on 2022-11-24 at 19:19:32 +0000","title":"set_simulation_timer"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/#set_simulation_timer","text":"","title":"set_simulation_timer"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/#attributes","text":"Name float timeout rate","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/#variable-timeout","text":"float timeout = 0.0;","title":"variable timeout"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceset__simulation__timer/#variable-rate","text":"rate = rospy.Rate(100); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable rate"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacesetup/","text":"setup Attributes Name setup_args Attributes Documentation variable setup_args setup_args = generate_distutils_setup( packages=['tf_quaternion'], package_dir={'': 'src'}, requires=[] ); Updated on 2022-11-24 at 19:19:32 +0000","title":"setup"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacesetup/#setup","text":"","title":"setup"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacesetup/#attributes","text":"Name setup_args","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacesetup/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacesetup/#variable-setup_args","text":"setup_args = generate_distutils_setup( packages=['tf_quaternion'], package_dir={'': 'src'}, requires=[] ); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable setup_args"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf/","text":"tf Types Name typedef btMatrix3x3 Matrix3x3 Types Documentation typedef Matrix3x3 typedef btMatrix3x3 tf::Matrix3x3; Updated on 2022-11-24 at 19:19:32 +0000","title":"tf"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf/#tf","text":"","title":"tf"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf/#types","text":"Name typedef btMatrix3x3 Matrix3x3","title":"Types"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf/#types-documentation","text":"","title":"Types Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf/#typedef-matrix3x3","text":"typedef btMatrix3x3 tf::Matrix3x3; Updated on 2022-11-24 at 19:19:32 +0000","title":"typedef Matrix3x3"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion/","text":"tf_quaternion Namespaces Name tf_quaternion::transformations Updated on 2022-11-24 at 19:19:32 +0000","title":"tf_quaternion"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion/#tf_quaternion","text":"","title":"tf_quaternion"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion/#namespaces","text":"Name tf_quaternion::transformations Updated on 2022-11-24 at 19:19:32 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/","text":"tf_quaternion::transformations Classes Name class tf_quaternion::transformations::Arcball Functions Name def identity_matrix () def translation_matrix (direction direction) def translation_from_matrix (matrix matrix) def reflection_matrix (point point, normal normal) def reflection_from_matrix (matrix matrix) def rotation_matrix (angle angle, direction direction, point point =None) def rotation_from_matrix (matrix matrix) def scale_matrix (factor factor, origin origin =None, direction direction =None) def scale_from_matrix (matrix matrix) def projection_matrix (point point, normal normal, direction direction =None, perspective perspective =None, pseudo pseudo =False) def projection_from_matrix (matrix matrix, pseudo pseudo =False) def clip_matrix (left left, right right, bottom bottom, top top, near near, far far, perspective perspective =False) def shear_matrix (angle angle, direction direction, point point, normal normal) def shear_from_matrix (matrix matrix) def decompose_matrix (matrix matrix) def compose_matrix (scale scale =None, shear shear =None, angles angles =None, translate translate =None, perspective perspective =None) def orthogonalization_matrix (lengths lengths, angles angles) def superimposition_matrix (v0 v0, v1 v1, scaling scaling =False, usesvd usesvd =True) def euler_matrix (ai ai, aj aj, ak ak, axes axes ='sxyz') def euler_from_matrix (matrix matrix, axes axes ='sxyz') def euler_from_quaternion (quaternion quaternion, axes axes ='sxyz') def quaternion_from_euler (ai ai, aj aj, ak ak, axes axes ='sxyz') def quaternion_about_axis (angle angle, axis axis) def quaternion_matrix (quaternion quaternion) def quaternion_from_matrix (matrix matrix) def quaternion_multiply (quaternion1 quaternion1, quaternion0 quaternion0) def quaternion_conjugate (quaternion quaternion) def quaternion_inverse (quaternion quaternion) def quaternion_slerp (quat0 quat0, quat1 quat1, fraction fraction, spin spin =0, shortestpath shortestpath =True) def random_quaternion (rand rand =None) def random_rotation_matrix (rand rand =None) def arcball_map_to_sphere (point point, center center, radius radius) def arcball_constrain_to_axis (point point, axis axis) def arcball_nearest_axis (point point, axes axes) def vector_norm (data data, axis axis =None, out out =None) def unit_vector (data data, axis axis =None, out out =None) def random_vector (size size) def inverse_matrix (matrix matrix) def concatenate_matrices (* matrices) def is_same_transform (matrix0 matrix0, matrix1 matrix1) Functions Documentation function identity_matrix def identity_matrix() Return 4x4 identity/unit matrix. >>> I = identity_matrix() >>> numpy.allclose(I, numpy.dot(I, I)) True >>> numpy.sum(I), numpy.trace(I) (4.0, 4.0) >>> numpy.allclose(I, numpy.identity(4, dtype=numpy.float64)) True``` ### function translation_matrix ```python def translation_matrix( direction direction ) Return matrix to translate by direction vector. >>> v = numpy.random.random(3) - 0.5 >>> numpy.allclose(v, translation_matrix(v)[:3, 3]) True``` ### function translation_from_matrix ```python def translation_from_matrix( matrix matrix ) Return translation vector from translation matrix. >>> v0 = numpy.random.random(3) - 0.5 >>> v1 = translation_from_matrix(translation_matrix(v0)) >>> numpy.allclose(v0, v1) True``` ### function reflection_matrix ```python def reflection_matrix( point point, normal normal ) Return matrix to mirror at plane defined by point and normal vector. >>> v0 = numpy.random.random(4) - 0.5 >>> v0[3] = 1.0 >>> v1 = numpy.random.random(3) - 0.5 >>> R = reflection_matrix(v0, v1) >>> numpy.allclose(2., numpy.trace(R)) True >>> numpy.allclose(v0, numpy.dot(R, v0)) True >>> v2 = v0.copy() >>> v2[:3] += v1 >>> v3 = v0.copy() >>> v2[:3] -= v1 >>> numpy.allclose(v2, numpy.dot(R, v3)) True``` ### function reflection_from_matrix ```python def reflection_from_matrix( matrix matrix ) Return mirror plane point and normal vector from reflection matrix. >>> v0 = numpy.random.random(3) - 0.5 >>> v1 = numpy.random.random(3) - 0.5 >>> M0 = reflection_matrix(v0, v1) >>> point, normal = reflection_from_matrix(M0) >>> M1 = reflection_matrix(point, normal) >>> is_same_transform(M0, M1) True``` ### function rotation_matrix ```python def rotation_matrix( angle angle, direction direction, point point =None ) Return matrix to rotate about axis defined by point and direction. >>> angle = (random.random() - 0.5) * (2*math.pi) >>> direc = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(angle-2*math.pi, direc, point) >>> is_same_transform(R0, R1) True >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(-angle, -direc, point) >>> is_same_transform(R0, R1) True >>> I = numpy.identity(4, numpy.float64) >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc)) True >>> numpy.allclose(2., numpy.trace(rotation_matrix(math.pi/2, ... direc, point))) True``` ### function rotation_from_matrix ```python def rotation_from_matrix( matrix matrix ) Return rotation angle and axis from rotation matrix. >>> angle = (random.random() - 0.5) * (2*math.pi) >>> direc = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> R0 = rotation_matrix(angle, direc, point) >>> angle, direc, point = rotation_from_matrix(R0) >>> R1 = rotation_matrix(angle, direc, point) >>> is_same_transform(R0, R1) True``` ### function scale_matrix ```python def scale_matrix( factor factor, origin origin =None, direction direction =None ) Return matrix to scale by factor around origin in direction. Use factor -1 for point symmetry. >>> v = (numpy.random.rand(4, 5) - 0.5) * 20.0 >>> v[3] = 1.0 >>> S = scale_matrix(-1.234) >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3]) True >>> factor = random.random() * 10 - 5 >>> origin = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> S = scale_matrix(factor, origin) >>> S = scale_matrix(factor, origin, direct)``` ### function scale_from_matrix ```python def scale_from_matrix( matrix matrix ) Return scaling factor, origin and direction from scaling matrix. >>> factor = random.random() * 10 - 5 >>> origin = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> S0 = scale_matrix(factor, origin) >>> factor, origin, direction = scale_from_matrix(S0) >>> S1 = scale_matrix(factor, origin, direction) >>> is_same_transform(S0, S1) True >>> S0 = scale_matrix(factor, origin, direct) >>> factor, origin, direction = scale_from_matrix(S0) >>> S1 = scale_matrix(factor, origin, direction) >>> is_same_transform(S0, S1) True``` ### function projection_matrix ```python def projection_matrix( point point, normal normal, direction direction =None, perspective perspective =None, pseudo pseudo =False ) Return matrix to project onto plane defined by point and normal. Using either perspective point, projection direction, or none of both. If pseudo is True, perspective projections will preserve relative depth such that Perspective = dot(Orthogonal, PseudoPerspective). >>> P = projection_matrix((0, 0, 0), (1, 0, 0)) >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:]) True >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(3) - 0.5 >>> P0 = projection_matrix(point, normal) >>> P1 = projection_matrix(point, normal, direction=direct) >>> P2 = projection_matrix(point, normal, perspective=persp) >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True) >>> is_same_transform(P2, numpy.dot(P0, P3)) True >>> P = projection_matrix((3, 0, 0), (1, 1, 0), (1, 0, 0)) >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20.0 >>> v0[3] = 1.0 >>> v1 = numpy.dot(P, v0) >>> numpy.allclose(v1[1], v0[1]) True >>> numpy.allclose(v1[0], 3.0-v1[1]) True``` ### function projection_from_matrix ```python def projection_from_matrix( matrix matrix, pseudo pseudo =False ) Return projection plane and perspective point from projection matrix. Return values are same as arguments for projection_matrix function: point, normal, direction, perspective, and pseudo. >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(3) - 0.5 >>> P0 = projection_matrix(point, normal) >>> result = projection_from_matrix(P0) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, direct) >>> result = projection_from_matrix(P0) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False) >>> result = projection_from_matrix(P0, pseudo=False) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True) >>> result = projection_from_matrix(P0, pseudo=True) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True``` ### function clip_matrix ```python def clip_matrix( left left, right right, bottom bottom, top top, near near, far far, perspective perspective =False ) Return matrix to obtain normalized device coordinates from frustrum. The frustrum bounds are axis-aligned along x (left, right), y (bottom, top) and z (near, far). Normalized device coordinates are in range [-1, 1] if coordinates are inside the frustrum. If perspective is True the frustrum is a truncated pyramid with the perspective point at origin and direction along z axis, otherwise an orthographic canonical view volume (a box). Homogeneous coordinates transformed by the perspective clip matrix need to be dehomogenized (devided by w coordinate). >>> frustrum = numpy.random.rand(6) >>> frustrum[1] += frustrum[0] >>> frustrum[3] += frustrum[2] >>> frustrum[5] += frustrum[4] >>> M = clip_matrix(*frustrum, perspective=False) >>> numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0]) array([-1., -1., -1., 1.]) >>> numpy.dot(M, [frustrum[1], frustrum[3], frustrum[5], 1.0]) array([ 1., 1., 1., 1.]) >>> M = clip_matrix(*frustrum, perspective=True) >>> v = numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0]) >>> v / v[3] array([-1., -1., -1., 1.]) >>> v = numpy.dot(M, [frustrum[1], frustrum[3], frustrum[4], 1.0]) >>> v / v[3] array([ 1., 1., -1., 1.])``` ### function shear_matrix ```python def shear_matrix( angle angle, direction direction, point point, normal normal ) Return matrix to shear by angle along direction vector on shear plane. The shear plane is defined by a point and normal vector. The direction vector must be orthogonal to the plane's normal vector. A point P is transformed by the shear matrix into P\" such that the vector P-P\" is parallel to the direction vector and its extent is given by the angle of P-P'-P\", where P' is the orthogonal projection of P onto the shear plane. >>> angle = (random.random() - 0.5) * 4*math.pi >>> direct = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.cross(direct, numpy.random.random(3)) >>> S = shear_matrix(angle, direct, point, normal) >>> numpy.allclose(1.0, numpy.linalg.det(S)) True``` ### function shear_from_matrix ```python def shear_from_matrix( matrix matrix ) Return shear angle, direction and plane from shear matrix. >>> angle = (random.random() - 0.5) * 4*math.pi >>> direct = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.cross(direct, numpy.random.random(3)) >>> S0 = shear_matrix(angle, direct, point, normal) >>> angle, direct, point, normal = shear_from_matrix(S0) >>> S1 = shear_matrix(angle, direct, point, normal) >>> is_same_transform(S0, S1) True``` ### function decompose_matrix ```python def decompose_matrix( matrix matrix ) Return sequence of transformations from transformation matrix. matrix : array_like Non-degenerative homogeneous transformation matrix Return tuple of: scale : vector of 3 scaling factors shear : list of shear factors for x-y, x-z, y-z axes angles : list of Euler angles about static x, y, z axes translate : translation vector along x, y, z axes perspective : perspective partition of matrix Raise ValueError if matrix is of wrong type or degenerative. >>> T0 = translation_matrix((1, 2, 3)) >>> scale, shear, angles, trans, persp = decompose_matrix(T0) >>> T1 = translation_matrix(trans) >>> numpy.allclose(T0, T1) True >>> S = scale_matrix(0.123) >>> scale, shear, angles, trans, persp = decompose_matrix(S) >>> scale[0] 0.123 >>> R0 = euler_matrix(1, 2, 3) >>> scale, shear, angles, trans, persp = decompose_matrix(R0) >>> R1 = euler_matrix(*angles) >>> numpy.allclose(R0, R1) True``` ### function compose_matrix ```python def compose_matrix( scale scale =None, shear shear =None, angles angles =None, translate translate =None, perspective perspective =None ) Return transformation matrix from sequence of transformations. This is the inverse of the decompose_matrix function. Sequence of transformations: scale : vector of 3 scaling factors shear : list of shear factors for x-y, x-z, y-z axes angles : list of Euler angles about static x, y, z axes translate : translation vector along x, y, z axes perspective : perspective partition of matrix >>> scale = numpy.random.random(3) - 0.5 >>> shear = numpy.random.random(3) - 0.5 >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi) >>> trans = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(4) - 0.5 >>> M0 = compose_matrix(scale, shear, angles, trans, persp) >>> result = decompose_matrix(M0) >>> M1 = compose_matrix(*result) >>> is_same_transform(M0, M1) True``` ### function orthogonalization_matrix ```python def orthogonalization_matrix( lengths lengths, angles angles ) Return orthogonalization matrix for crystallographic cell coordinates. Angles are expected in degrees. The de-orthogonalization matrix is the inverse. >>> O = orthogonalization_matrix((10., 10., 10.), (90., 90., 90.)) >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10) True >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7]) >>> numpy.allclose(numpy.sum(O), 43.063229) True``` ### function superimposition_matrix ```python def superimposition_matrix( v0 v0, v1 v1, scaling scaling =False, usesvd usesvd =True ) Return matrix to transform given vector set into second vector set. v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 vectors. If usesvd is True, the weighted sum of squared deviations (RMSD) is minimized according to the algorithm by W. Kabsch [8]. Otherwise the quaternion based algorithm by B. Horn [9] is used (slower when using this Python implementation). The returned matrix performs rotation, translation and uniform scaling (if specified). >>> v0 = numpy.random.rand(3, 10) >>> M = superimposition_matrix(v0, v0) >>> numpy.allclose(M, numpy.identity(4)) True >>> R = random_rotation_matrix(numpy.random.random(3)) >>> v0 = ((1,0,0), (0,1,0), (0,0,1), (1,1,1)) >>> v1 = numpy.dot(R, v0) >>> M = superimposition_matrix(v0, v1) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20.0 >>> v0[3] = 1.0 >>> v1 = numpy.dot(R, v0) >>> M = superimposition_matrix(v0, v1) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> S = scale_matrix(random.random()) >>> T = translation_matrix(numpy.random.random(3)-0.5) >>> M = concatenate_matrices(T, R, S) >>> v1 = numpy.dot(M, v0) >>> v0[:3] += numpy.random.normal(0.0, 1e-9, 300).reshape(3, -1) >>> M = superimposition_matrix(v0, v1, scaling=True) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> v = numpy.empty((4, 100, 3), dtype=numpy.float64) >>> v[:, :, 0] = v0 >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False) >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0])) True``` ### function euler_matrix ```python def euler_matrix( ai ai, aj aj, ak ak, axes axes ='sxyz' ) Return homogeneous rotation matrix from Euler angles and axis sequence. ai, aj, ak : Euler's roll, pitch and yaw angles axes : One of 24 axis sequences as string or encoded tuple >>> R = euler_matrix(1, 2, 3, 'syxz') >>> numpy.allclose(numpy.sum(R[0]), -1.34786452) True >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1)) >>> numpy.allclose(numpy.sum(R[0]), -0.383436184) True >>> ai, aj, ak = (4.0*math.pi) * (numpy.random.random(3) - 0.5) >>> for axes in _AXES2TUPLE.keys(): ... R = euler_matrix(ai, aj, ak, axes) >>> for axes in _TUPLE2AXES.keys(): ... R = euler_matrix(ai, aj, ak, axes)``` ### function euler_from_matrix ```python def euler_from_matrix( matrix matrix, axes axes ='sxyz' ) Return Euler angles from rotation matrix for specified axis sequence. axes : One of 24 axis sequences as string or encoded tuple Note that many Euler angle triplets can describe one matrix. >>> R0 = euler_matrix(1, 2, 3, 'syxz') >>> al, be, ga = euler_from_matrix(R0, 'syxz') >>> R1 = euler_matrix(al, be, ga, 'syxz') >>> numpy.allclose(R0, R1) True >>> angles = (4.0*math.pi) * (numpy.random.random(3) - 0.5) >>> for axes in _AXES2TUPLE.keys(): ... R0 = euler_matrix(axes=axes, *angles) ... R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes)) ... if not numpy.allclose(R0, R1): print axes, \"failed\"``` ### function euler_from_quaternion ```python def euler_from_quaternion( quaternion quaternion, axes axes ='sxyz' ) Return Euler angles from quaternion for specified axis sequence. >>> angles = euler_from_quaternion([0.06146124, 0, 0, 0.99810947]) >>> numpy.allclose(angles, [0.123, 0, 0]) True``` ### function quaternion_from_euler ```python def quaternion_from_euler( ai ai, aj aj, ak ak, axes axes ='sxyz' ) Return quaternion from Euler angles and axis sequence. ai, aj, ak : Euler's roll, pitch and yaw angles axes : One of 24 axis sequences as string or encoded tuple >>> q = quaternion_from_euler(1, 2, 3, 'ryxz') >>> numpy.allclose(q, [0.310622, -0.718287, 0.444435, 0.435953]) True``` ### function quaternion_about_axis ```python def quaternion_about_axis( angle angle, axis axis ) Return quaternion for rotation about axis. >>> q = quaternion_about_axis(0.123, (1, 0, 0)) >>> numpy.allclose(q, [0.06146124, 0, 0, 0.99810947]) True``` ### function quaternion_matrix ```python def quaternion_matrix( quaternion quaternion ) Return homogeneous rotation matrix from quaternion. >>> R = quaternion_matrix([0.06146124, 0, 0, 0.99810947]) >>> numpy.allclose(R, rotation_matrix(0.123, (1, 0, 0))) True``` ### function quaternion_from_matrix ```python def quaternion_from_matrix( matrix matrix ) Return quaternion from rotation matrix. >>> R = rotation_matrix(0.123, (1, 2, 3)) >>> q = quaternion_from_matrix(R) >>> numpy.allclose(q, [0.0164262, 0.0328524, 0.0492786, 0.9981095]) True``` ### function quaternion_multiply ```python def quaternion_multiply( quaternion1 quaternion1, quaternion0 quaternion0 ) Return multiplication of two quaternions. >>> q = quaternion_multiply([1, -2, 3, 4], [-5, 6, 7, 8]) >>> numpy.allclose(q, [-44, -14, 48, 28]) True``` ### function quaternion_conjugate ```python def quaternion_conjugate( quaternion quaternion ) Return conjugate of quaternion. >>> q0 = random_quaternion() >>> q1 = quaternion_conjugate(q0) >>> q1[3] == q0[3] and all(q1[:3] == -q0[:3]) True``` ### function quaternion_inverse ```python def quaternion_inverse( quaternion quaternion ) Return inverse of quaternion. >>> q0 = random_quaternion() >>> q1 = quaternion_inverse(q0) >>> numpy.allclose(quaternion_multiply(q0, q1), [0, 0, 0, 1]) True``` ### function quaternion_slerp ```python def quaternion_slerp( quat0 quat0, quat1 quat1, fraction fraction, spin spin =0, shortestpath shortestpath =True ) Return spherical linear interpolation between two quaternions. >>> q0 = random_quaternion() >>> q1 = random_quaternion() >>> q = quaternion_slerp(q0, q1, 0.0) >>> numpy.allclose(q, q0) True >>> q = quaternion_slerp(q0, q1, 1.0, 1) >>> numpy.allclose(q, q1) True >>> q = quaternion_slerp(q0, q1, 0.5) >>> angle = math.acos(numpy.dot(q0, q)) >>> numpy.allclose(2.0, math.acos(numpy.dot(q0, q1)) / angle) or \\ numpy.allclose(2.0, math.acos(-numpy.dot(q0, q1)) / angle) True``` ### function random_quaternion ```python def random_quaternion( rand rand =None ) Return uniform random unit quaternion. rand: array like or None Three independent random variables that are uniformly distributed between 0 and 1. >>> q = random_quaternion() >>> numpy.allclose(1.0, vector_norm(q)) True >>> q = random_quaternion(numpy.random.random(3)) >>> q.shape (4,)``` ### function random_rotation_matrix ```python def random_rotation_matrix( rand rand =None ) Return uniform random rotation matrix. rnd: array like Three independent random variables that are uniformly distributed between 0 and 1 for each returned quaternion. >>> R = random_rotation_matrix() >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4)) True``` ### function arcball_map_to_sphere ```python def arcball_map_to_sphere( point point, center center, radius radius ) Return unit sphere coordinates from window coordinates.``` ### function arcball_constrain_to_axis ```python def arcball_constrain_to_axis( point point, axis axis ) Return sphere point perpendicular to axis.``` ### function arcball_nearest_axis ```python def arcball_nearest_axis( point point, axes axes ) Return axis, which arc is nearest to point.``` ### function vector_norm ```python def vector_norm( data data, axis axis =None, out out =None ) Return length, i.e. eucledian norm, of ndarray along axis. >>> v = numpy.random.random(3) >>> n = vector_norm(v) >>> numpy.allclose(n, numpy.linalg.norm(v)) True >>> v = numpy.random.rand(6, 5, 3) >>> n = vector_norm(v, axis=-1) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2))) True >>> n = vector_norm(v, axis=1) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1))) True >>> v = numpy.random.rand(5, 4, 3) >>> n = numpy.empty((5, 3), dtype=numpy.float64) >>> vector_norm(v, axis=1, out=n) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1))) True >>> vector_norm([]) 0.0 >>> vector_norm([1.0]) 1.0``` ### function unit_vector ```python def unit_vector( data data, axis axis =None, out out =None ) Return ndarray normalized by length, i.e. eucledian norm, along axis. >>> v0 = numpy.random.random(3) >>> v1 = unit_vector(v0) >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0)) True >>> v0 = numpy.random.rand(5, 4, 3) >>> v1 = unit_vector(v0, axis=-1) >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2) >>> numpy.allclose(v1, v2) True >>> v1 = unit_vector(v0, axis=1) >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1) >>> numpy.allclose(v1, v2) True >>> v1 = numpy.empty((5, 4, 3), dtype=numpy.float64) >>> unit_vector(v0, axis=1, out=v1) >>> numpy.allclose(v1, v2) True >>> list(unit_vector([])) [] >>> list(unit_vector([1.0])) [1.0]``` ### function random_vector ```python def random_vector( size size ) Return array of random doubles in the half-open interval [0.0, 1.0). >>> v = random_vector(10000) >>> numpy.all(v >= 0.0) and numpy.all(v < 1.0) True >>> v0 = random_vector(10) >>> v1 = random_vector(10) >>> numpy.any(v0 == v1) False``` ### function inverse_matrix ```python def inverse_matrix( matrix matrix ) Return inverse of square transformation matrix. >>> M0 = random_rotation_matrix() >>> M1 = inverse_matrix(M0.T) >>> numpy.allclose(M1, numpy.linalg.inv(M0.T)) True >>> for size in range(1, 7): ... M0 = numpy.random.rand(size, size) ... M1 = inverse_matrix(M0) ... if not numpy.allclose(M1, numpy.linalg.inv(M0)): print size``` ### function concatenate_matrices ```python def concatenate_matrices( * matrices ) Return concatenation of series of transformation matrices. >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5 >>> numpy.allclose(M, concatenate_matrices(M)) True >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T)) True``` ### function is_same_transform ```python def is_same_transform( matrix0 matrix0, matrix1 matrix1 ) ``` Return True if two matrices perform same transformation. is_same_transform(numpy.identity(4), numpy.identity(4)) True is_same_transform(numpy.identity(4), random_rotation_matrix()) False``` Updated on 2022-11-24 at 19:19:32 +0000","title":"tf_quaternion::transformations"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/#tf_quaterniontransformations","text":"","title":"tf_quaternion::transformations"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/#classes","text":"Name class tf_quaternion::transformations::Arcball","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/#functions","text":"Name def identity_matrix () def translation_matrix (direction direction) def translation_from_matrix (matrix matrix) def reflection_matrix (point point, normal normal) def reflection_from_matrix (matrix matrix) def rotation_matrix (angle angle, direction direction, point point =None) def rotation_from_matrix (matrix matrix) def scale_matrix (factor factor, origin origin =None, direction direction =None) def scale_from_matrix (matrix matrix) def projection_matrix (point point, normal normal, direction direction =None, perspective perspective =None, pseudo pseudo =False) def projection_from_matrix (matrix matrix, pseudo pseudo =False) def clip_matrix (left left, right right, bottom bottom, top top, near near, far far, perspective perspective =False) def shear_matrix (angle angle, direction direction, point point, normal normal) def shear_from_matrix (matrix matrix) def decompose_matrix (matrix matrix) def compose_matrix (scale scale =None, shear shear =None, angles angles =None, translate translate =None, perspective perspective =None) def orthogonalization_matrix (lengths lengths, angles angles) def superimposition_matrix (v0 v0, v1 v1, scaling scaling =False, usesvd usesvd =True) def euler_matrix (ai ai, aj aj, ak ak, axes axes ='sxyz') def euler_from_matrix (matrix matrix, axes axes ='sxyz') def euler_from_quaternion (quaternion quaternion, axes axes ='sxyz') def quaternion_from_euler (ai ai, aj aj, ak ak, axes axes ='sxyz') def quaternion_about_axis (angle angle, axis axis) def quaternion_matrix (quaternion quaternion) def quaternion_from_matrix (matrix matrix) def quaternion_multiply (quaternion1 quaternion1, quaternion0 quaternion0) def quaternion_conjugate (quaternion quaternion) def quaternion_inverse (quaternion quaternion) def quaternion_slerp (quat0 quat0, quat1 quat1, fraction fraction, spin spin =0, shortestpath shortestpath =True) def random_quaternion (rand rand =None) def random_rotation_matrix (rand rand =None) def arcball_map_to_sphere (point point, center center, radius radius) def arcball_constrain_to_axis (point point, axis axis) def arcball_nearest_axis (point point, axes axes) def vector_norm (data data, axis axis =None, out out =None) def unit_vector (data data, axis axis =None, out out =None) def random_vector (size size) def inverse_matrix (matrix matrix) def concatenate_matrices (* matrices) def is_same_transform (matrix0 matrix0, matrix1 matrix1)","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespacetf__quaternion_1_1transformations/#function-identity_matrix","text":"def identity_matrix() Return 4x4 identity/unit matrix. >>> I = identity_matrix() >>> numpy.allclose(I, numpy.dot(I, I)) True >>> numpy.sum(I), numpy.trace(I) (4.0, 4.0) >>> numpy.allclose(I, numpy.identity(4, dtype=numpy.float64)) True``` ### function translation_matrix ```python def translation_matrix( direction direction ) Return matrix to translate by direction vector. >>> v = numpy.random.random(3) - 0.5 >>> numpy.allclose(v, translation_matrix(v)[:3, 3]) True``` ### function translation_from_matrix ```python def translation_from_matrix( matrix matrix ) Return translation vector from translation matrix. >>> v0 = numpy.random.random(3) - 0.5 >>> v1 = translation_from_matrix(translation_matrix(v0)) >>> numpy.allclose(v0, v1) True``` ### function reflection_matrix ```python def reflection_matrix( point point, normal normal ) Return matrix to mirror at plane defined by point and normal vector. >>> v0 = numpy.random.random(4) - 0.5 >>> v0[3] = 1.0 >>> v1 = numpy.random.random(3) - 0.5 >>> R = reflection_matrix(v0, v1) >>> numpy.allclose(2., numpy.trace(R)) True >>> numpy.allclose(v0, numpy.dot(R, v0)) True >>> v2 = v0.copy() >>> v2[:3] += v1 >>> v3 = v0.copy() >>> v2[:3] -= v1 >>> numpy.allclose(v2, numpy.dot(R, v3)) True``` ### function reflection_from_matrix ```python def reflection_from_matrix( matrix matrix ) Return mirror plane point and normal vector from reflection matrix. >>> v0 = numpy.random.random(3) - 0.5 >>> v1 = numpy.random.random(3) - 0.5 >>> M0 = reflection_matrix(v0, v1) >>> point, normal = reflection_from_matrix(M0) >>> M1 = reflection_matrix(point, normal) >>> is_same_transform(M0, M1) True``` ### function rotation_matrix ```python def rotation_matrix( angle angle, direction direction, point point =None ) Return matrix to rotate about axis defined by point and direction. >>> angle = (random.random() - 0.5) * (2*math.pi) >>> direc = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(angle-2*math.pi, direc, point) >>> is_same_transform(R0, R1) True >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(-angle, -direc, point) >>> is_same_transform(R0, R1) True >>> I = numpy.identity(4, numpy.float64) >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc)) True >>> numpy.allclose(2., numpy.trace(rotation_matrix(math.pi/2, ... direc, point))) True``` ### function rotation_from_matrix ```python def rotation_from_matrix( matrix matrix ) Return rotation angle and axis from rotation matrix. >>> angle = (random.random() - 0.5) * (2*math.pi) >>> direc = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> R0 = rotation_matrix(angle, direc, point) >>> angle, direc, point = rotation_from_matrix(R0) >>> R1 = rotation_matrix(angle, direc, point) >>> is_same_transform(R0, R1) True``` ### function scale_matrix ```python def scale_matrix( factor factor, origin origin =None, direction direction =None ) Return matrix to scale by factor around origin in direction. Use factor -1 for point symmetry. >>> v = (numpy.random.rand(4, 5) - 0.5) * 20.0 >>> v[3] = 1.0 >>> S = scale_matrix(-1.234) >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3]) True >>> factor = random.random() * 10 - 5 >>> origin = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> S = scale_matrix(factor, origin) >>> S = scale_matrix(factor, origin, direct)``` ### function scale_from_matrix ```python def scale_from_matrix( matrix matrix ) Return scaling factor, origin and direction from scaling matrix. >>> factor = random.random() * 10 - 5 >>> origin = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> S0 = scale_matrix(factor, origin) >>> factor, origin, direction = scale_from_matrix(S0) >>> S1 = scale_matrix(factor, origin, direction) >>> is_same_transform(S0, S1) True >>> S0 = scale_matrix(factor, origin, direct) >>> factor, origin, direction = scale_from_matrix(S0) >>> S1 = scale_matrix(factor, origin, direction) >>> is_same_transform(S0, S1) True``` ### function projection_matrix ```python def projection_matrix( point point, normal normal, direction direction =None, perspective perspective =None, pseudo pseudo =False ) Return matrix to project onto plane defined by point and normal. Using either perspective point, projection direction, or none of both. If pseudo is True, perspective projections will preserve relative depth such that Perspective = dot(Orthogonal, PseudoPerspective). >>> P = projection_matrix((0, 0, 0), (1, 0, 0)) >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:]) True >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(3) - 0.5 >>> P0 = projection_matrix(point, normal) >>> P1 = projection_matrix(point, normal, direction=direct) >>> P2 = projection_matrix(point, normal, perspective=persp) >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True) >>> is_same_transform(P2, numpy.dot(P0, P3)) True >>> P = projection_matrix((3, 0, 0), (1, 1, 0), (1, 0, 0)) >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20.0 >>> v0[3] = 1.0 >>> v1 = numpy.dot(P, v0) >>> numpy.allclose(v1[1], v0[1]) True >>> numpy.allclose(v1[0], 3.0-v1[1]) True``` ### function projection_from_matrix ```python def projection_from_matrix( matrix matrix, pseudo pseudo =False ) Return projection plane and perspective point from projection matrix. Return values are same as arguments for projection_matrix function: point, normal, direction, perspective, and pseudo. >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.random.random(3) - 0.5 >>> direct = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(3) - 0.5 >>> P0 = projection_matrix(point, normal) >>> result = projection_from_matrix(P0) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, direct) >>> result = projection_from_matrix(P0) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False) >>> result = projection_from_matrix(P0, pseudo=False) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True) >>> result = projection_from_matrix(P0, pseudo=True) >>> P1 = projection_matrix(*result) >>> is_same_transform(P0, P1) True``` ### function clip_matrix ```python def clip_matrix( left left, right right, bottom bottom, top top, near near, far far, perspective perspective =False ) Return matrix to obtain normalized device coordinates from frustrum. The frustrum bounds are axis-aligned along x (left, right), y (bottom, top) and z (near, far). Normalized device coordinates are in range [-1, 1] if coordinates are inside the frustrum. If perspective is True the frustrum is a truncated pyramid with the perspective point at origin and direction along z axis, otherwise an orthographic canonical view volume (a box). Homogeneous coordinates transformed by the perspective clip matrix need to be dehomogenized (devided by w coordinate). >>> frustrum = numpy.random.rand(6) >>> frustrum[1] += frustrum[0] >>> frustrum[3] += frustrum[2] >>> frustrum[5] += frustrum[4] >>> M = clip_matrix(*frustrum, perspective=False) >>> numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0]) array([-1., -1., -1., 1.]) >>> numpy.dot(M, [frustrum[1], frustrum[3], frustrum[5], 1.0]) array([ 1., 1., 1., 1.]) >>> M = clip_matrix(*frustrum, perspective=True) >>> v = numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0]) >>> v / v[3] array([-1., -1., -1., 1.]) >>> v = numpy.dot(M, [frustrum[1], frustrum[3], frustrum[4], 1.0]) >>> v / v[3] array([ 1., 1., -1., 1.])``` ### function shear_matrix ```python def shear_matrix( angle angle, direction direction, point point, normal normal ) Return matrix to shear by angle along direction vector on shear plane. The shear plane is defined by a point and normal vector. The direction vector must be orthogonal to the plane's normal vector. A point P is transformed by the shear matrix into P\" such that the vector P-P\" is parallel to the direction vector and its extent is given by the angle of P-P'-P\", where P' is the orthogonal projection of P onto the shear plane. >>> angle = (random.random() - 0.5) * 4*math.pi >>> direct = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.cross(direct, numpy.random.random(3)) >>> S = shear_matrix(angle, direct, point, normal) >>> numpy.allclose(1.0, numpy.linalg.det(S)) True``` ### function shear_from_matrix ```python def shear_from_matrix( matrix matrix ) Return shear angle, direction and plane from shear matrix. >>> angle = (random.random() - 0.5) * 4*math.pi >>> direct = numpy.random.random(3) - 0.5 >>> point = numpy.random.random(3) - 0.5 >>> normal = numpy.cross(direct, numpy.random.random(3)) >>> S0 = shear_matrix(angle, direct, point, normal) >>> angle, direct, point, normal = shear_from_matrix(S0) >>> S1 = shear_matrix(angle, direct, point, normal) >>> is_same_transform(S0, S1) True``` ### function decompose_matrix ```python def decompose_matrix( matrix matrix ) Return sequence of transformations from transformation matrix. matrix : array_like Non-degenerative homogeneous transformation matrix Return tuple of: scale : vector of 3 scaling factors shear : list of shear factors for x-y, x-z, y-z axes angles : list of Euler angles about static x, y, z axes translate : translation vector along x, y, z axes perspective : perspective partition of matrix Raise ValueError if matrix is of wrong type or degenerative. >>> T0 = translation_matrix((1, 2, 3)) >>> scale, shear, angles, trans, persp = decompose_matrix(T0) >>> T1 = translation_matrix(trans) >>> numpy.allclose(T0, T1) True >>> S = scale_matrix(0.123) >>> scale, shear, angles, trans, persp = decompose_matrix(S) >>> scale[0] 0.123 >>> R0 = euler_matrix(1, 2, 3) >>> scale, shear, angles, trans, persp = decompose_matrix(R0) >>> R1 = euler_matrix(*angles) >>> numpy.allclose(R0, R1) True``` ### function compose_matrix ```python def compose_matrix( scale scale =None, shear shear =None, angles angles =None, translate translate =None, perspective perspective =None ) Return transformation matrix from sequence of transformations. This is the inverse of the decompose_matrix function. Sequence of transformations: scale : vector of 3 scaling factors shear : list of shear factors for x-y, x-z, y-z axes angles : list of Euler angles about static x, y, z axes translate : translation vector along x, y, z axes perspective : perspective partition of matrix >>> scale = numpy.random.random(3) - 0.5 >>> shear = numpy.random.random(3) - 0.5 >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi) >>> trans = numpy.random.random(3) - 0.5 >>> persp = numpy.random.random(4) - 0.5 >>> M0 = compose_matrix(scale, shear, angles, trans, persp) >>> result = decompose_matrix(M0) >>> M1 = compose_matrix(*result) >>> is_same_transform(M0, M1) True``` ### function orthogonalization_matrix ```python def orthogonalization_matrix( lengths lengths, angles angles ) Return orthogonalization matrix for crystallographic cell coordinates. Angles are expected in degrees. The de-orthogonalization matrix is the inverse. >>> O = orthogonalization_matrix((10., 10., 10.), (90., 90., 90.)) >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10) True >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7]) >>> numpy.allclose(numpy.sum(O), 43.063229) True``` ### function superimposition_matrix ```python def superimposition_matrix( v0 v0, v1 v1, scaling scaling =False, usesvd usesvd =True ) Return matrix to transform given vector set into second vector set. v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 vectors. If usesvd is True, the weighted sum of squared deviations (RMSD) is minimized according to the algorithm by W. Kabsch [8]. Otherwise the quaternion based algorithm by B. Horn [9] is used (slower when using this Python implementation). The returned matrix performs rotation, translation and uniform scaling (if specified). >>> v0 = numpy.random.rand(3, 10) >>> M = superimposition_matrix(v0, v0) >>> numpy.allclose(M, numpy.identity(4)) True >>> R = random_rotation_matrix(numpy.random.random(3)) >>> v0 = ((1,0,0), (0,1,0), (0,0,1), (1,1,1)) >>> v1 = numpy.dot(R, v0) >>> M = superimposition_matrix(v0, v1) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20.0 >>> v0[3] = 1.0 >>> v1 = numpy.dot(R, v0) >>> M = superimposition_matrix(v0, v1) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> S = scale_matrix(random.random()) >>> T = translation_matrix(numpy.random.random(3)-0.5) >>> M = concatenate_matrices(T, R, S) >>> v1 = numpy.dot(M, v0) >>> v0[:3] += numpy.random.normal(0.0, 1e-9, 300).reshape(3, -1) >>> M = superimposition_matrix(v0, v1, scaling=True) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False) >>> numpy.allclose(v1, numpy.dot(M, v0)) True >>> v = numpy.empty((4, 100, 3), dtype=numpy.float64) >>> v[:, :, 0] = v0 >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False) >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0])) True``` ### function euler_matrix ```python def euler_matrix( ai ai, aj aj, ak ak, axes axes ='sxyz' ) Return homogeneous rotation matrix from Euler angles and axis sequence. ai, aj, ak : Euler's roll, pitch and yaw angles axes : One of 24 axis sequences as string or encoded tuple >>> R = euler_matrix(1, 2, 3, 'syxz') >>> numpy.allclose(numpy.sum(R[0]), -1.34786452) True >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1)) >>> numpy.allclose(numpy.sum(R[0]), -0.383436184) True >>> ai, aj, ak = (4.0*math.pi) * (numpy.random.random(3) - 0.5) >>> for axes in _AXES2TUPLE.keys(): ... R = euler_matrix(ai, aj, ak, axes) >>> for axes in _TUPLE2AXES.keys(): ... R = euler_matrix(ai, aj, ak, axes)``` ### function euler_from_matrix ```python def euler_from_matrix( matrix matrix, axes axes ='sxyz' ) Return Euler angles from rotation matrix for specified axis sequence. axes : One of 24 axis sequences as string or encoded tuple Note that many Euler angle triplets can describe one matrix. >>> R0 = euler_matrix(1, 2, 3, 'syxz') >>> al, be, ga = euler_from_matrix(R0, 'syxz') >>> R1 = euler_matrix(al, be, ga, 'syxz') >>> numpy.allclose(R0, R1) True >>> angles = (4.0*math.pi) * (numpy.random.random(3) - 0.5) >>> for axes in _AXES2TUPLE.keys(): ... R0 = euler_matrix(axes=axes, *angles) ... R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes)) ... if not numpy.allclose(R0, R1): print axes, \"failed\"``` ### function euler_from_quaternion ```python def euler_from_quaternion( quaternion quaternion, axes axes ='sxyz' ) Return Euler angles from quaternion for specified axis sequence. >>> angles = euler_from_quaternion([0.06146124, 0, 0, 0.99810947]) >>> numpy.allclose(angles, [0.123, 0, 0]) True``` ### function quaternion_from_euler ```python def quaternion_from_euler( ai ai, aj aj, ak ak, axes axes ='sxyz' ) Return quaternion from Euler angles and axis sequence. ai, aj, ak : Euler's roll, pitch and yaw angles axes : One of 24 axis sequences as string or encoded tuple >>> q = quaternion_from_euler(1, 2, 3, 'ryxz') >>> numpy.allclose(q, [0.310622, -0.718287, 0.444435, 0.435953]) True``` ### function quaternion_about_axis ```python def quaternion_about_axis( angle angle, axis axis ) Return quaternion for rotation about axis. >>> q = quaternion_about_axis(0.123, (1, 0, 0)) >>> numpy.allclose(q, [0.06146124, 0, 0, 0.99810947]) True``` ### function quaternion_matrix ```python def quaternion_matrix( quaternion quaternion ) Return homogeneous rotation matrix from quaternion. >>> R = quaternion_matrix([0.06146124, 0, 0, 0.99810947]) >>> numpy.allclose(R, rotation_matrix(0.123, (1, 0, 0))) True``` ### function quaternion_from_matrix ```python def quaternion_from_matrix( matrix matrix ) Return quaternion from rotation matrix. >>> R = rotation_matrix(0.123, (1, 2, 3)) >>> q = quaternion_from_matrix(R) >>> numpy.allclose(q, [0.0164262, 0.0328524, 0.0492786, 0.9981095]) True``` ### function quaternion_multiply ```python def quaternion_multiply( quaternion1 quaternion1, quaternion0 quaternion0 ) Return multiplication of two quaternions. >>> q = quaternion_multiply([1, -2, 3, 4], [-5, 6, 7, 8]) >>> numpy.allclose(q, [-44, -14, 48, 28]) True``` ### function quaternion_conjugate ```python def quaternion_conjugate( quaternion quaternion ) Return conjugate of quaternion. >>> q0 = random_quaternion() >>> q1 = quaternion_conjugate(q0) >>> q1[3] == q0[3] and all(q1[:3] == -q0[:3]) True``` ### function quaternion_inverse ```python def quaternion_inverse( quaternion quaternion ) Return inverse of quaternion. >>> q0 = random_quaternion() >>> q1 = quaternion_inverse(q0) >>> numpy.allclose(quaternion_multiply(q0, q1), [0, 0, 0, 1]) True``` ### function quaternion_slerp ```python def quaternion_slerp( quat0 quat0, quat1 quat1, fraction fraction, spin spin =0, shortestpath shortestpath =True ) Return spherical linear interpolation between two quaternions. >>> q0 = random_quaternion() >>> q1 = random_quaternion() >>> q = quaternion_slerp(q0, q1, 0.0) >>> numpy.allclose(q, q0) True >>> q = quaternion_slerp(q0, q1, 1.0, 1) >>> numpy.allclose(q, q1) True >>> q = quaternion_slerp(q0, q1, 0.5) >>> angle = math.acos(numpy.dot(q0, q)) >>> numpy.allclose(2.0, math.acos(numpy.dot(q0, q1)) / angle) or \\ numpy.allclose(2.0, math.acos(-numpy.dot(q0, q1)) / angle) True``` ### function random_quaternion ```python def random_quaternion( rand rand =None ) Return uniform random unit quaternion. rand: array like or None Three independent random variables that are uniformly distributed between 0 and 1. >>> q = random_quaternion() >>> numpy.allclose(1.0, vector_norm(q)) True >>> q = random_quaternion(numpy.random.random(3)) >>> q.shape (4,)``` ### function random_rotation_matrix ```python def random_rotation_matrix( rand rand =None ) Return uniform random rotation matrix. rnd: array like Three independent random variables that are uniformly distributed between 0 and 1 for each returned quaternion. >>> R = random_rotation_matrix() >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4)) True``` ### function arcball_map_to_sphere ```python def arcball_map_to_sphere( point point, center center, radius radius ) Return unit sphere coordinates from window coordinates.``` ### function arcball_constrain_to_axis ```python def arcball_constrain_to_axis( point point, axis axis ) Return sphere point perpendicular to axis.``` ### function arcball_nearest_axis ```python def arcball_nearest_axis( point point, axes axes ) Return axis, which arc is nearest to point.``` ### function vector_norm ```python def vector_norm( data data, axis axis =None, out out =None ) Return length, i.e. eucledian norm, of ndarray along axis. >>> v = numpy.random.random(3) >>> n = vector_norm(v) >>> numpy.allclose(n, numpy.linalg.norm(v)) True >>> v = numpy.random.rand(6, 5, 3) >>> n = vector_norm(v, axis=-1) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2))) True >>> n = vector_norm(v, axis=1) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1))) True >>> v = numpy.random.rand(5, 4, 3) >>> n = numpy.empty((5, 3), dtype=numpy.float64) >>> vector_norm(v, axis=1, out=n) >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1))) True >>> vector_norm([]) 0.0 >>> vector_norm([1.0]) 1.0``` ### function unit_vector ```python def unit_vector( data data, axis axis =None, out out =None ) Return ndarray normalized by length, i.e. eucledian norm, along axis. >>> v0 = numpy.random.random(3) >>> v1 = unit_vector(v0) >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0)) True >>> v0 = numpy.random.rand(5, 4, 3) >>> v1 = unit_vector(v0, axis=-1) >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2) >>> numpy.allclose(v1, v2) True >>> v1 = unit_vector(v0, axis=1) >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1) >>> numpy.allclose(v1, v2) True >>> v1 = numpy.empty((5, 4, 3), dtype=numpy.float64) >>> unit_vector(v0, axis=1, out=v1) >>> numpy.allclose(v1, v2) True >>> list(unit_vector([])) [] >>> list(unit_vector([1.0])) [1.0]``` ### function random_vector ```python def random_vector( size size ) Return array of random doubles in the half-open interval [0.0, 1.0). >>> v = random_vector(10000) >>> numpy.all(v >= 0.0) and numpy.all(v < 1.0) True >>> v0 = random_vector(10) >>> v1 = random_vector(10) >>> numpy.any(v0 == v1) False``` ### function inverse_matrix ```python def inverse_matrix( matrix matrix ) Return inverse of square transformation matrix. >>> M0 = random_rotation_matrix() >>> M1 = inverse_matrix(M0.T) >>> numpy.allclose(M1, numpy.linalg.inv(M0.T)) True >>> for size in range(1, 7): ... M0 = numpy.random.rand(size, size) ... M1 = inverse_matrix(M0) ... if not numpy.allclose(M1, numpy.linalg.inv(M0)): print size``` ### function concatenate_matrices ```python def concatenate_matrices( * matrices ) Return concatenation of series of transformation matrices. >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5 >>> numpy.allclose(M, concatenate_matrices(M)) True >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T)) True``` ### function is_same_transform ```python def is_same_transform( matrix0 matrix0, matrix1 matrix1 ) ``` Return True if two matrices perform same transformation. is_same_transform(numpy.identity(4), numpy.identity(4)) True is_same_transform(numpy.identity(4), random_rotation_matrix()) False``` Updated on 2022-11-24 at 19:19:32 +0000","title":"function identity_matrix"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/","text":"unpause_simulation Attributes Name float timeout start_time unpause Attributes Documentation variable timeout float timeout = 0.0; variable start_time start_time = time.time(); variable unpause unpause = rospy.ServiceProxy('/gazebo/unpause_physics', Empty); Updated on 2022-11-24 at 19:19:32 +0000","title":"unpause_simulation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#unpause_simulation","text":"","title":"unpause_simulation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#attributes","text":"Name float timeout start_time unpause","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#variable-timeout","text":"float timeout = 0.0;","title":"variable timeout"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#variable-start_time","text":"start_time = time.time();","title":"variable start_time"},{"location":"api/markdown/uuv_simulator/uuv_assistants/Namespaces/namespaceunpause__simulation/#variable-unpause","text":"unpause = rospy.ServiceProxy('/gazebo/unpause_physics', Empty); Updated on 2022-11-24 at 19:19:32 +0000","title":"variable unpause"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/","text":"Classes namespace test_urdf_files class TestRexROVURDFFiles Updated on 2022-11-24 at 19:19:32 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/#classes","text":"namespace test_urdf_files class TestRexROVURDFFiles Updated on 2022-11-24 at 19:19:32 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/classtest__urdf__files_1_1TestRexROVURDFFiles/","text":"test_urdf_files::TestRexROVURDFFiles Inherits from TestCase Public Functions Name def test_xacro (self self) Public Functions Documentation function test_xacro def test_xacro( self self ) Updated on 2022-11-24 at 19:19:32 +0000","title":"test_urdf_files::TestRexROVURDFFiles"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/classtest__urdf__files_1_1TestRexROVURDFFiles/#test_urdf_filestestrexrovurdffiles","text":"Inherits from TestCase","title":"test_urdf_files::TestRexROVURDFFiles"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/classtest__urdf__files_1_1TestRexROVURDFFiles/#public-functions","text":"Name def test_xacro (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/classtest__urdf__files_1_1TestRexROVURDFFiles/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Classes/classtest__urdf__files_1_1TestRexROVURDFFiles/#function-test_xacro","text":"def test_xacro( self self ) Updated on 2022-11-24 at 19:19:32 +0000","title":"function test_xacro"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:32 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:32 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:32 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:32 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/","text":"Namespaces namespace test_urdf_files Updated on 2022-11-24 at 19:19:32 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/#namespaces","text":"namespace test_urdf_files Updated on 2022-11-24 at 19:19:32 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/","text":"test_urdf_files Classes Name class test_urdf_files::TestRexROVURDFFiles Functions Name def call_xacro (xml_file xml_file) Attributes Name string PKG string NAME Functions Documentation function call_xacro def call_xacro( xml_file xml_file ) Attributes Documentation variable PKG string PKG = 'uuv_descriptions'; variable NAME string NAME = 'test_urdf_files'; Updated on 2022-11-24 at 19:19:32 +0000","title":"test_urdf_files"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#test_urdf_files","text":"","title":"test_urdf_files"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#classes","text":"Name class test_urdf_files::TestRexROVURDFFiles","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#functions","text":"Name def call_xacro (xml_file xml_file)","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#attributes","text":"Name string PKG string NAME","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#function-call_xacro","text":"def call_xacro( xml_file xml_file )","title":"function call_xacro"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#variable-pkg","text":"string PKG = 'uuv_descriptions';","title":"variable PKG"},{"location":"api/markdown/uuv_simulator/uuv_descriptions/Namespaces/namespacetest__urdf__files/#variable-name","text":"string NAME = 'test_urdf_files'; Updated on 2022-11-24 at 19:19:32 +0000","title":"variable NAME"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/","text":"Classes namespace Eigen namespace gazebo class BuoyantObject Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. class ConversionFunction Abstact base class for a thruster conversion function. class ConversionFunctionBasic The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class ConversionFunctionBessa Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class ConversionFunctionFactory Factory singleton class that creates a ConversionFunction from sdf. class ConversionFunctionLinearInterp Conversion using linear interpolation between given data points. class Dynamics Abstract base class for thruster dynamics. class DynamicsFactory Factory singleton class that creates a ThrusterDynamics from sdf. class DynamicsFirstOrder First-order dynamic system. class DynamicsZeroOrder Trivial (no dynamics) zero-order dynamic system. class FinPlugin class HMBox Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. class HMCylinder Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. class HMFossen Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: class HMSphere Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. class HMSpheroid Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. class HydrodynamicModel class HydrodynamicModelFactory Factory singleton class that creates a HydrodynamicModel from sdf. class LiftDrag Abstract base class for Lift&Drag models. class LiftDragFactory Factory singleton class that creates a LiftDrag from sdf. class LiftDragQuadratic Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). class LiftDragTwoLines Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. class ThrusterDynamicsBessa Bessa's dynamic thruster model. class ThrusterDynamicsYoerger Yoerger's dynamic thruster model. class ThrusterPlugin Class for the thruster plugin. class UmbilicalModel class UmbilicalModelBerg class UmbilicalModelFactory Factory singleton class that creates an UmbilicalModel from sdf. class UmbilicalPlugin class UmbilicalSegment class UnderwaterObjectPlugin Gazebo model plugin class for underwater objects. Updated on 2022-11-24 at 19:19:33 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/#classes","text":"namespace Eigen namespace gazebo class BuoyantObject Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. class ConversionFunction Abstact base class for a thruster conversion function. class ConversionFunctionBasic The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class ConversionFunctionBessa Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class ConversionFunctionFactory Factory singleton class that creates a ConversionFunction from sdf. class ConversionFunctionLinearInterp Conversion using linear interpolation between given data points. class Dynamics Abstract base class for thruster dynamics. class DynamicsFactory Factory singleton class that creates a ThrusterDynamics from sdf. class DynamicsFirstOrder First-order dynamic system. class DynamicsZeroOrder Trivial (no dynamics) zero-order dynamic system. class FinPlugin class HMBox Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. class HMCylinder Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. class HMFossen Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: class HMSphere Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. class HMSpheroid Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. class HydrodynamicModel class HydrodynamicModelFactory Factory singleton class that creates a HydrodynamicModel from sdf. class LiftDrag Abstract base class for Lift&Drag models. class LiftDragFactory Factory singleton class that creates a LiftDrag from sdf. class LiftDragQuadratic Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). class LiftDragTwoLines Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. class ThrusterDynamicsBessa Bessa's dynamic thruster model. class ThrusterDynamicsYoerger Yoerger's dynamic thruster model. class ThrusterPlugin Class for the thruster plugin. class UmbilicalModel class UmbilicalModelBerg class UmbilicalModelFactory Factory singleton class that creates an UmbilicalModel from sdf. class UmbilicalPlugin class UmbilicalSegment class UnderwaterObjectPlugin Gazebo model plugin class for underwater objects. Updated on 2022-11-24 at 19:19:33 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/","text":"gazebo::BuoyantObject Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. #include <BuoyantObject.hh> Inherited by gazebo::HydrodynamicModel Public Functions Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function BuoyantObject BuoyantObject( physics::LinkPtr _link ) Constructor. function ~BuoyantObject ~BuoyantObject() Destructor. function GetBuoyancyForce void GetBuoyancyForce( const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque ) Returns the buoyancy force vector in the world frame. function ApplyBuoyancyForce void ApplyBuoyancyForce() Applies buoyancy force on link. function SetVolume void SetVolume( double _volume =-1 ) Sets the link's submerged volume. function GetVolume double GetVolume() Returns the stored link submerged volume. function SetFluidDensity void SetFluidDensity( double _fluidDensity ) Sets the fluid density in kg/m^3. function GetFluidDensity double GetFluidDensity() Returns the stored fluid density. function SetCoB void SetCoB( const ignition::math::Vector3d & _centerOfBuoyancy ) Sets the position of the center of buoyancy on the body frame. function GetCoB ignition::math::Vector3d GetCoB() Returns the stored center of buoyancy. function SetGravity void SetGravity( double _g ) Set acceleration of gravity. function GetGravity double GetGravity() Get stored acceleration of gravity. function SetBoundingBox void SetBoundingBox( const AxisAlignedBox & _bBox ) Sets bounding box. function SetStoreVector void SetStoreVector( std::string _tag ) Adds a field in the hydroWrench map. function GetStoredVector ignition::math::Vector3d GetStoredVector( std::string _tag ) Get vector from the hydroWrench map. function SetDebugFlag void SetDebugFlag( bool _debugOn =true ) Set debug flag to store intermediate forces and torques. function IsSubmerged bool IsSubmerged() Returns true if the robot is completely submerged. function IsNeutrallyBuoyant bool IsNeutrallyBuoyant() Returns true if the link was set to be neutrally buoyant. function GetDebugFlag bool GetDebugFlag() Returns the debug flag. function SetNeutrallyBuoyant void SetNeutrallyBuoyant() Sets this link as neutrally buoyant. Protected Functions Documentation function StoreVector void StoreVector( std::string _tag, ignition::math::Vector3d _vec ) Store vector in the hydroWrench map if the field has been created. Protected Attributes Documentation variable volume double volume; Volume of fluid displaced by the submerged object. variable scalingVolume double scalingVolume; Scaling factor for the volume. variable offsetVolume double offsetVolume; Offset for the volume. variable fluidDensity double fluidDensity; Fluid density. variable g double g; Acceleration of gravity. variable centerOfBuoyancy ignition::math::Vector3d centerOfBuoyancy; Center of buoyancy in the body frame. variable boundingBox AxisAlignedBox boundingBox; TEMP for calculation of the buoyancy force close to the surface. variable hydroWrench std::map< std::string, ignition::math::Vector3d > hydroWrench; Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. variable debugFlag bool debugFlag; Debug flag, storing all intermediate forces and torques. variable isSubmerged bool isSubmerged; Is submerged flag. variable link physics::LinkPtr link; Pointer to the correspondent robot link. variable neutrallyBuoyant bool neutrallyBuoyant; If true, the restoring force will be equal to the gravitational. variable metacentricWidth double metacentricWidth; variable metacentricLength double metacentricLength; Metacentric length of the robot, used only for surface vessels and floating objects. variable waterLevelPlaneArea double waterLevelPlaneArea; If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. variable submergedHeight double submergedHeight; Height of the robot that is submerged (only for surface vessels) variable isSurfaceVessel bool isSurfaceVessel; Flag set to true if the information about the metacentric width and height is available. variable isSurfaceVesselFloating bool isSurfaceVesselFloating; Flag set to true if the vessel has reached its submerged height. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::BuoyantObject"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#gazebobuoyantobject","text":"Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. #include <BuoyantObject.hh> Inherited by gazebo::HydrodynamicModel","title":"gazebo::BuoyantObject"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#public-functions","text":"Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#protected-functions","text":"Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#protected-attributes","text":"Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-buoyantobject","text":"BuoyantObject( physics::LinkPtr _link ) Constructor.","title":"function BuoyantObject"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-buoyantobject_1","text":"~BuoyantObject() Destructor.","title":"function ~BuoyantObject"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getbuoyancyforce","text":"void GetBuoyancyForce( const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque ) Returns the buoyancy force vector in the world frame.","title":"function GetBuoyancyForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-applybuoyancyforce","text":"void ApplyBuoyancyForce() Applies buoyancy force on link.","title":"function ApplyBuoyancyForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setvolume","text":"void SetVolume( double _volume =-1 ) Sets the link's submerged volume.","title":"function SetVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getvolume","text":"double GetVolume() Returns the stored link submerged volume.","title":"function GetVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setfluiddensity","text":"void SetFluidDensity( double _fluidDensity ) Sets the fluid density in kg/m^3.","title":"function SetFluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getfluiddensity","text":"double GetFluidDensity() Returns the stored fluid density.","title":"function GetFluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setcob","text":"void SetCoB( const ignition::math::Vector3d & _centerOfBuoyancy ) Sets the position of the center of buoyancy on the body frame.","title":"function SetCoB"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getcob","text":"ignition::math::Vector3d GetCoB() Returns the stored center of buoyancy.","title":"function GetCoB"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setgravity","text":"void SetGravity( double _g ) Set acceleration of gravity.","title":"function SetGravity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getgravity","text":"double GetGravity() Get stored acceleration of gravity.","title":"function GetGravity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setboundingbox","text":"void SetBoundingBox( const AxisAlignedBox & _bBox ) Sets bounding box.","title":"function SetBoundingBox"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setstorevector","text":"void SetStoreVector( std::string _tag ) Adds a field in the hydroWrench map.","title":"function SetStoreVector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getstoredvector","text":"ignition::math::Vector3d GetStoredVector( std::string _tag ) Get vector from the hydroWrench map.","title":"function GetStoredVector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setdebugflag","text":"void SetDebugFlag( bool _debugOn =true ) Set debug flag to store intermediate forces and torques.","title":"function SetDebugFlag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-issubmerged","text":"bool IsSubmerged() Returns true if the robot is completely submerged.","title":"function IsSubmerged"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-isneutrallybuoyant","text":"bool IsNeutrallyBuoyant() Returns true if the link was set to be neutrally buoyant.","title":"function IsNeutrallyBuoyant"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-getdebugflag","text":"bool GetDebugFlag() Returns the debug flag.","title":"function GetDebugFlag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-setneutrallybuoyant","text":"void SetNeutrallyBuoyant() Sets this link as neutrally buoyant.","title":"function SetNeutrallyBuoyant"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#function-storevector","text":"void StoreVector( std::string _tag, ignition::math::Vector3d _vec ) Store vector in the hydroWrench map if the field has been created.","title":"function StoreVector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-volume","text":"double volume; Volume of fluid displaced by the submerged object.","title":"variable volume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-scalingvolume","text":"double scalingVolume; Scaling factor for the volume.","title":"variable scalingVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-offsetvolume","text":"double offsetVolume; Offset for the volume.","title":"variable offsetVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-fluiddensity","text":"double fluidDensity; Fluid density.","title":"variable fluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-g","text":"double g; Acceleration of gravity.","title":"variable g"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-centerofbuoyancy","text":"ignition::math::Vector3d centerOfBuoyancy; Center of buoyancy in the body frame.","title":"variable centerOfBuoyancy"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-boundingbox","text":"AxisAlignedBox boundingBox; TEMP for calculation of the buoyancy force close to the surface.","title":"variable boundingBox"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-hydrowrench","text":"std::map< std::string, ignition::math::Vector3d > hydroWrench; Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes.","title":"variable hydroWrench"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-debugflag","text":"bool debugFlag; Debug flag, storing all intermediate forces and torques.","title":"variable debugFlag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-issubmerged","text":"bool isSubmerged; Is submerged flag.","title":"variable isSubmerged"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-link","text":"physics::LinkPtr link; Pointer to the correspondent robot link.","title":"variable link"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-neutrallybuoyant","text":"bool neutrallyBuoyant; If true, the restoring force will be equal to the gravitational.","title":"variable neutrallyBuoyant"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-metacentricwidth","text":"double metacentricWidth;","title":"variable metacentricWidth"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-metacentriclength","text":"double metacentricLength; Metacentric length of the robot, used only for surface vessels and floating objects.","title":"variable metacentricLength"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-waterlevelplanearea","text":"double waterLevelPlaneArea; If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box.","title":"variable waterLevelPlaneArea"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-submergedheight","text":"double submergedHeight; Height of the robot that is submerged (only for surface vessels)","title":"variable submergedHeight"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-issurfacevessel","text":"bool isSurfaceVessel; Flag set to true if the information about the metacentric width and height is available.","title":"variable isSurfaceVessel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1BuoyantObject/#variable-issurfacevesselfloating","text":"bool isSurfaceVesselFloating; Flag set to true if the vessel has reached its submerged height. Updated on 2022-11-24 at 19:19:32 +0000","title":"variable isSurfaceVesselFloating"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/","text":"gazebo::ConversionFunction Abstact base class for a thruster conversion function. #include <ThrusterConversionFcn.hh> Inherited by gazebo::ConversionFunctionBasic , gazebo::ConversionFunctionBessa , gazebo::ConversionFunctionLinearInterp Public Functions Name virtual ~ConversionFunction () Destructor. virtual std::string GetType () =0 Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. virtual double convert (double _cmd) =0 Convert thruster state (e.g. angular velocity) to thrust force. Protected Functions Name ConversionFunction () Protected constructor: Use the factory instead. Public Functions Documentation function ~ConversionFunction inline virtual ~ConversionFunction() Destructor. function GetType virtual std::string GetType() =0 Return (derived) type of conversion function. Reimplemented by : gazebo::ConversionFunctionBasic::GetType , gazebo::ConversionFunctionBessa::GetType , gazebo::ConversionFunctionLinearInterp::GetType function GetParam virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::ConversionFunctionBasic::GetParam , gazebo::ConversionFunctionBessa::GetParam , gazebo::ConversionFunctionLinearInterp::GetParam function GetTable inline virtual std::map< double, double > GetTable() Return input and output vectors of the lookup table. Reimplemented by : gazebo::ConversionFunctionLinearInterp::GetTable function convert virtual double convert( double _cmd ) =0 Convert thruster state (e.g. angular velocity) to thrust force. Reimplemented by : gazebo::ConversionFunctionBasic::convert , gazebo::ConversionFunctionBessa::convert , gazebo::ConversionFunctionLinearInterp::convert Protected Functions Documentation function ConversionFunction inline ConversionFunction() Protected constructor: Use the factory instead. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::ConversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#gazeboconversionfunction","text":"Abstact base class for a thruster conversion function. #include <ThrusterConversionFcn.hh> Inherited by gazebo::ConversionFunctionBasic , gazebo::ConversionFunctionBessa , gazebo::ConversionFunctionLinearInterp","title":"gazebo::ConversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#public-functions","text":"Name virtual ~ConversionFunction () Destructor. virtual std::string GetType () =0 Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. virtual double convert (double _cmd) =0 Convert thruster state (e.g. angular velocity) to thrust force.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#protected-functions","text":"Name ConversionFunction () Protected constructor: Use the factory instead.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-conversionfunction","text":"inline virtual ~ConversionFunction() Destructor.","title":"function ~ConversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-gettype","text":"virtual std::string GetType() =0 Return (derived) type of conversion function. Reimplemented by : gazebo::ConversionFunctionBasic::GetType , gazebo::ConversionFunctionBessa::GetType , gazebo::ConversionFunctionLinearInterp::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::ConversionFunctionBasic::GetParam , gazebo::ConversionFunctionBessa::GetParam , gazebo::ConversionFunctionLinearInterp::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-gettable","text":"inline virtual std::map< double, double > GetTable() Return input and output vectors of the lookup table. Reimplemented by : gazebo::ConversionFunctionLinearInterp::GetTable","title":"function GetTable"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-convert","text":"virtual double convert( double _cmd ) =0 Convert thruster state (e.g. angular velocity) to thrust force. Reimplemented by : gazebo::ConversionFunctionBasic::convert , gazebo::ConversionFunctionBessa::convert , gazebo::ConversionFunctionLinearInterp::convert","title":"function convert"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunction/#function-conversionfunction_1","text":"inline ConversionFunction() Protected constructor: Use the factory instead. Updated on 2022-11-24 at 19:19:32 +0000","title":"function ConversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/","text":"title: gazebo::ConversionFunctionBasic summary: The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. gazebo::ConversionFunctionBasic The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction Public Functions Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Additional inherited members Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead. Public Functions Documentation function create static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description. function GetType inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam function convert virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"classgazebo 1 1ConversionFunctionBasic"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#gazeboconversionfunctionbasic","text":"The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction","title":"gazebo::ConversionFunctionBasic"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#public-functions","text":"Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#additional-inherited-members","text":"Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#function-create","text":"static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBasic/#function-convert","text":"virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"function convert"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/","text":"title: gazebo::ConversionFunctionBessa summary: Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. gazebo::ConversionFunctionBessa Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction Public Functions Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Additional inherited members Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead. Public Functions Documentation function create static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description. function GetType inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam function convert virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"classgazebo 1 1ConversionFunctionBessa"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#gazeboconversionfunctionbessa","text":"Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction","title":"gazebo::ConversionFunctionBessa"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#public-functions","text":"Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#additional-inherited-members","text":"Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#function-create","text":"static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionBessa/#function-convert","text":"virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"function convert"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/","text":"gazebo::ConversionFunctionFactory Factory singleton class that creates a ConversionFunction from sdf. #include <ThrusterConversionFcn.hh> Public Functions Name ConversionFunction * CreateConversionFunction (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, ConversionFunctionCreator _creator) Register a ConversionFunction class with its creator. ConversionFunctionFactory & GetInstance () Return the singleton instance of this factory. Public Functions Documentation function CreateConversionFunction ConversionFunction * CreateConversionFunction( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description. function RegisterCreator bool RegisterCreator( const std::string & _identifier, ConversionFunctionCreator _creator ) Register a ConversionFunction class with its creator. function GetInstance static ConversionFunctionFactory & GetInstance() Return the singleton instance of this factory. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::ConversionFunctionFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#gazeboconversionfunctionfactory","text":"Factory singleton class that creates a ConversionFunction from sdf. #include <ThrusterConversionFcn.hh>","title":"gazebo::ConversionFunctionFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#public-functions","text":"Name ConversionFunction * CreateConversionFunction (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, ConversionFunctionCreator _creator) Register a ConversionFunction class with its creator. ConversionFunctionFactory & GetInstance () Return the singleton instance of this factory.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#function-createconversionfunction","text":"ConversionFunction * CreateConversionFunction( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description.","title":"function CreateConversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#function-registercreator","text":"bool RegisterCreator( const std::string & _identifier, ConversionFunctionCreator _creator ) Register a ConversionFunction class with its creator.","title":"function RegisterCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionFactory/#function-getinstance","text":"static ConversionFunctionFactory & GetInstance() Return the singleton instance of this factory. Updated on 2022-11-24 at 19:19:32 +0000","title":"function GetInstance"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/","text":"gazebo::ConversionFunctionLinearInterp Conversion using linear interpolation between given data points. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction Public Functions Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Additional inherited members Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead. Public Functions Documentation function create static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description. function GetType inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam function GetTable virtual std::map< double, double > GetTable() Return input and output vectors of the lookup table. Reimplements : gazebo::ConversionFunction::GetTable function convert virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::ConversionFunctionLinearInterp"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#gazeboconversionfunctionlinearinterp","text":"Conversion using linear interpolation between given data points. #include <ThrusterConversionFcn.hh> Inherits from gazebo::ConversionFunction","title":"gazebo::ConversionFunctionLinearInterp"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#public-functions","text":"Name ConversionFunction * create (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. virtual std::string GetType () Return (derived) type of conversion function. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#additional-inherited-members","text":"Public Functions inherited from gazebo::ConversionFunction Name virtual ~ConversionFunction () Destructor. Protected Functions inherited from gazebo::ConversionFunction Name ConversionFunction () Protected constructor: Use the factory instead.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#function-create","text":"static ConversionFunction * create( sdf::ElementPtr _sdf ) Create a ConversionFunction object according to its sdf Description.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of conversion function. Reimplements : gazebo::ConversionFunction::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::ConversionFunction::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#function-gettable","text":"virtual std::map< double, double > GetTable() Return input and output vectors of the lookup table. Reimplements : gazebo::ConversionFunction::GetTable","title":"function GetTable"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ConversionFunctionLinearInterp/#function-convert","text":"virtual double convert( double _cmd ) Convert thruster state (e.g. angular velocity) to thrust force. Reimplements : gazebo::ConversionFunction::convert Updated on 2022-11-24 at 19:19:32 +0000","title":"function convert"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/","text":"gazebo::Dynamics Abstract base class for thruster dynamics. #include <Dynamics.hh> Inherited by gazebo::DynamicsFirstOrder , gazebo::DynamicsZeroOrder , gazebo::ThrusterDynamicsBessa , gazebo::ThrusterDynamicsYoerger Public Functions Name virtual ~Dynamics () Destructor. virtual std::string GetType () =0 Return (derived) type of thruster dynamics. virtual double update (double _cmd, double _t) =0 Update the dynamic model. virtual void Reset () Protected Functions Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function ~Dynamics inline virtual ~Dynamics() Destructor. function GetType virtual std::string GetType() =0 Return (derived) type of thruster dynamics. Reimplemented by : gazebo::DynamicsZeroOrder::GetType , gazebo::DynamicsFirstOrder::GetType , gazebo::ThrusterDynamicsYoerger::GetType , gazebo::ThrusterDynamicsBessa::GetType function update virtual double update( double _cmd, double _t ) =0 Update the dynamic model. Parameters : _cmd The commanded value. _t Time stamp of command. Reimplemented by : gazebo::DynamicsZeroOrder::update , gazebo::DynamicsFirstOrder::update , gazebo::ThrusterDynamicsYoerger::update , gazebo::ThrusterDynamicsBessa::update function Reset virtual void Reset() Protected Functions Documentation function Dynamics inline Dynamics() Protected constructor: Use the factory for object creation. Protected Attributes Documentation variable prevTime double prevTime; Time of last state update. variable state double state; Latest state. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::Dynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#gazebodynamics","text":"Abstract base class for thruster dynamics. #include <Dynamics.hh> Inherited by gazebo::DynamicsFirstOrder , gazebo::DynamicsZeroOrder , gazebo::ThrusterDynamicsBessa , gazebo::ThrusterDynamicsYoerger","title":"gazebo::Dynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#public-functions","text":"Name virtual ~Dynamics () Destructor. virtual std::string GetType () =0 Return (derived) type of thruster dynamics. virtual double update (double _cmd, double _t) =0 Update the dynamic model. virtual void Reset ()","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#protected-functions","text":"Name Dynamics () Protected constructor: Use the factory for object creation.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#protected-attributes","text":"Name double prevTime Time of last state update. double state Latest state.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#function-dynamics","text":"inline virtual ~Dynamics() Destructor.","title":"function ~Dynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#function-gettype","text":"virtual std::string GetType() =0 Return (derived) type of thruster dynamics. Reimplemented by : gazebo::DynamicsZeroOrder::GetType , gazebo::DynamicsFirstOrder::GetType , gazebo::ThrusterDynamicsYoerger::GetType , gazebo::ThrusterDynamicsBessa::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#function-update","text":"virtual double update( double _cmd, double _t ) =0 Update the dynamic model. Parameters : _cmd The commanded value. _t Time stamp of command. Reimplemented by : gazebo::DynamicsZeroOrder::update , gazebo::DynamicsFirstOrder::update , gazebo::ThrusterDynamicsYoerger::update , gazebo::ThrusterDynamicsBessa::update","title":"function update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#function-reset","text":"virtual void Reset()","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#function-dynamics_1","text":"inline Dynamics() Protected constructor: Use the factory for object creation.","title":"function Dynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#variable-prevtime","text":"double prevTime; Time of last state update.","title":"variable prevTime"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1Dynamics/#variable-state","text":"double state; Latest state. Updated on 2022-11-24 at 19:19:32 +0000","title":"variable state"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/","text":"gazebo::DynamicsFactory Factory singleton class that creates a ThrusterDynamics from sdf. #include <Dynamics.hh> Public Functions Name Dynamics * CreateDynamics (sdf::ElementPtr _sdf) Create ThrusterDynamics object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, DynamicsCreator _creator) Register a ThrusterDynamic class with its creator. DynamicsFactory & GetInstance () Returns the singleton instance of this factory. Public Functions Documentation function CreateDynamics Dynamics * CreateDynamics( sdf::ElementPtr _sdf ) Create ThrusterDynamics object according to its sdf Description. function RegisterCreator bool RegisterCreator( const std::string & _identifier, DynamicsCreator _creator ) Register a ThrusterDynamic class with its creator. function GetInstance static DynamicsFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::DynamicsFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#gazebodynamicsfactory","text":"Factory singleton class that creates a ThrusterDynamics from sdf. #include <Dynamics.hh>","title":"gazebo::DynamicsFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#public-functions","text":"Name Dynamics * CreateDynamics (sdf::ElementPtr _sdf) Create ThrusterDynamics object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, DynamicsCreator _creator) Register a ThrusterDynamic class with its creator. DynamicsFactory & GetInstance () Returns the singleton instance of this factory.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#function-createdynamics","text":"Dynamics * CreateDynamics( sdf::ElementPtr _sdf ) Create ThrusterDynamics object according to its sdf Description.","title":"function CreateDynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#function-registercreator","text":"bool RegisterCreator( const std::string & _identifier, DynamicsCreator _creator ) Register a ThrusterDynamic class with its creator.","title":"function RegisterCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFactory/#function-getinstance","text":"static DynamicsFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:32 +0000","title":"function GetInstance"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/","text":"gazebo::DynamicsFirstOrder First-order dynamic system. #include <Dynamics.hh> Inherits from gazebo::Dynamics Public Functions Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time. Additional inherited members Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function create static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType function update virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::DynamicsFirstOrder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#gazebodynamicsfirstorder","text":"First-order dynamic system. #include <Dynamics.hh> Inherits from gazebo::Dynamics","title":"gazebo::DynamicsFirstOrder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#public-functions","text":"Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#additional-inherited-members","text":"Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#function-create","text":"static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsFirstOrder/#function-update","text":"virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:32 +0000","title":"function update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/","text":"gazebo::DynamicsZeroOrder Trivial (no dynamics) zero-order dynamic system. #include <Dynamics.hh> Inherits from gazebo::Dynamics Public Functions Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time. Additional inherited members Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function create static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType function update virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::DynamicsZeroOrder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#gazebodynamicszeroorder","text":"Trivial (no dynamics) zero-order dynamic system. #include <Dynamics.hh> Inherits from gazebo::Dynamics","title":"gazebo::DynamicsZeroOrder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#public-functions","text":"Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#additional-inherited-members","text":"Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#function-create","text":"static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1DynamicsZeroOrder/#function-update","text":"virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:32 +0000","title":"function update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/","text":"gazebo::FinPlugin Inherits from ModelPlugin Public Functions Name FinPlugin () Constructor. virtual ~FinPlugin () Destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () void OnUpdate (const common::UpdateInfo & _info) Update the simulation state. Protected Functions Name void UpdateInput (ConstDoublePtr & _msg) Callback for the input topic subscriber. void UpdateCurrentVelocity (ConstVector3dPtr & _msg) Reads current velocity topic. Protected Attributes Name std::shared_ptr< Dynamics > dynamics Fin dynamic model. std::shared_ptr< LiftDrag > liftdrag Lift&Drag model. event::ConnectionPtr updateConnection Update event. transport::NodePtr node Gazebo node. physics::JointPtr joint The fin joint. physics::LinkPtr link The fin link. transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. transport::PublisherPtr anglePublisher Publisher to the output thrust topic. ignition::math::Vector3d finForce Force component calculated from the lift and drag module. double inputCommand Latest input command. int finID Fin ID. std::string topicPrefix Topic prefix. double angle Latest fin angle in [rad]. common::Time angleStamp Time stamp of latest thrust force. transport::SubscriberPtr currentSubscriber Subcriber to current message. ignition::math::Vector3d currentVelocity Current velocity vector read from topic. Public Functions Documentation function FinPlugin FinPlugin() Constructor. function ~FinPlugin virtual ~FinPlugin() Destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) function Init virtual void Init() function OnUpdate void OnUpdate( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function UpdateInput void UpdateInput( ConstDoublePtr & _msg ) Callback for the input topic subscriber. function UpdateCurrentVelocity void UpdateCurrentVelocity( ConstVector3dPtr & _msg ) Reads current velocity topic. Protected Attributes Documentation variable dynamics std::shared_ptr< Dynamics > dynamics; Fin dynamic model. variable liftdrag std::shared_ptr< LiftDrag > liftdrag; Lift&Drag model. variable updateConnection event::ConnectionPtr updateConnection; Update event. variable node transport::NodePtr node; Gazebo node. variable joint physics::JointPtr joint; The fin joint. variable link physics::LinkPtr link; The fin link. variable commandSubscriber transport::SubscriberPtr commandSubscriber; Subscriber to the reference signal topic. variable anglePublisher transport::PublisherPtr anglePublisher; Publisher to the output thrust topic. variable finForce ignition::math::Vector3d finForce; Force component calculated from the lift and drag module. variable inputCommand double inputCommand; Latest input command. variable finID int finID; Fin ID. variable topicPrefix std::string topicPrefix; Topic prefix. variable angle double angle; Latest fin angle in [rad]. variable angleStamp common::Time angleStamp; Time stamp of latest thrust force. variable currentSubscriber transport::SubscriberPtr currentSubscriber; Subcriber to current message. variable currentVelocity ignition::math::Vector3d currentVelocity; Current velocity vector read from topic. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::FinPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#gazebofinplugin","text":"Inherits from ModelPlugin","title":"gazebo::FinPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#public-functions","text":"Name FinPlugin () Constructor. virtual ~FinPlugin () Destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () void OnUpdate (const common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#protected-functions","text":"Name void UpdateInput (ConstDoublePtr & _msg) Callback for the input topic subscriber. void UpdateCurrentVelocity (ConstVector3dPtr & _msg) Reads current velocity topic.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#protected-attributes","text":"Name std::shared_ptr< Dynamics > dynamics Fin dynamic model. std::shared_ptr< LiftDrag > liftdrag Lift&Drag model. event::ConnectionPtr updateConnection Update event. transport::NodePtr node Gazebo node. physics::JointPtr joint The fin joint. physics::LinkPtr link The fin link. transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. transport::PublisherPtr anglePublisher Publisher to the output thrust topic. ignition::math::Vector3d finForce Force component calculated from the lift and drag module. double inputCommand Latest input command. int finID Fin ID. std::string topicPrefix Topic prefix. double angle Latest fin angle in [rad]. common::Time angleStamp Time stamp of latest thrust force. transport::SubscriberPtr currentSubscriber Subcriber to current message. ignition::math::Vector3d currentVelocity Current velocity vector read from topic.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-finplugin","text":"FinPlugin() Constructor.","title":"function FinPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-finplugin_1","text":"virtual ~FinPlugin() Destructor.","title":"function ~FinPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-init","text":"virtual void Init()","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-onupdate","text":"void OnUpdate( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-updateinput","text":"void UpdateInput( ConstDoublePtr & _msg ) Callback for the input topic subscriber.","title":"function UpdateInput"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#function-updatecurrentvelocity","text":"void UpdateCurrentVelocity( ConstVector3dPtr & _msg ) Reads current velocity topic.","title":"function UpdateCurrentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-dynamics","text":"std::shared_ptr< Dynamics > dynamics; Fin dynamic model.","title":"variable dynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-liftdrag","text":"std::shared_ptr< LiftDrag > liftdrag; Lift&Drag model.","title":"variable liftdrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-node","text":"transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-joint","text":"physics::JointPtr joint; The fin joint.","title":"variable joint"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-link","text":"physics::LinkPtr link; The fin link.","title":"variable link"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-commandsubscriber","text":"transport::SubscriberPtr commandSubscriber; Subscriber to the reference signal topic.","title":"variable commandSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-anglepublisher","text":"transport::PublisherPtr anglePublisher; Publisher to the output thrust topic.","title":"variable anglePublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-finforce","text":"ignition::math::Vector3d finForce; Force component calculated from the lift and drag module.","title":"variable finForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-inputcommand","text":"double inputCommand; Latest input command.","title":"variable inputCommand"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-finid","text":"int finID; Fin ID.","title":"variable finID"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-topicprefix","text":"std::string topicPrefix; Topic prefix.","title":"variable topicPrefix"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-angle","text":"double angle; Latest fin angle in [rad].","title":"variable angle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-anglestamp","text":"common::Time angleStamp; Time stamp of latest thrust force.","title":"variable angleStamp"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-currentsubscriber","text":"transport::SubscriberPtr currentSubscriber; Subcriber to current message.","title":"variable currentSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1FinPlugin/#variable-currentvelocity","text":"ignition::math::Vector3d currentVelocity; Current velocity vector read from topic. Updated on 2022-11-24 at 19:19:32 +0000","title":"variable currentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/","text":"gazebo::HMBox Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject Public Functions Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. Protected Functions Name HMBox (sdf::ElementPtr _sdf, physics::LinkPtr _link) Constructor. Protected Attributes Name const std::string IDENTIFIER Unique identifier for this geometry. double Cd Drag coefficient. double length Length of the box. double width Width of the box. double height Height of the box. Additional inherited members Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function create static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print Protected Functions Documentation function HMBox HMBox( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Constructor. Protected Attributes Documentation variable IDENTIFIER static const std::string IDENTIFIER = \"box\"; Unique identifier for this geometry. variable Cd double Cd; Drag coefficient. variable length double length; Length of the box. variable width double width; Width of the box. variable height double height; Height of the box. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo::HMBox"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#gazebohmbox","text":"Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject","title":"gazebo::HMBox"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#public-functions","text":"Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#protected-functions","text":"Name HMBox (sdf::ElementPtr _sdf, physics::LinkPtr _link) Constructor.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#protected-attributes","text":"Name const std::string IDENTIFIER Unique identifier for this geometry. double Cd Drag coefficient. double length Length of the box. double width Width of the box. double height Height of the box.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#additional-inherited-members","text":"Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#function-create","text":"static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#function-hmbox","text":"HMBox( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Constructor.","title":"function HMBox"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#variable-identifier","text":"static const std::string IDENTIFIER = \"box\"; Unique identifier for this geometry.","title":"variable IDENTIFIER"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#variable-cd","text":"double Cd; Drag coefficient.","title":"variable Cd"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#variable-length","text":"double length; Length of the box.","title":"variable length"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#variable-width","text":"double width; Width of the box.","title":"variable width"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMBox/#variable-height","text":"double height; Height of the box. Updated on 2022-11-24 at 19:19:32 +0000","title":"variable height"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/","text":"gazebo::HMCylinder Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject Public Functions Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. Protected Functions Name HMCylinder (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected Attributes Name const std::string IDENTIFIER Unique identifier for this geometry. double length Length of the cylinder. double radius Sphere radius. std::string axis Name of the unit rotation axis (just a tag for x, y or z) double dimRatio Ratio between length and diameter. double cdCirc Approximated drag coefficient for the circular area. double cdLength Approximated drag coefficient for the rectangular section. Additional inherited members Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function create static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print Protected Functions Documentation function HMCylinder HMCylinder( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Protected Attributes Documentation variable IDENTIFIER static const std::string IDENTIFIER = \"cylinder\"; Unique identifier for this geometry. variable length double length; Length of the cylinder. variable radius double radius; Sphere radius. variable axis std::string axis; Name of the unit rotation axis (just a tag for x, y or z) variable dimRatio double dimRatio; Ratio between length and diameter. variable cdCirc double cdCirc; Approximated drag coefficient for the circular area. variable cdLength double cdLength; Approximated drag coefficient for the rectangular section. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::HMCylinder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#gazebohmcylinder","text":"Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject","title":"gazebo::HMCylinder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#public-functions","text":"Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#protected-functions","text":"Name HMCylinder (sdf::ElementPtr _sdf, physics::LinkPtr _link)","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#protected-attributes","text":"Name const std::string IDENTIFIER Unique identifier for this geometry. double length Length of the cylinder. double radius Sphere radius. std::string axis Name of the unit rotation axis (just a tag for x, y or z) double dimRatio Ratio between length and diameter. double cdCirc Approximated drag coefficient for the circular area. double cdLength Approximated drag coefficient for the rectangular section.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#additional-inherited-members","text":"Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#function-create","text":"static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#function-hmcylinder","text":"HMCylinder( sdf::ElementPtr _sdf, physics::LinkPtr _link )","title":"function HMCylinder"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-identifier","text":"static const std::string IDENTIFIER = \"cylinder\"; Unique identifier for this geometry.","title":"variable IDENTIFIER"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-length","text":"double length; Length of the cylinder.","title":"variable length"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-radius","text":"double radius; Sphere radius.","title":"variable radius"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-axis","text":"std::string axis; Name of the unit rotation axis (just a tag for x, y or z)","title":"variable axis"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-dimratio","text":"double dimRatio; Ratio between length and diameter.","title":"variable dimRatio"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-cdcirc","text":"double cdCirc; Approximated drag coefficient for the circular area.","title":"variable cdCirc"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMCylinder/#variable-cdlength","text":"double cdLength; Approximated drag coefficient for the rectangular section. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable cdLength"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/","text":"title: gazebo::HMFossen summary: Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: gazebo::HMFossen Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: More... #include <HydrodynamicModel.hh> Inherits from gazebo::HydrodynamicModel , gazebo::BuoyantObject Inherited by gazebo::HMBox , gazebo::HMCylinder , gazebo::HMSphere , gazebo::HMSpheroid Public Functions Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions Name REGISTER_HYDRODYNAMICMODEL ( HMFossen ) Register this model with the factory. HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes Name const std::string IDENTIFIER Unique identifier for this geometry. Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Additional inherited members Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Detailed Description class gazebo::HMFossen; Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: Fossen, Thor, \"Handbook of Marine Craft and Hydrodynamics and Motion Control\", 2011 Public Functions Documentation function create static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HydrodynamicModel::GetType Reimplemented by : gazebo::HMSphere::GetType , gazebo::HMCylinder::GetType , gazebo::HMSpheroid::GetType , gazebo::HMBox::GetType function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HydrodynamicModel::Print Reimplemented by : gazebo::HMSphere::Print , gazebo::HMCylinder::Print , gazebo::HMSpheroid::Print , gazebo::HMBox::Print function GetParam virtual bool GetParam( std::string _tag, std::vector< double > & _output ) Return paramater in vector form for the given tag. Reimplements : gazebo::HydrodynamicModel::GetParam function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::HydrodynamicModel::GetParam function SetParam virtual bool SetParam( std::string _tag, double _input ) Set scalar parameter. Reimplements : gazebo::HydrodynamicModel::SetParam function ApplyHydrodynamicForces virtual void ApplyHydrodynamicForces( double time, const ignition::math::Vector3d & _flowVelWorld ) Computation of the hydrodynamic forces. Reimplements : gazebo::HydrodynamicModel::ApplyHydrodynamicForces Protected Functions Documentation function REGISTER_HYDRODYNAMICMODEL REGISTER_HYDRODYNAMICMODEL( HMFossen ) Register this model with the factory. function HMFossen HMFossen( sdf::ElementPtr _sdf, physics::LinkPtr _link ) function ComputeAddedCoriolisMatrix void ComputeAddedCoriolisMatrix( const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca ) const Computes the added-mass Coriolis matrix Ca. function ComputeDampingMatrix void ComputeDampingMatrix( const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D ) const Updates the damping matrix for the current velocity. function GetAddedMass Eigen::Matrix6d GetAddedMass() const Returns the added-mass matrix with the scaling and offset. Protected Attributes Documentation variable IDENTIFIER static const std::string IDENTIFIER = \"fossen\"; Unique identifier for this geometry. variable Ma Eigen::Matrix6d Ma; Added-mass matrix. variable scalingAddedMass double scalingAddedMass; Scaling of the added-mass matrix. variable offsetAddedMass double offsetAddedMass; Offset for the added-mass matrix. variable Ca Eigen::Matrix6d Ca; Added-mass associated Coriolis matrix. variable D Eigen::Matrix6d D; Damping matrix. variable scalingDamping double scalingDamping; Scaling of the damping matrix. variable offsetLinearDamping double offsetLinearDamping; Offset for the linear damping matrix. variable offsetLinForwardSpeedDamping double offsetLinForwardSpeedDamping; Offset for the linear damping matrix. variable offsetNonLinDamping double offsetNonLinDamping; Offset for the linear damping matrix. variable DLin Eigen::Matrix6d DLin; Linear damping matrix. variable DLinForwardSpeed Eigen::Matrix6d DLinForwardSpeed; Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. References: [1] Refsnes - 2007 - Nonlinear model-based control of slender body AUVs variable DNonLin Eigen::Matrix6d DNonLin; Nonlinear damping coefficients. variable linearDampCoef std::vector< double > linearDampCoef; Linear damping coefficients. variable quadDampCoef std::vector< double > quadDampCoef; Quadratic damping coefficients. Updated on 2022-11-24 at 19:19:33 +0000","title":"classgazebo 1 1HMFossen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#gazebohmfossen","text":"Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: More... #include <HydrodynamicModel.hh> Inherits from gazebo::HydrodynamicModel , gazebo::BuoyantObject Inherited by gazebo::HMBox , gazebo::HMCylinder , gazebo::HMSphere , gazebo::HMSpheroid","title":"gazebo::HMFossen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#public-functions","text":"Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#protected-functions","text":"Name REGISTER_HYDRODYNAMICMODEL ( HMFossen ) Register this model with the factory. HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#protected-attributes","text":"Name const std::string IDENTIFIER Unique identifier for this geometry. Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#additional-inherited-members","text":"Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#detailed-description","text":"class gazebo::HMFossen; Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: Fossen, Thor, \"Handbook of Marine Craft and Hydrodynamics and Motion Control\", 2011","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-create","text":"static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HydrodynamicModel::GetType Reimplemented by : gazebo::HMSphere::GetType , gazebo::HMCylinder::GetType , gazebo::HMSpheroid::GetType , gazebo::HMBox::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HydrodynamicModel::Print Reimplemented by : gazebo::HMSphere::Print , gazebo::HMCylinder::Print , gazebo::HMSpheroid::Print , gazebo::HMBox::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-getparam","text":"virtual bool GetParam( std::string _tag, std::vector< double > & _output ) Return paramater in vector form for the given tag. Reimplements : gazebo::HydrodynamicModel::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-getparam_1","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::HydrodynamicModel::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-setparam","text":"virtual bool SetParam( std::string _tag, double _input ) Set scalar parameter. Reimplements : gazebo::HydrodynamicModel::SetParam","title":"function SetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-applyhydrodynamicforces","text":"virtual void ApplyHydrodynamicForces( double time, const ignition::math::Vector3d & _flowVelWorld ) Computation of the hydrodynamic forces. Reimplements : gazebo::HydrodynamicModel::ApplyHydrodynamicForces","title":"function ApplyHydrodynamicForces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-register_hydrodynamicmodel","text":"REGISTER_HYDRODYNAMICMODEL( HMFossen ) Register this model with the factory.","title":"function REGISTER_HYDRODYNAMICMODEL"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-hmfossen","text":"HMFossen( sdf::ElementPtr _sdf, physics::LinkPtr _link )","title":"function HMFossen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-computeaddedcoriolismatrix","text":"void ComputeAddedCoriolisMatrix( const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca ) const Computes the added-mass Coriolis matrix Ca.","title":"function ComputeAddedCoriolisMatrix"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-computedampingmatrix","text":"void ComputeDampingMatrix( const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D ) const Updates the damping matrix for the current velocity.","title":"function ComputeDampingMatrix"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#function-getaddedmass","text":"Eigen::Matrix6d GetAddedMass() const Returns the added-mass matrix with the scaling and offset.","title":"function GetAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-identifier","text":"static const std::string IDENTIFIER = \"fossen\"; Unique identifier for this geometry.","title":"variable IDENTIFIER"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-ma","text":"Eigen::Matrix6d Ma; Added-mass matrix.","title":"variable Ma"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-scalingaddedmass","text":"double scalingAddedMass; Scaling of the added-mass matrix.","title":"variable scalingAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-offsetaddedmass","text":"double offsetAddedMass; Offset for the added-mass matrix.","title":"variable offsetAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-ca","text":"Eigen::Matrix6d Ca; Added-mass associated Coriolis matrix.","title":"variable Ca"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-d","text":"Eigen::Matrix6d D; Damping matrix.","title":"variable D"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-scalingdamping","text":"double scalingDamping; Scaling of the damping matrix.","title":"variable scalingDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-offsetlineardamping","text":"double offsetLinearDamping; Offset for the linear damping matrix.","title":"variable offsetLinearDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-offsetlinforwardspeeddamping","text":"double offsetLinForwardSpeedDamping; Offset for the linear damping matrix.","title":"variable offsetLinForwardSpeedDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-offsetnonlindamping","text":"double offsetNonLinDamping; Offset for the linear damping matrix.","title":"variable offsetNonLinDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-dlin","text":"Eigen::Matrix6d DLin; Linear damping matrix.","title":"variable DLin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-dlinforwardspeed","text":"Eigen::Matrix6d DLinForwardSpeed; Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. References: [1] Refsnes - 2007 - Nonlinear model-based control of slender body AUVs","title":"variable DLinForwardSpeed"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-dnonlin","text":"Eigen::Matrix6d DNonLin; Nonlinear damping coefficients.","title":"variable DNonLin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-lineardampcoef","text":"std::vector< double > linearDampCoef; Linear damping coefficients.","title":"variable linearDampCoef"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMFossen/#variable-quaddampcoef","text":"std::vector< double > quadDampCoef; Quadratic damping coefficients. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable quadDampCoef"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/","text":"gazebo::HMSphere Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject Public Functions Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. Protected Functions Name REGISTER_HYDRODYNAMICMODEL ( HMSphere ) Register this model with the factory. HMSphere (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected Attributes Name const std::string IDENTIFIER Unique identifier for this geometry. double radius Sphere radius. double Cd Drag coefficient. double areaSection Area of the cross section. Additional inherited members Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function create static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print Protected Functions Documentation function REGISTER_HYDRODYNAMICMODEL REGISTER_HYDRODYNAMICMODEL( HMSphere ) Register this model with the factory. function HMSphere HMSphere( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Protected Attributes Documentation variable IDENTIFIER static const std::string IDENTIFIER = \"sphere\"; Unique identifier for this geometry. variable radius double radius; Sphere radius. variable Cd double Cd; Drag coefficient. variable areaSection double areaSection; Area of the cross section. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::HMSphere"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#gazebohmsphere","text":"Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject","title":"gazebo::HMSphere"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#public-functions","text":"Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#protected-functions","text":"Name REGISTER_HYDRODYNAMICMODEL ( HMSphere ) Register this model with the factory. HMSphere (sdf::ElementPtr _sdf, physics::LinkPtr _link)","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#protected-attributes","text":"Name const std::string IDENTIFIER Unique identifier for this geometry. double radius Sphere radius. double Cd Drag coefficient. double areaSection Area of the cross section.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#additional-inherited-members","text":"Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#function-create","text":"static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#function-register_hydrodynamicmodel","text":"REGISTER_HYDRODYNAMICMODEL( HMSphere ) Register this model with the factory.","title":"function REGISTER_HYDRODYNAMICMODEL"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#function-hmsphere","text":"HMSphere( sdf::ElementPtr _sdf, physics::LinkPtr _link )","title":"function HMSphere"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#variable-identifier","text":"static const std::string IDENTIFIER = \"sphere\"; Unique identifier for this geometry.","title":"variable IDENTIFIER"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#variable-radius","text":"double radius; Sphere radius.","title":"variable radius"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#variable-cd","text":"double Cd; Drag coefficient.","title":"variable Cd"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSphere/#variable-areasection","text":"double areaSection; Area of the cross section. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable areaSection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/","text":"title: gazebo::HMSpheroid summary: Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. gazebo::HMSpheroid Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject Public Functions Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters. Protected Functions Name HMSpheroid (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected Attributes Name const std::string IDENTIFIER Unique identifier for this geometry. double length Length of the sphroid. double radius Prolate spheroid's smaller radius. Additional inherited members Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function create static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print Protected Functions Documentation function HMSpheroid HMSpheroid( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Protected Attributes Documentation variable IDENTIFIER static const std::string IDENTIFIER = \"spheroid\"; Unique identifier for this geometry. variable length double length; Length of the sphroid. variable radius double radius; Prolate spheroid's smaller radius. Updated on 2022-11-24 at 19:19:33 +0000","title":"classgazebo 1 1HMSpheroid"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#gazebohmspheroid","text":"Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. #include <HydrodynamicModel.hh> Inherits from gazebo::HMFossen , gazebo::HydrodynamicModel , gazebo::BuoyantObject","title":"gazebo::HMSpheroid"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#public-functions","text":"Name HydrodynamicModel * create (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of hydrodynamic model. virtual void Print (std::string _paramName, std::string _message =std::string()) Prints parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#protected-functions","text":"Name HMSpheroid (sdf::ElementPtr _sdf, physics::LinkPtr _link)","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#protected-attributes","text":"Name const std::string IDENTIFIER Unique identifier for this geometry. double length Length of the sphroid. double radius Prolate spheroid's smaller radius.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#additional-inherited-members","text":"Public Functions inherited from gazebo::HMFossen Name virtual bool GetParam (std::string _tag, std::vector< double > & _output) Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual bool SetParam (std::string _tag, double _input) Set scalar parameter. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. Protected Functions inherited from gazebo::HMFossen Name HMFossen (sdf::ElementPtr _sdf, physics::LinkPtr _link) void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel, const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Protected Attributes inherited from gazebo::HMFossen Name Eigen::Matrix6d Ma Added-mass matrix. double scalingAddedMass Scaling of the added-mass matrix. double offsetAddedMass Offset for the added-mass matrix. Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. Eigen::Matrix6d D Damping matrix. double scalingDamping Scaling of the damping matrix. double offsetLinearDamping Offset for the linear damping matrix. double offsetLinForwardSpeedDamping Offset for the linear damping matrix. double offsetNonLinDamping Offset for the linear damping matrix. Eigen::Matrix6d DLin Linear damping matrix. Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. Eigen::Matrix6d DNonLin Nonlinear damping coefficients. std::vector< double > linearDampCoef Linear damping coefficients. std::vector< double > quadDampCoef Quadratic damping coefficients. Public Functions inherited from gazebo::HydrodynamicModel Name virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions inherited from gazebo::HydrodynamicModel Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes inherited from gazebo::HydrodynamicModel Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#function-create","text":"static HydrodynamicModel * create( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of hydrodynamic model. Reimplements : gazebo::HMFossen::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) Prints parameters. Reimplements : gazebo::HMFossen::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#function-hmspheroid","text":"HMSpheroid( sdf::ElementPtr _sdf, physics::LinkPtr _link )","title":"function HMSpheroid"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#variable-identifier","text":"static const std::string IDENTIFIER = \"spheroid\"; Unique identifier for this geometry.","title":"variable IDENTIFIER"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#variable-length","text":"double length; Length of the sphroid.","title":"variable length"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HMSpheroid/#variable-radius","text":"double radius; Prolate spheroid's smaller radius. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable radius"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/","text":"gazebo::HydrodynamicModel Inherits from gazebo::BuoyantObject Inherited by gazebo::HMFossen Public Functions Name virtual std::string GetType () =0 Returns type of model. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual void Print (std::string _paramName, std::string _message =std::string()) =0 Prints parameters. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters. Protected Functions Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Protected Attributes Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models) Additional inherited members Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. Public Functions Documentation function GetType virtual std::string GetType() =0 Returns type of model. Reimplemented by : gazebo::HMFossen::GetType , gazebo::HMSphere::GetType , gazebo::HMCylinder::GetType , gazebo::HMSpheroid::GetType , gazebo::HMBox::GetType function ApplyHydrodynamicForces virtual void ApplyHydrodynamicForces( double time, const ignition::math::Vector3d & _flowVelWorld ) =0 Computation of the hydrodynamic forces. Reimplemented by : gazebo::HMFossen::ApplyHydrodynamicForces function Print virtual void Print( std::string _paramName, std::string _message =std::string() ) =0 Prints parameters. Reimplemented by : gazebo::HMFossen::Print , gazebo::HMSphere::Print , gazebo::HMCylinder::Print , gazebo::HMSpheroid::Print , gazebo::HMBox::Print function GetParam virtual bool GetParam( std::string _tag, std::vector< double > & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::HMFossen::GetParam function GetParam virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::HMFossen::GetParam function SetParam virtual bool SetParam( std::string _tag, double _input ) =0 Set a scalar parameters. Reimplemented by : gazebo::HMFossen::SetParam Protected Functions Documentation function HydrodynamicModel HydrodynamicModel( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Protected constructor: Use the factory for object creation. function ComputeAcc void ComputeAcc( Eigen::Vector6d _velRel, double _time, double _alpha =0.3 ) Filter acceleration (fix due to the update structure of Gazebo) function CheckParams bool CheckParams( sdf::ElementPtr _sdf ) Returns true if all parameters are available from the SDF element. function ToNED ignition::math::Vector3d ToNED( ignition::math::Vector3d _vec ) Convert vector to comply with the NED reference frame. function FromNED ignition::math::Vector3d FromNED( ignition::math::Vector3d _vec ) Convert vector to comply with the NED reference frame. Protected Attributes Documentation variable filteredAcc Eigen::Vector6d filteredAcc; Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. variable lastTime double lastTime; Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. variable lastVelRel Eigen::Vector6d lastVelRel; Last body-fixed relative velocity (nu_R in Fossen's equations) variable params std::vector< std::string > params; List of parameters needed from the SDF element. variable Re double Re; Reynolds number (not used by all models) variable temperature double temperature; Temperature (not used by all models) Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::HydrodynamicModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#gazebohydrodynamicmodel","text":"Inherits from gazebo::BuoyantObject Inherited by gazebo::HMFossen","title":"gazebo::HydrodynamicModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#public-functions","text":"Name virtual std::string GetType () =0 Returns type of model. virtual void ApplyHydrodynamicForces (double time, const ignition::math::Vector3d & _flowVelWorld) =0 Computation of the hydrodynamic forces. virtual void Print (std::string _paramName, std::string _message =std::string()) =0 Prints parameters. virtual bool GetParam (std::string _tag, std::vector< double > & _output) =0 Return paramater in vector form for the given tag. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual bool SetParam (std::string _tag, double _input) =0 Set a scalar parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#protected-functions","text":"Name HydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Protected constructor: Use the factory for object creation. void ComputeAcc ( Eigen::Vector6d _velRel, double _time, double _alpha =0.3) Filter acceleration (fix due to the update structure of Gazebo) bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#protected-attributes","text":"Name Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) std::vector< std::string > params List of parameters needed from the SDF element. double Re Reynolds number (not used by all models) double temperature Temperature (not used by all models)","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#additional-inherited-members","text":"Public Functions inherited from gazebo::BuoyantObject Name BuoyantObject (physics::LinkPtr _link) Constructor. ~BuoyantObject () Destructor. void GetBuoyancyForce (const ignition::math::Pose3d & _pose, ignition::math::Vector3d & buoyancyForce, ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. void ApplyBuoyancyForce () Applies buoyancy force on link. void SetVolume (double _volume =-1) Sets the link's submerged volume. double GetVolume () Returns the stored link submerged volume. void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. double GetFluidDensity () Returns the stored fluid density. void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. void SetGravity (double _g) Set acceleration of gravity. double GetGravity () Get stored acceleration of gravity. void SetBoundingBox (const AxisAlignedBox & _bBox) Sets bounding box. void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. void SetDebugFlag (bool _debugOn =true) Set debug flag to store intermediate forces and torques. bool IsSubmerged () Returns true if the robot is completely submerged. bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. bool GetDebugFlag () Returns the debug flag. void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. Protected Functions inherited from gazebo::BuoyantObject Name void StoreVector (std::string _tag, ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Protected Attributes inherited from gazebo::BuoyantObject Name double volume Volume of fluid displaced by the submerged object. double scalingVolume Scaling factor for the volume. double offsetVolume Offset for the volume. double fluidDensity Fluid density. double g Acceleration of gravity. ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. AxisAlignedBox boundingBox TEMP for calculation of the buoyancy force close to the surface. std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. bool debugFlag Debug flag, storing all intermediate forces and torques. bool isSubmerged Is submerged flag. physics::LinkPtr link Pointer to the correspondent robot link. bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. double metacentricWidth double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. double submergedHeight Height of the robot that is submerged (only for surface vessels) bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-gettype","text":"virtual std::string GetType() =0 Returns type of model. Reimplemented by : gazebo::HMFossen::GetType , gazebo::HMSphere::GetType , gazebo::HMCylinder::GetType , gazebo::HMSpheroid::GetType , gazebo::HMBox::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-applyhydrodynamicforces","text":"virtual void ApplyHydrodynamicForces( double time, const ignition::math::Vector3d & _flowVelWorld ) =0 Computation of the hydrodynamic forces. Reimplemented by : gazebo::HMFossen::ApplyHydrodynamicForces","title":"function ApplyHydrodynamicForces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-print","text":"virtual void Print( std::string _paramName, std::string _message =std::string() ) =0 Prints parameters. Reimplemented by : gazebo::HMFossen::Print , gazebo::HMSphere::Print , gazebo::HMCylinder::Print , gazebo::HMSpheroid::Print , gazebo::HMBox::Print","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-getparam","text":"virtual bool GetParam( std::string _tag, std::vector< double > & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::HMFossen::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-getparam_1","text":"virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::HMFossen::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-setparam","text":"virtual bool SetParam( std::string _tag, double _input ) =0 Set a scalar parameters. Reimplemented by : gazebo::HMFossen::SetParam","title":"function SetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-hydrodynamicmodel","text":"HydrodynamicModel( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Protected constructor: Use the factory for object creation.","title":"function HydrodynamicModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-computeacc","text":"void ComputeAcc( Eigen::Vector6d _velRel, double _time, double _alpha =0.3 ) Filter acceleration (fix due to the update structure of Gazebo)","title":"function ComputeAcc"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-checkparams","text":"bool CheckParams( sdf::ElementPtr _sdf ) Returns true if all parameters are available from the SDF element.","title":"function CheckParams"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-toned","text":"ignition::math::Vector3d ToNED( ignition::math::Vector3d _vec ) Convert vector to comply with the NED reference frame.","title":"function ToNED"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#function-fromned","text":"ignition::math::Vector3d FromNED( ignition::math::Vector3d _vec ) Convert vector to comply with the NED reference frame.","title":"function FromNED"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-filteredacc","text":"Eigen::Vector6d filteredAcc; Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine.","title":"variable filteredAcc"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-lasttime","text":"double lastTime; Last timestamp (in seconds) at which ApplyHydrodynamicForces was called.","title":"variable lastTime"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-lastvelrel","text":"Eigen::Vector6d lastVelRel; Last body-fixed relative velocity (nu_R in Fossen's equations)","title":"variable lastVelRel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-params","text":"std::vector< std::string > params; List of parameters needed from the SDF element.","title":"variable params"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-re","text":"double Re; Reynolds number (not used by all models)","title":"variable Re"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModel/#variable-temperature","text":"double temperature; Temperature (not used by all models) Updated on 2022-11-24 at 19:19:33 +0000","title":"variable temperature"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/","text":"gazebo::HydrodynamicModelFactory Factory singleton class that creates a HydrodynamicModel from sdf. #include <HydrodynamicModel.hh> Public Functions Name HydrodynamicModel * CreateHydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create HydrodynamicModel object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, HydrodynamicModelCreator _creator) Register a class with its creator. HydrodynamicModelFactory & GetInstance () Returns the singleton instance of this factory. Public Functions Documentation function CreateHydrodynamicModel HydrodynamicModel * CreateHydrodynamicModel( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create HydrodynamicModel object according to its sdf Description. function RegisterCreator bool RegisterCreator( const std::string & _identifier, HydrodynamicModelCreator _creator ) Register a class with its creator. function GetInstance static HydrodynamicModelFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::HydrodynamicModelFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#gazebohydrodynamicmodelfactory","text":"Factory singleton class that creates a HydrodynamicModel from sdf. #include <HydrodynamicModel.hh>","title":"gazebo::HydrodynamicModelFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#public-functions","text":"Name HydrodynamicModel * CreateHydrodynamicModel (sdf::ElementPtr _sdf, physics::LinkPtr _link) Create HydrodynamicModel object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, HydrodynamicModelCreator _creator) Register a class with its creator. HydrodynamicModelFactory & GetInstance () Returns the singleton instance of this factory.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#function-createhydrodynamicmodel","text":"HydrodynamicModel * CreateHydrodynamicModel( sdf::ElementPtr _sdf, physics::LinkPtr _link ) Create HydrodynamicModel object according to its sdf Description.","title":"function CreateHydrodynamicModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#function-registercreator","text":"bool RegisterCreator( const std::string & _identifier, HydrodynamicModelCreator _creator ) Register a class with its creator.","title":"function RegisterCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1HydrodynamicModelFactory/#function-getinstance","text":"static HydrodynamicModelFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"function GetInstance"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/","text":"gazebo::LiftDrag Abstract base class for Lift&Drag models. #include <LiftDragModel.hh> Inherited by gazebo::LiftDragQuadratic , gazebo::LiftDragTwoLines Public Functions Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. virtual std::string GetType () =0 Return (derived) type of lift&drag model. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) =0 Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual std::map< std::string, double > GetListParams () =0 Return list of all parameters. Protected Functions Name LiftDrag () Protected constructor: Use the factory for object creation. Protected Attributes Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function CheckForElement static bool CheckForElement( sdf::ElementPtr _sdf, const std::string & element ) Check for element. Complain and return 0 if it is missing. function ~LiftDrag inline virtual ~LiftDrag() Destructor. function GetType virtual std::string GetType() =0 Return (derived) type of lift&drag model. Reimplemented by : gazebo::LiftDragQuadratic::GetType , gazebo::LiftDragTwoLines::GetType function compute virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & _velL ) =0 Compute the lift and drag force. Reimplemented by : gazebo::LiftDragTwoLines::compute , gazebo::LiftDragQuadratic::compute function GetParam virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::LiftDragQuadratic::GetParam , gazebo::LiftDragTwoLines::GetParam function GetListParams virtual std::map< std::string, double > GetListParams() =0 Return list of all parameters. Reimplemented by : gazebo::LiftDragQuadratic::GetListParams , gazebo::LiftDragTwoLines::GetListParams Protected Functions Documentation function LiftDrag inline LiftDrag() Protected constructor: Use the factory for object creation. Protected Attributes Documentation variable prevTime double prevTime; Time of last state update. variable state double state; Latest state. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::LiftDrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#gazeboliftdrag","text":"Abstract base class for Lift&Drag models. #include <LiftDragModel.hh> Inherited by gazebo::LiftDragQuadratic , gazebo::LiftDragTwoLines","title":"gazebo::LiftDrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#public-functions","text":"Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. virtual std::string GetType () =0 Return (derived) type of lift&drag model. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) =0 Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) =0 Return paramater in vector form for the given tag. virtual std::map< std::string, double > GetListParams () =0 Return list of all parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#protected-functions","text":"Name LiftDrag () Protected constructor: Use the factory for object creation.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#protected-attributes","text":"Name double prevTime Time of last state update. double state Latest state.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-checkforelement","text":"static bool CheckForElement( sdf::ElementPtr _sdf, const std::string & element ) Check for element. Complain and return 0 if it is missing.","title":"function CheckForElement"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-liftdrag","text":"inline virtual ~LiftDrag() Destructor.","title":"function ~LiftDrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-gettype","text":"virtual std::string GetType() =0 Return (derived) type of lift&drag model. Reimplemented by : gazebo::LiftDragQuadratic::GetType , gazebo::LiftDragTwoLines::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-compute","text":"virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & _velL ) =0 Compute the lift and drag force. Reimplemented by : gazebo::LiftDragTwoLines::compute , gazebo::LiftDragQuadratic::compute","title":"function compute"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) =0 Return paramater in vector form for the given tag. Reimplemented by : gazebo::LiftDragQuadratic::GetParam , gazebo::LiftDragTwoLines::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-getlistparams","text":"virtual std::map< std::string, double > GetListParams() =0 Return list of all parameters. Reimplemented by : gazebo::LiftDragQuadratic::GetListParams , gazebo::LiftDragTwoLines::GetListParams","title":"function GetListParams"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#function-liftdrag_1","text":"inline LiftDrag() Protected constructor: Use the factory for object creation.","title":"function LiftDrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#variable-prevtime","text":"double prevTime; Time of last state update.","title":"variable prevTime"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDrag/#variable-state","text":"double state; Latest state. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable state"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/","text":"gazebo::LiftDragFactory Factory singleton class that creates a LiftDrag from sdf. #include <LiftDragModel.hh> Public Functions Name LiftDrag * CreateLiftDrag (sdf::ElementPtr _sdf) Create LiftDrag object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, LiftDragCreator _creator) Register a LiftDrag class with its creator. LiftDragFactory & GetInstance () Returns the singleton instance of this factory. Public Functions Documentation function CreateLiftDrag LiftDrag * CreateLiftDrag( sdf::ElementPtr _sdf ) Create LiftDrag object according to its sdf Description. function RegisterCreator bool RegisterCreator( const std::string & _identifier, LiftDragCreator _creator ) Register a LiftDrag class with its creator. function GetInstance static LiftDragFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::LiftDragFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#gazeboliftdragfactory","text":"Factory singleton class that creates a LiftDrag from sdf. #include <LiftDragModel.hh>","title":"gazebo::LiftDragFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#public-functions","text":"Name LiftDrag * CreateLiftDrag (sdf::ElementPtr _sdf) Create LiftDrag object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, LiftDragCreator _creator) Register a LiftDrag class with its creator. LiftDragFactory & GetInstance () Returns the singleton instance of this factory.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#function-createliftdrag","text":"LiftDrag * CreateLiftDrag( sdf::ElementPtr _sdf ) Create LiftDrag object according to its sdf Description.","title":"function CreateLiftDrag"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#function-registercreator","text":"bool RegisterCreator( const std::string & _identifier, LiftDragCreator _creator ) Register a LiftDrag class with its creator.","title":"function RegisterCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragFactory/#function-getinstance","text":"static LiftDragFactory & GetInstance() Returns the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"function GetInstance"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/","text":"gazebo::LiftDragQuadratic Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). #include <LiftDragModel.hh> Inherits from gazebo::LiftDrag Public Functions Name LiftDrag * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & velL) Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< std::string, double > GetListParams () Return list of all parameters. Protected Attributes Name double liftConstant Lift constant. double dragConstant Drag constant. Additional inherited members Public Functions inherited from gazebo::LiftDrag Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. Protected Functions inherited from gazebo::LiftDrag Name LiftDrag () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::LiftDrag Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function create static LiftDrag * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::LiftDrag::GetType function compute virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & velL ) Compute the lift and drag force. Reimplements : gazebo::LiftDrag::compute function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::LiftDrag::GetParam function GetListParams virtual std::map< std::string, double > GetListParams() Return list of all parameters. Reimplements : gazebo::LiftDrag::GetListParams Protected Attributes Documentation variable liftConstant double liftConstant; Lift constant. variable dragConstant double dragConstant; Drag constant. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::LiftDragQuadratic"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#gazeboliftdragquadratic","text":"Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). #include <LiftDragModel.hh> Inherits from gazebo::LiftDrag","title":"gazebo::LiftDragQuadratic"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#public-functions","text":"Name LiftDrag * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & velL) Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< std::string, double > GetListParams () Return list of all parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#protected-attributes","text":"Name double liftConstant Lift constant. double dragConstant Drag constant.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#additional-inherited-members","text":"Public Functions inherited from gazebo::LiftDrag Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. Protected Functions inherited from gazebo::LiftDrag Name LiftDrag () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::LiftDrag Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#function-create","text":"static LiftDrag * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::LiftDrag::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#function-compute","text":"virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & velL ) Compute the lift and drag force. Reimplements : gazebo::LiftDrag::compute","title":"function compute"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::LiftDrag::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#function-getlistparams","text":"virtual std::map< std::string, double > GetListParams() Return list of all parameters. Reimplements : gazebo::LiftDrag::GetListParams","title":"function GetListParams"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#variable-liftconstant","text":"double liftConstant; Lift constant.","title":"variable liftConstant"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragQuadratic/#variable-dragconstant","text":"double dragConstant; Drag constant. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable dragConstant"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/","text":"gazebo::LiftDragTwoLines Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. #include <LiftDragModel.hh> Inherits from gazebo::LiftDrag Public Functions Name LiftDrag * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< std::string, double > GetListParams () Return list of all parameters. Protected Attributes Name double area Airfoil area. double fluidDensity Fluid density. double a0 Original zero angle of attack location. double alphaStall Stall angle. double cla Lift coefficient without stall. double claStall Lift coefficient with stall. double cda Drag coefficient without stall. double cdaStall Drag coefficient with stall. Additional inherited members Public Functions inherited from gazebo::LiftDrag Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. Protected Functions inherited from gazebo::LiftDrag Name LiftDrag () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::LiftDrag Name double prevTime Time of last state update. double state Latest state. Public Functions Documentation function create static LiftDrag * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::LiftDrag::GetType function compute virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & _velL ) Compute the lift and drag force. Reimplements : gazebo::LiftDrag::compute function GetParam virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::LiftDrag::GetParam function GetListParams virtual std::map< std::string, double > GetListParams() Return list of all parameters. Reimplements : gazebo::LiftDrag::GetListParams Protected Attributes Documentation variable area double area; Airfoil area. variable fluidDensity double fluidDensity; Fluid density. variable a0 double a0; Original zero angle of attack location. variable alphaStall double alphaStall; Stall angle. variable cla double cla; Lift coefficient without stall. variable claStall double claStall; Lift coefficient with stall. variable cda double cda; Drag coefficient without stall. variable cdaStall double cdaStall; Drag coefficient with stall. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::LiftDragTwoLines"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#gazeboliftdragtwolines","text":"Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. #include <LiftDragModel.hh> Inherits from gazebo::LiftDrag","title":"gazebo::LiftDragTwoLines"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#public-functions","text":"Name LiftDrag * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. virtual bool GetParam (std::string _tag, double & _output) Return paramater in scalar form for the given tag. virtual std::map< std::string, double > GetListParams () Return list of all parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#protected-attributes","text":"Name double area Airfoil area. double fluidDensity Fluid density. double a0 Original zero angle of attack location. double alphaStall Stall angle. double cla Lift coefficient without stall. double claStall Lift coefficient with stall. double cda Drag coefficient without stall. double cdaStall Drag coefficient with stall.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#additional-inherited-members","text":"Public Functions inherited from gazebo::LiftDrag Name bool CheckForElement (sdf::ElementPtr _sdf, const std::string & element) Check for element. Complain and return 0 if it is missing. virtual ~LiftDrag () Destructor. Protected Functions inherited from gazebo::LiftDrag Name LiftDrag () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::LiftDrag Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#function-create","text":"static LiftDrag * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::LiftDrag::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#function-compute","text":"virtual ignition::math::Vector3d compute( const ignition::math::Vector3d & _velL ) Compute the lift and drag force. Reimplements : gazebo::LiftDrag::compute","title":"function compute"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#function-getparam","text":"virtual bool GetParam( std::string _tag, double & _output ) Return paramater in scalar form for the given tag. Reimplements : gazebo::LiftDrag::GetParam","title":"function GetParam"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#function-getlistparams","text":"virtual std::map< std::string, double > GetListParams() Return list of all parameters. Reimplements : gazebo::LiftDrag::GetListParams","title":"function GetListParams"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-area","text":"double area; Airfoil area.","title":"variable area"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-fluiddensity","text":"double fluidDensity; Fluid density.","title":"variable fluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-a0","text":"double a0; Original zero angle of attack location.","title":"variable a0"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-alphastall","text":"double alphaStall; Stall angle.","title":"variable alphaStall"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-cla","text":"double cla; Lift coefficient without stall.","title":"variable cla"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-clastall","text":"double claStall; Lift coefficient with stall.","title":"variable claStall"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-cda","text":"double cda; Drag coefficient without stall.","title":"variable cda"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1LiftDragTwoLines/#variable-cdastall","text":"double cdaStall; Drag coefficient with stall. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable cdaStall"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/","text":"gazebo::ThrusterDynamicsBessa Bessa's dynamic thruster model. More... #include <Dynamics.hh> Inherits from gazebo::Dynamics Public Functions Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time. Additional inherited members Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state. Detailed Description class gazebo::ThrusterDynamicsBessa; Bessa's dynamic thruster model. This is \"Model 2\" described in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. Public Functions Documentation function create static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType function update virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::ThrusterDynamicsBessa"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#gazebothrusterdynamicsbessa","text":"Bessa's dynamic thruster model. More... #include <Dynamics.hh> Inherits from gazebo::Dynamics","title":"gazebo::ThrusterDynamicsBessa"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#public-functions","text":"Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#additional-inherited-members","text":"Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#detailed-description","text":"class gazebo::ThrusterDynamicsBessa; Bessa's dynamic thruster model. This is \"Model 2\" described in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation.","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#function-create","text":"static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsBessa/#function-update","text":"virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:33 +0000","title":"function update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/","text":"gazebo::ThrusterDynamicsYoerger Yoerger's dynamic thruster model. More... #include <Dynamics.hh> Inherits from gazebo::Dynamics Public Functions Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time. Additional inherited members Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state. Detailed Description class gazebo::ThrusterDynamicsYoerger; Yoerger's dynamic thruster model. This is the lumped-parameter model of Yoerger et al.: The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design. (1990) Public Functions Documentation function create static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf. function GetType inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType function update virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::ThrusterDynamicsYoerger"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#gazebothrusterdynamicsyoerger","text":"Yoerger's dynamic thruster model. More... #include <Dynamics.hh> Inherits from gazebo::Dynamics","title":"gazebo::ThrusterDynamicsYoerger"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#public-functions","text":"Name Dynamics * create (sdf::ElementPtr _sdf) Create thruster model of this type with parameter values from sdf. virtual std::string GetType () Return (derived) type of dynamic system. virtual double update (double _cmd, double _t) Update dynamical model given input value and time.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#additional-inherited-members","text":"Public Functions inherited from gazebo::Dynamics Name virtual ~Dynamics () Destructor. virtual void Reset () Protected Functions inherited from gazebo::Dynamics Name Dynamics () Protected constructor: Use the factory for object creation. Protected Attributes inherited from gazebo::Dynamics Name double prevTime Time of last state update. double state Latest state.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#detailed-description","text":"class gazebo::ThrusterDynamicsYoerger; Yoerger's dynamic thruster model. This is the lumped-parameter model of Yoerger et al.: The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design. (1990)","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#function-create","text":"static Dynamics * create( sdf::ElementPtr _sdf ) Create thruster model of this type with parameter values from sdf.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#function-gettype","text":"inline virtual std::string GetType() Return (derived) type of dynamic system. Reimplements : gazebo::Dynamics::GetType","title":"function GetType"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterDynamicsYoerger/#function-update","text":"virtual double update( double _cmd, double _t ) Update dynamical model given input value and time. Reimplements : gazebo::Dynamics::update Updated on 2022-11-24 at 19:19:33 +0000","title":"function update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/","text":"gazebo::ThrusterPlugin Class for the thruster plugin. #include <ThrusterPlugin.hh> Inherits from ModelPlugin Public Functions Name ThrusterPlugin () Constructor. virtual ~ThrusterPlugin () Destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () virtual void Reset () Custom plugin reset behavior. void Update (const common::UpdateInfo & _info) Update the simulation state. Protected Functions Name void UpdateInput (ConstDoublePtr & _msg) Callback for the input topic subscriber. Protected Attributes Name std::shared_ptr< Dynamics > thrusterDynamics Thruster dynamic model. std::shared_ptr< ConversionFunction > conversionFunction Thruster conversion function. event::ConnectionPtr updateConnection Update event. physics::LinkPtr thrusterLink Pointer to the thruster link. transport::NodePtr node Gazebo node. transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. transport::PublisherPtr thrustTopicPublisher Publisher to the output thrust topic. double inputCommand Input command, typically desired angular velocity of the rotor. double thrustForce Latest thrust force in [N]. common::Time thrustForceStamp Time stamp of latest thrust force. physics::JointPtr joint Optional: The rotor joint, used for visualization. double clampMin : Optional: Commands less than this value will be clamped. double clampMax : Optional: Commands greater than this value will be clamped. double thrustMin : Optional: Minimum thrust force output double thrustMax : Optional: Maximum thrust force output int thrusterID Thruster ID, used to generated topic names automatically. std::string topicPrefix Thruster topics prefix. double gain : Optional: Gain factor: Desired angular velocity = command * gain bool isOn Optional: Flag to indicate if the thruster is turned on or off. double thrustEfficiency Optional: Output thrust efficiency factor of the thruster. double propellerEfficiency Optional: Propeller angular velocity efficiency term. ignition::math::Vector3d thrusterAxis The axis about which the thruster rotates. Public Functions Documentation function ThrusterPlugin ThrusterPlugin() Constructor. function ~ThrusterPlugin virtual ~ThrusterPlugin() Destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) function Init virtual void Init() function Reset virtual void Reset() Custom plugin reset behavior. function Update void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function UpdateInput void UpdateInput( ConstDoublePtr & _msg ) Callback for the input topic subscriber. Protected Attributes Documentation variable thrusterDynamics std::shared_ptr< Dynamics > thrusterDynamics; Thruster dynamic model. variable conversionFunction std::shared_ptr< ConversionFunction > conversionFunction; Thruster conversion function. variable updateConnection event::ConnectionPtr updateConnection; Update event. variable thrusterLink physics::LinkPtr thrusterLink; Pointer to the thruster link. variable node transport::NodePtr node; Gazebo node. variable commandSubscriber transport::SubscriberPtr commandSubscriber; Subscriber to the reference signal topic. variable thrustTopicPublisher transport::PublisherPtr thrustTopicPublisher; Publisher to the output thrust topic. variable inputCommand double inputCommand; Input command, typically desired angular velocity of the rotor. variable thrustForce double thrustForce; Latest thrust force in [N]. variable thrustForceStamp common::Time thrustForceStamp; Time stamp of latest thrust force. variable joint physics::JointPtr joint; Optional: The rotor joint, used for visualization. variable clampMin double clampMin; : Optional: Commands less than this value will be clamped. variable clampMax double clampMax; : Optional: Commands greater than this value will be clamped. variable thrustMin double thrustMin; : Optional: Minimum thrust force output variable thrustMax double thrustMax; : Optional: Maximum thrust force output variable thrusterID int thrusterID; Thruster ID, used to generated topic names automatically. variable topicPrefix std::string topicPrefix; Thruster topics prefix. variable gain double gain; : Optional: Gain factor: Desired angular velocity = command * gain variable isOn bool isOn; Optional: Flag to indicate if the thruster is turned on or off. variable thrustEfficiency double thrustEfficiency; Optional: Output thrust efficiency factor of the thruster. variable propellerEfficiency double propellerEfficiency; Optional: Propeller angular velocity efficiency term. variable thrusterAxis ignition::math::Vector3d thrusterAxis; The axis about which the thruster rotates. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::ThrusterPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#gazebothrusterplugin","text":"Class for the thruster plugin. #include <ThrusterPlugin.hh> Inherits from ModelPlugin","title":"gazebo::ThrusterPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#public-functions","text":"Name ThrusterPlugin () Constructor. virtual ~ThrusterPlugin () Destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () virtual void Reset () Custom plugin reset behavior. void Update (const common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#protected-functions","text":"Name void UpdateInput (ConstDoublePtr & _msg) Callback for the input topic subscriber.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#protected-attributes","text":"Name std::shared_ptr< Dynamics > thrusterDynamics Thruster dynamic model. std::shared_ptr< ConversionFunction > conversionFunction Thruster conversion function. event::ConnectionPtr updateConnection Update event. physics::LinkPtr thrusterLink Pointer to the thruster link. transport::NodePtr node Gazebo node. transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. transport::PublisherPtr thrustTopicPublisher Publisher to the output thrust topic. double inputCommand Input command, typically desired angular velocity of the rotor. double thrustForce Latest thrust force in [N]. common::Time thrustForceStamp Time stamp of latest thrust force. physics::JointPtr joint Optional: The rotor joint, used for visualization. double clampMin : Optional: Commands less than this value will be clamped. double clampMax : Optional: Commands greater than this value will be clamped. double thrustMin : Optional: Minimum thrust force output double thrustMax : Optional: Maximum thrust force output int thrusterID Thruster ID, used to generated topic names automatically. std::string topicPrefix Thruster topics prefix. double gain : Optional: Gain factor: Desired angular velocity = command * gain bool isOn Optional: Flag to indicate if the thruster is turned on or off. double thrustEfficiency Optional: Output thrust efficiency factor of the thruster. double propellerEfficiency Optional: Propeller angular velocity efficiency term. ignition::math::Vector3d thrusterAxis The axis about which the thruster rotates.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-thrusterplugin","text":"ThrusterPlugin() Constructor.","title":"function ThrusterPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-thrusterplugin_1","text":"virtual ~ThrusterPlugin() Destructor.","title":"function ~ThrusterPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-init","text":"virtual void Init()","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-reset","text":"virtual void Reset() Custom plugin reset behavior.","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-update","text":"void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#function-updateinput","text":"void UpdateInput( ConstDoublePtr & _msg ) Callback for the input topic subscriber.","title":"function UpdateInput"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrusterdynamics","text":"std::shared_ptr< Dynamics > thrusterDynamics; Thruster dynamic model.","title":"variable thrusterDynamics"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-conversionfunction","text":"std::shared_ptr< ConversionFunction > conversionFunction; Thruster conversion function.","title":"variable conversionFunction"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrusterlink","text":"physics::LinkPtr thrusterLink; Pointer to the thruster link.","title":"variable thrusterLink"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-node","text":"transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-commandsubscriber","text":"transport::SubscriberPtr commandSubscriber; Subscriber to the reference signal topic.","title":"variable commandSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrusttopicpublisher","text":"transport::PublisherPtr thrustTopicPublisher; Publisher to the output thrust topic.","title":"variable thrustTopicPublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-inputcommand","text":"double inputCommand; Input command, typically desired angular velocity of the rotor.","title":"variable inputCommand"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrustforce","text":"double thrustForce; Latest thrust force in [N].","title":"variable thrustForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrustforcestamp","text":"common::Time thrustForceStamp; Time stamp of latest thrust force.","title":"variable thrustForceStamp"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-joint","text":"physics::JointPtr joint; Optional: The rotor joint, used for visualization.","title":"variable joint"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-clampmin","text":"double clampMin; : Optional: Commands less than this value will be clamped.","title":"variable clampMin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-clampmax","text":"double clampMax; : Optional: Commands greater than this value will be clamped.","title":"variable clampMax"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrustmin","text":"double thrustMin; : Optional: Minimum thrust force output","title":"variable thrustMin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrustmax","text":"double thrustMax; : Optional: Maximum thrust force output","title":"variable thrustMax"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrusterid","text":"int thrusterID; Thruster ID, used to generated topic names automatically.","title":"variable thrusterID"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-topicprefix","text":"std::string topicPrefix; Thruster topics prefix.","title":"variable topicPrefix"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-gain","text":"double gain; : Optional: Gain factor: Desired angular velocity = command * gain","title":"variable gain"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-ison","text":"bool isOn; Optional: Flag to indicate if the thruster is turned on or off.","title":"variable isOn"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrustefficiency","text":"double thrustEfficiency; Optional: Output thrust efficiency factor of the thruster.","title":"variable thrustEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-propellerefficiency","text":"double propellerEfficiency; Optional: Propeller angular velocity efficiency term.","title":"variable propellerEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1ThrusterPlugin/#variable-thrusteraxis","text":"ignition::math::Vector3d thrusterAxis; The axis about which the thruster rotates. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable thrusterAxis"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/","text":"gazebo::UmbilicalModel Inherited by gazebo::UmbilicalModelBerg Public Functions Name virtual ~UmbilicalModel () Destructor. virtual void Init () Initialize model. virtual void OnUpdate (const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow) =0 Update Umbilical (and apply forces) Protected Functions Name UmbilicalModel () Protected constructor: Use the factory instead. Protected Attributes Name physics::ModelPtr model Gazebo model to which this umbilical belongs. physics::LinkPtr connector Moving connector link of this umbilical. Public Functions Documentation function ~UmbilicalModel inline virtual ~UmbilicalModel() Destructor. function Init virtual void Init() Initialize model. function OnUpdate virtual void OnUpdate( const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow ) =0 Update Umbilical (and apply forces) Reimplemented by : gazebo::UmbilicalModelBerg::OnUpdate Protected Functions Documentation function UmbilicalModel inline UmbilicalModel() Protected constructor: Use the factory instead. Protected Attributes Documentation variable model physics::ModelPtr model; Gazebo model to which this umbilical belongs. variable connector physics::LinkPtr connector; Moving connector link of this umbilical. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UmbilicalModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#gazeboumbilicalmodel","text":"Inherited by gazebo::UmbilicalModelBerg","title":"gazebo::UmbilicalModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#public-functions","text":"Name virtual ~UmbilicalModel () Destructor. virtual void Init () Initialize model. virtual void OnUpdate (const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow) =0 Update Umbilical (and apply forces)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#protected-functions","text":"Name UmbilicalModel () Protected constructor: Use the factory instead.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#protected-attributes","text":"Name physics::ModelPtr model Gazebo model to which this umbilical belongs. physics::LinkPtr connector Moving connector link of this umbilical.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#function-umbilicalmodel","text":"inline virtual ~UmbilicalModel() Destructor.","title":"function ~UmbilicalModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#function-init","text":"virtual void Init() Initialize model.","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#function-onupdate","text":"virtual void OnUpdate( const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow ) =0 Update Umbilical (and apply forces) Reimplemented by : gazebo::UmbilicalModelBerg::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#function-umbilicalmodel_1","text":"inline UmbilicalModel() Protected constructor: Use the factory instead.","title":"function UmbilicalModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#variable-model","text":"physics::ModelPtr model; Gazebo model to which this umbilical belongs.","title":"variable model"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModel/#variable-connector","text":"physics::LinkPtr connector; Moving connector link of this umbilical. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable connector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/","text":"gazebo::UmbilicalModelBerg Inherits from gazebo::UmbilicalModel Public Functions Name UmbilicalModel * create (sdf::ElementPtr _sdf, physics::ModelPtr _model) Create UmbilicalModel according to its description. virtual void OnUpdate (const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces) Protected Functions Name UmbilicalModelBerg (sdf::ElementPtr _sdf, physics::ModelPtr _model) Protected constructor: Use the factory instead. Additional inherited members Public Functions inherited from gazebo::UmbilicalModel Name virtual ~UmbilicalModel () Destructor. virtual void Init () Initialize model. Protected Functions inherited from gazebo::UmbilicalModel Name UmbilicalModel () Protected constructor: Use the factory instead. Protected Attributes inherited from gazebo::UmbilicalModel Name physics::ModelPtr model Gazebo model to which this umbilical belongs. physics::LinkPtr connector Moving connector link of this umbilical. Public Functions Documentation function create static UmbilicalModel * create( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Create UmbilicalModel according to its description. function OnUpdate virtual void OnUpdate( const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow ) Update Umbilical (and apply forces) Reimplements : gazebo::UmbilicalModel::OnUpdate Protected Functions Documentation function UmbilicalModelBerg UmbilicalModelBerg( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Protected constructor: Use the factory instead. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UmbilicalModelBerg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#gazeboumbilicalmodelberg","text":"Inherits from gazebo::UmbilicalModel","title":"gazebo::UmbilicalModelBerg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#public-functions","text":"Name UmbilicalModel * create (sdf::ElementPtr _sdf, physics::ModelPtr _model) Create UmbilicalModel according to its description. virtual void OnUpdate (const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#protected-functions","text":"Name UmbilicalModelBerg (sdf::ElementPtr _sdf, physics::ModelPtr _model) Protected constructor: Use the factory instead.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#additional-inherited-members","text":"Public Functions inherited from gazebo::UmbilicalModel Name virtual ~UmbilicalModel () Destructor. virtual void Init () Initialize model. Protected Functions inherited from gazebo::UmbilicalModel Name UmbilicalModel () Protected constructor: Use the factory instead. Protected Attributes inherited from gazebo::UmbilicalModel Name physics::ModelPtr model Gazebo model to which this umbilical belongs. physics::LinkPtr connector Moving connector link of this umbilical.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#function-create","text":"static UmbilicalModel * create( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Create UmbilicalModel according to its description.","title":"function create"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#function-onupdate","text":"virtual void OnUpdate( const common::UpdateInfo & _info, const ignition::math::Vector3d & _flow ) Update Umbilical (and apply forces) Reimplements : gazebo::UmbilicalModel::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelBerg/#function-umbilicalmodelberg","text":"UmbilicalModelBerg( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Protected constructor: Use the factory instead. Updated on 2022-11-24 at 19:19:33 +0000","title":"function UmbilicalModelBerg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/","text":"gazebo::UmbilicalModelFactory Factory singleton class that creates an UmbilicalModel from sdf. #include <UmbilicalModel.hh> Public Functions Name UmbilicalModel * CreateUmbilicalModel (sdf::ElementPtr _sdf, physics::ModelPtr _model) Create a ConversionFunction object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, UmbilicalModelCreator _creator) Register an UmbilicalModel class with its creator. UmbilicalModelFactory & GetInstance () Return the singleton instance of this factory. Public Functions Documentation function CreateUmbilicalModel UmbilicalModel * CreateUmbilicalModel( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Create a ConversionFunction object according to its sdf Description. function RegisterCreator bool RegisterCreator( const std::string & _identifier, UmbilicalModelCreator _creator ) Register an UmbilicalModel class with its creator. function GetInstance static UmbilicalModelFactory & GetInstance() Return the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UmbilicalModelFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#gazeboumbilicalmodelfactory","text":"Factory singleton class that creates an UmbilicalModel from sdf. #include <UmbilicalModel.hh>","title":"gazebo::UmbilicalModelFactory"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#public-functions","text":"Name UmbilicalModel * CreateUmbilicalModel (sdf::ElementPtr _sdf, physics::ModelPtr _model) Create a ConversionFunction object according to its sdf Description. bool RegisterCreator (const std::string & _identifier, UmbilicalModelCreator _creator) Register an UmbilicalModel class with its creator. UmbilicalModelFactory & GetInstance () Return the singleton instance of this factory.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#function-createumbilicalmodel","text":"UmbilicalModel * CreateUmbilicalModel( sdf::ElementPtr _sdf, physics::ModelPtr _model ) Create a ConversionFunction object according to its sdf Description.","title":"function CreateUmbilicalModel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#function-registercreator","text":"bool RegisterCreator( const std::string & _identifier, UmbilicalModelCreator _creator ) Register an UmbilicalModel class with its creator.","title":"function RegisterCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalModelFactory/#function-getinstance","text":"static UmbilicalModelFactory & GetInstance() Return the singleton instance of this factory. Updated on 2022-11-24 at 19:19:33 +0000","title":"function GetInstance"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/","text":"gazebo::UmbilicalPlugin Inherits from ModelPlugin Public Functions Name UmbilicalPlugin () Destructor. ~UmbilicalPlugin () Constructor. Protected Functions Name virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. virtual void OnUpdate (const common::UpdateInfo & _info) Update callback from simulation. void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. Protected Attributes Name event::ConnectionPtr updateConnection Pointer to the update event connection. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::transport::NodePtr node Gazebo node. gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. std::shared_ptr< UmbilicalModel > umbilical Pointer to UmbilicalModel used in this plugin. Public Functions Documentation function UmbilicalPlugin UmbilicalPlugin() Destructor. function ~UmbilicalPlugin ~UmbilicalPlugin() Constructor. Protected Functions Documentation function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf. function OnUpdate virtual void OnUpdate( const common::UpdateInfo & _info ) Update callback from simulation. function UpdateFlowVelocity void UpdateFlowVelocity( ConstVector3dPtr & _msg ) Reads flow velocity topic. Protected Attributes Documentation variable updateConnection event::ConnectionPtr updateConnection; Pointer to the update event connection. variable model gazebo::physics::ModelPtr model; Pointer to the model structure. variable world gazebo::physics::WorldPtr world; Pointer to the world plugin. variable node gazebo::transport::NodePtr node; Gazebo node. variable flowSubscriber gazebo::transport::SubscriberPtr flowSubscriber; Subcriber to flow message. variable flowVelocity ignition::math::Vector3d flowVelocity; Flow velocity vector read from topic. variable umbilical std::shared_ptr< UmbilicalModel > umbilical; Pointer to UmbilicalModel used in this plugin. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UmbilicalPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#gazeboumbilicalplugin","text":"Inherits from ModelPlugin","title":"gazebo::UmbilicalPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#public-functions","text":"Name UmbilicalPlugin () Destructor. ~UmbilicalPlugin () Constructor.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#protected-functions","text":"Name virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. virtual void OnUpdate (const common::UpdateInfo & _info) Update callback from simulation. void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#protected-attributes","text":"Name event::ConnectionPtr updateConnection Pointer to the update event connection. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::transport::NodePtr node Gazebo node. gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. std::shared_ptr< UmbilicalModel > umbilical Pointer to UmbilicalModel used in this plugin.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#function-umbilicalplugin","text":"UmbilicalPlugin() Destructor.","title":"function UmbilicalPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#function-umbilicalplugin_1","text":"~UmbilicalPlugin() Constructor.","title":"function ~UmbilicalPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#function-onupdate","text":"virtual void OnUpdate( const common::UpdateInfo & _info ) Update callback from simulation.","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#function-updateflowvelocity","text":"void UpdateFlowVelocity( ConstVector3dPtr & _msg ) Reads flow velocity topic.","title":"function UpdateFlowVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Pointer to the update event connection.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-model","text":"gazebo::physics::ModelPtr model; Pointer to the model structure.","title":"variable model"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-world","text":"gazebo::physics::WorldPtr world; Pointer to the world plugin.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-node","text":"gazebo::transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-flowsubscriber","text":"gazebo::transport::SubscriberPtr flowSubscriber; Subcriber to flow message.","title":"variable flowSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-flowvelocity","text":"ignition::math::Vector3d flowVelocity; Flow velocity vector read from topic.","title":"variable flowVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalPlugin/#variable-umbilical","text":"std::shared_ptr< UmbilicalModel > umbilical; Pointer to UmbilicalModel used in this plugin. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable umbilical"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/","text":"gazebo::UmbilicalSegment Public Functions Name UmbilicalSegment () UmbilicalSegment (const std::string & _name, const std::string & _fromLink, const ignition::math::Pose3d & _fromPose, const ignition::math::Pose3d & _toPose, physics::ModelPtr _model) void initSdfSegment () Public Attributes Name physics::LinkPtr link physics::LinkPtr linkA physics::JointPtr jointA physics::JointPtr jointB std::shared_ptr< UmbilicalSegment > prev std::shared_ptr< UmbilicalSegment > next sdf::SDFPtr sdfSegment Public Functions Documentation function UmbilicalSegment inline UmbilicalSegment() function UmbilicalSegment UmbilicalSegment( const std::string & _name, const std::string & _fromLink, const ignition::math::Pose3d & _fromPose, const ignition::math::Pose3d & _toPose, physics::ModelPtr _model ) function initSdfSegment void initSdfSegment() Public Attributes Documentation variable link physics::LinkPtr link; variable linkA physics::LinkPtr linkA; variable jointA physics::JointPtr jointA; variable jointB physics::JointPtr jointB; variable prev std::shared_ptr< UmbilicalSegment > prev; variable next std::shared_ptr< UmbilicalSegment > next; variable sdfSegment static sdf::SDFPtr sdfSegment; Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UmbilicalSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#gazeboumbilicalsegment","text":"","title":"gazebo::UmbilicalSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#public-functions","text":"Name UmbilicalSegment () UmbilicalSegment (const std::string & _name, const std::string & _fromLink, const ignition::math::Pose3d & _fromPose, const ignition::math::Pose3d & _toPose, physics::ModelPtr _model) void initSdfSegment ()","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#public-attributes","text":"Name physics::LinkPtr link physics::LinkPtr linkA physics::JointPtr jointA physics::JointPtr jointB std::shared_ptr< UmbilicalSegment > prev std::shared_ptr< UmbilicalSegment > next sdf::SDFPtr sdfSegment","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#function-umbilicalsegment","text":"inline UmbilicalSegment()","title":"function UmbilicalSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#function-umbilicalsegment_1","text":"UmbilicalSegment( const std::string & _name, const std::string & _fromLink, const ignition::math::Pose3d & _fromPose, const ignition::math::Pose3d & _toPose, physics::ModelPtr _model )","title":"function UmbilicalSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#function-initsdfsegment","text":"void initSdfSegment()","title":"function initSdfSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-link","text":"physics::LinkPtr link;","title":"variable link"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-linka","text":"physics::LinkPtr linkA;","title":"variable linkA"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-jointa","text":"physics::JointPtr jointA;","title":"variable jointA"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-jointb","text":"physics::JointPtr jointB;","title":"variable jointB"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-prev","text":"std::shared_ptr< UmbilicalSegment > prev;","title":"variable prev"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-next","text":"std::shared_ptr< UmbilicalSegment > next;","title":"variable next"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UmbilicalSegment/#variable-sdfsegment","text":"static sdf::SDFPtr sdfSegment; Updated on 2022-11-24 at 19:19:33 +0000","title":"variable sdfSegment"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/","text":"gazebo::UnderwaterObjectPlugin Gazebo model plugin class for underwater objects. #include <UnderwaterObjectPlugin.hh> Inherits from ModelPlugin Public Functions Name UnderwaterObjectPlugin () Constructor. virtual ~UnderwaterObjectPlugin () Destructor. virtual void Load (gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. Protected Functions Name virtual void Connect () Connects the update event callback. void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. virtual void PublishCurrentVelocityMarker () Publish current velocity marker. virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. virtual void GenWrenchMsg (ignition::math::Vector3d _force, ignition::math::Vector3d _torque, gazebo::msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. Protected Attributes Name std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models Pairs of links & corresponding hydrodynamic models. ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. gazebo::event::ConnectionPtr updateConnection Update event. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::transport::NodePtr node Gazebo node. std::string baseLinkName Name of vehicle's base_link. gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. bool useGlobalCurrent Flag to use the global current velocity or the individually assigned current velocity. std::map< std::string, gazebo::transport::PublisherPtr > hydroPub Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. Public Functions Documentation function UnderwaterObjectPlugin UnderwaterObjectPlugin() Constructor. function ~UnderwaterObjectPlugin virtual ~UnderwaterObjectPlugin() Destructor. function Load virtual void Load( gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf ) function Init virtual void Init() function Update virtual void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function Connect virtual void Connect() Connects the update event callback. function UpdateFlowVelocity void UpdateFlowVelocity( ConstVector3dPtr & _msg ) Reads flow velocity topic. function PublishCurrentVelocityMarker virtual void PublishCurrentVelocityMarker() Publish current velocity marker. function PublishIsSubmerged virtual void PublishIsSubmerged() Publishes the state of the vehicle (is submerged) function PublishRestoringForce virtual void PublishRestoringForce( gazebo::physics::LinkPtr _link ) Publish restoring force. Parameters : _link Pointer to the link where the force information will be extracted from function PublishHydrodynamicWrenches virtual void PublishHydrodynamicWrenches( gazebo::physics::LinkPtr _link ) Publish hydrodynamic wrenches. Parameters : _link Pointer to the link where the force information will be extracted from function GenWrenchMsg virtual void GenWrenchMsg( ignition::math::Vector3d _force, ignition::math::Vector3d _torque, gazebo::msgs::WrenchStamped & _output ) Returns the wrench message for debugging topics. Parameters : _force Force vector _torque Torque vector _output Stamped wrench message to be updated function InitDebug virtual void InitDebug( gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro ) Sets the topics used for publishing the intermediate data during the simulation. Parameters : _link Pointer to the link _hydro Pointer to the hydrodynamic model Protected Attributes Documentation variable models std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models; Pairs of links & corresponding hydrodynamic models. variable flowVelocity ignition::math::Vector3d flowVelocity; Flow velocity vector read from topic. variable updateConnection gazebo::event::ConnectionPtr updateConnection; Update event. variable world gazebo::physics::WorldPtr world; Pointer to the world plugin. variable model gazebo::physics::ModelPtr model; Pointer to the model structure. variable node gazebo::transport::NodePtr node; Gazebo node. variable baseLinkName std::string baseLinkName; Name of vehicle's base_link. variable flowSubscriber gazebo::transport::SubscriberPtr flowSubscriber; Subcriber to flow message. variable useGlobalCurrent bool useGlobalCurrent; Flag to use the global current velocity or the individually assigned current velocity. variable hydroPub std::map< std::string, gazebo::transport::PublisherPtr > hydroPub; Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::UnderwaterObjectPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#gazebounderwaterobjectplugin","text":"Gazebo model plugin class for underwater objects. #include <UnderwaterObjectPlugin.hh> Inherits from ModelPlugin","title":"gazebo::UnderwaterObjectPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#public-functions","text":"Name UnderwaterObjectPlugin () Constructor. virtual ~UnderwaterObjectPlugin () Destructor. virtual void Load (gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#protected-functions","text":"Name virtual void Connect () Connects the update event callback. void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. virtual void PublishCurrentVelocityMarker () Publish current velocity marker. virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. virtual void GenWrenchMsg (ignition::math::Vector3d _force, ignition::math::Vector3d _torque, gazebo::msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#protected-attributes","text":"Name std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models Pairs of links & corresponding hydrodynamic models. ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. gazebo::event::ConnectionPtr updateConnection Update event. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::transport::NodePtr node Gazebo node. std::string baseLinkName Name of vehicle's base_link. gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. bool useGlobalCurrent Flag to use the global current velocity or the individually assigned current velocity. std::map< std::string, gazebo::transport::PublisherPtr > hydroPub Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-underwaterobjectplugin","text":"UnderwaterObjectPlugin() Constructor.","title":"function UnderwaterObjectPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-underwaterobjectplugin_1","text":"virtual ~UnderwaterObjectPlugin() Destructor.","title":"function ~UnderwaterObjectPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-load","text":"virtual void Load( gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-init","text":"virtual void Init()","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-update","text":"virtual void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-connect","text":"virtual void Connect() Connects the update event callback.","title":"function Connect"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-updateflowvelocity","text":"void UpdateFlowVelocity( ConstVector3dPtr & _msg ) Reads flow velocity topic.","title":"function UpdateFlowVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-publishcurrentvelocitymarker","text":"virtual void PublishCurrentVelocityMarker() Publish current velocity marker.","title":"function PublishCurrentVelocityMarker"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-publishissubmerged","text":"virtual void PublishIsSubmerged() Publishes the state of the vehicle (is submerged)","title":"function PublishIsSubmerged"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-publishrestoringforce","text":"virtual void PublishRestoringForce( gazebo::physics::LinkPtr _link ) Publish restoring force. Parameters : _link Pointer to the link where the force information will be extracted from","title":"function PublishRestoringForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-publishhydrodynamicwrenches","text":"virtual void PublishHydrodynamicWrenches( gazebo::physics::LinkPtr _link ) Publish hydrodynamic wrenches. Parameters : _link Pointer to the link where the force information will be extracted from","title":"function PublishHydrodynamicWrenches"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-genwrenchmsg","text":"virtual void GenWrenchMsg( ignition::math::Vector3d _force, ignition::math::Vector3d _torque, gazebo::msgs::WrenchStamped & _output ) Returns the wrench message for debugging topics. Parameters : _force Force vector _torque Torque vector _output Stamped wrench message to be updated","title":"function GenWrenchMsg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#function-initdebug","text":"virtual void InitDebug( gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro ) Sets the topics used for publishing the intermediate data during the simulation. Parameters : _link Pointer to the link _hydro Pointer to the hydrodynamic model","title":"function InitDebug"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-models","text":"std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models; Pairs of links & corresponding hydrodynamic models.","title":"variable models"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-flowvelocity","text":"ignition::math::Vector3d flowVelocity; Flow velocity vector read from topic.","title":"variable flowVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-updateconnection","text":"gazebo::event::ConnectionPtr updateConnection; Update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-world","text":"gazebo::physics::WorldPtr world; Pointer to the world plugin.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-model","text":"gazebo::physics::ModelPtr model; Pointer to the model structure.","title":"variable model"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-node","text":"gazebo::transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-baselinkname","text":"std::string baseLinkName; Name of vehicle's base_link.","title":"variable baseLinkName"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-flowsubscriber","text":"gazebo::transport::SubscriberPtr flowSubscriber; Subcriber to flow message.","title":"variable flowSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-useglobalcurrent","text":"bool useGlobalCurrent; Flag to use the global current velocity or the individually assigned current velocity.","title":"variable useGlobalCurrent"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Classes/classgazebo_1_1UnderwaterObjectPlugin/#variable-hydropub","text":"std::map< std::string, gazebo::transport::PublisherPtr > hydroPub; Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable hydroPub"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:33 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:33 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:33 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:33 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/","text":"Namespaces namespace Eigen namespace gazebo Updated on 2022-11-24 at 19:19:33 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/#namespaces","text":"namespace Eigen namespace gazebo Updated on 2022-11-24 at 19:19:33 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/","text":"Eigen Types Name typedef Eigen::Matrix< double, 6, 6 > Matrix6d Definition of a 6x6 Eigen matrix. typedef Eigen::Matrix< double, 6, 1 > Vector6d Definition of a 6 element Eigen vector. Types Documentation typedef Matrix6d typedef Eigen::Matrix<double, 6, 6> Eigen::Matrix6d; Definition of a 6x6 Eigen matrix. typedef Vector6d typedef Eigen::Matrix<double, 6, 1> Eigen::Vector6d; Definition of a 6 element Eigen vector. Updated on 2022-11-24 at 19:19:33 +0000","title":"Eigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/#eigen","text":"","title":"Eigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/#types","text":"Name typedef Eigen::Matrix< double, 6, 6 > Matrix6d Definition of a 6x6 Eigen matrix. typedef Eigen::Matrix< double, 6, 1 > Vector6d Definition of a 6 element Eigen vector.","title":"Types"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/#types-documentation","text":"","title":"Types Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/#typedef-matrix6d","text":"typedef Eigen::Matrix<double, 6, 6> Eigen::Matrix6d; Definition of a 6x6 Eigen matrix.","title":"typedef Matrix6d"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespaceEigen/#typedef-vector6d","text":"typedef Eigen::Matrix<double, 6, 1> Eigen::Vector6d; Definition of a 6 element Eigen vector. Updated on 2022-11-24 at 19:19:33 +0000","title":"typedef Vector6d"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/","text":"gazebo Classes Name class gazebo::BuoyantObject Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. class gazebo::ConversionFunction Abstact base class for a thruster conversion function. class gazebo::ConversionFunctionBasic The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class gazebo::ConversionFunctionBessa Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class gazebo::ConversionFunctionFactory Factory singleton class that creates a ConversionFunction from sdf. class gazebo::ConversionFunctionLinearInterp Conversion using linear interpolation between given data points. class gazebo::Dynamics Abstract base class for thruster dynamics. class gazebo::DynamicsFactory Factory singleton class that creates a ThrusterDynamics from sdf. class gazebo::DynamicsFirstOrder First-order dynamic system. class gazebo::DynamicsZeroOrder Trivial (no dynamics) zero-order dynamic system. class gazebo::FinPlugin class gazebo::HMBox Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. class gazebo::HMCylinder Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. class gazebo::HMFossen Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: class gazebo::HMSphere Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. class gazebo::HMSpheroid Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. class gazebo::HydrodynamicModel class gazebo::HydrodynamicModelFactory Factory singleton class that creates a HydrodynamicModel from sdf. class gazebo::LiftDrag Abstract base class for Lift&Drag models. class gazebo::LiftDragFactory Factory singleton class that creates a LiftDrag from sdf. class gazebo::LiftDragQuadratic Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). class gazebo::LiftDragTwoLines Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. class gazebo::ThrusterDynamicsBessa Bessa's dynamic thruster model. class gazebo::ThrusterDynamicsYoerger Yoerger's dynamic thruster model. class gazebo::ThrusterPlugin Class for the thruster plugin. class gazebo::UmbilicalModel class gazebo::UmbilicalModelBerg class gazebo::UmbilicalModelFactory Factory singleton class that creates an UmbilicalModel from sdf. class gazebo::UmbilicalPlugin class gazebo::UmbilicalSegment class gazebo::UnderwaterObjectPlugin Gazebo model plugin class for underwater objects. Types Name typedef Dynamics ( )(sdf::ElementPtr) DynamicsCreator Function pointer to create a certain thruster dynamics object. typedef boost::shared_ptr< HydrodynamicModel > HydrodynamicModelPtr Pointer to model. typedef HydrodynamicModel ( )(sdf::ElementPtr, physics::LinkPtr) HydrodynamicModelCreator Function pointer to create a certain a model. typedef LiftDrag ( )(sdf::ElementPtr) LiftDragCreator Function pointer to create a certain LiftDrag object. typedef ConversionFunction ( )(sdf::ElementPtr) ConversionFunctionCreator Function pointer to create a certain conversion function. typedef UmbilicalModel ( )(sdf::ElementPtr, physics::ModelPtr) UmbilicalModelCreator Function pointer to create a certain conversion function. typedef boost::shared_ptr< UmbilicalSegment > UmbilicalSegmentPtr Functions Name std::vector< double > Str2Vector (std::string _input) Conversion of a string to a double vector. Eigen::Matrix3d CrossProductOperator (Eigen::Vector3d _x) Returns the cross product operator matrix for Eigen vectors. Eigen::Matrix3d CrossProductOperator (ignition::math::Vector3d _x) Returns the cross product operator matrix for Gazebo vectors. Eigen::Vector3d ToEigen (const ignition::math::Vector3d & _x) Eigen::Matrix3d ToEigen (const ignition::math::Matrix3d & _x) Eigen::Vector6d EigenStack (const ignition::math::Vector3d & _x, const ignition::math::Vector3d & _y) ignition::math::Vector3d Vec3dToGazebo (const Eigen::Vector3d & _x) ignition::math::Matrix3d Mat3dToGazebo (const Eigen::Matrix3d & _x) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMFossen , & HMFossen::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMSphere , & HMSphere::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMCylinder , & HMCylinder::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMSpheroid , & HMSpheroid::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMBox , & HMBox::create ) GZ_REGISTER_MODEL_PLUGIN ( UmbilicalPlugin ) Attributes Name const typedef boost::shared_ptr< const uuv_gazebo_plugins_msgs::msgs::Double > ConstDoublePtr Definition of a pointer to the floating point message. Types Documentation typedef DynamicsCreator typedef Dynamics*(* gazebo::DynamicsCreator) (sdf::ElementPtr); Function pointer to create a certain thruster dynamics object. typedef HydrodynamicModelPtr typedef boost::shared_ptr<HydrodynamicModel> gazebo::HydrodynamicModelPtr; Pointer to model. typedef HydrodynamicModelCreator typedef HydrodynamicModel*(* gazebo::HydrodynamicModelCreator) (sdf::ElementPtr, physics::LinkPtr); Function pointer to create a certain a model. typedef LiftDragCreator typedef LiftDrag*(* gazebo::LiftDragCreator) (sdf::ElementPtr); Function pointer to create a certain LiftDrag object. typedef ConversionFunctionCreator typedef ConversionFunction*(* gazebo::ConversionFunctionCreator) (sdf::ElementPtr); Function pointer to create a certain conversion function. typedef UmbilicalModelCreator typedef UmbilicalModel*(* gazebo::UmbilicalModelCreator) (sdf::ElementPtr, physics::ModelPtr); Function pointer to create a certain conversion function. typedef UmbilicalSegmentPtr typedef boost::shared_ptr<UmbilicalSegment> gazebo::UmbilicalSegmentPtr; Functions Documentation function Str2Vector inline std::vector< double > Str2Vector( std::string _input ) Conversion of a string to a double vector. function CrossProductOperator inline Eigen::Matrix3d CrossProductOperator( Eigen::Vector3d _x ) Returns the cross product operator matrix for Eigen vectors. function CrossProductOperator inline Eigen::Matrix3d CrossProductOperator( ignition::math::Vector3d _x ) Returns the cross product operator matrix for Gazebo vectors. function ToEigen inline Eigen::Vector3d ToEigen( const ignition::math::Vector3d & _x ) function ToEigen inline Eigen::Matrix3d ToEigen( const ignition::math::Matrix3d & _x ) function EigenStack inline Eigen::Vector6d EigenStack( const ignition::math::Vector3d & _x, const ignition::math::Vector3d & _y ) function Vec3dToGazebo inline ignition::math::Vector3d Vec3dToGazebo( const Eigen::Vector3d & _x ) function Mat3dToGazebo inline ignition::math::Matrix3d Mat3dToGazebo( const Eigen::Matrix3d & _x ) function REGISTER_HYDRODYNAMICMODEL_CREATOR REGISTER_HYDRODYNAMICMODEL_CREATOR( HMFossen , &HMFossen::create ) function REGISTER_HYDRODYNAMICMODEL_CREATOR REGISTER_HYDRODYNAMICMODEL_CREATOR( HMSphere , &HMSphere::create ) function REGISTER_HYDRODYNAMICMODEL_CREATOR REGISTER_HYDRODYNAMICMODEL_CREATOR( HMCylinder , &HMCylinder::create ) function REGISTER_HYDRODYNAMICMODEL_CREATOR REGISTER_HYDRODYNAMICMODEL_CREATOR( HMSpheroid , &HMSpheroid::create ) function REGISTER_HYDRODYNAMICMODEL_CREATOR REGISTER_HYDRODYNAMICMODEL_CREATOR( HMBox , &HMBox::create ) function GZ_REGISTER_MODEL_PLUGIN GZ_REGISTER_MODEL_PLUGIN( UmbilicalPlugin ) Attributes Documentation variable ConstDoublePtr const typedef boost::shared_ptr< const uuv_gazebo_plugins_msgs::msgs::Double > ConstDoublePtr; Definition of a pointer to the floating point message. Updated on 2022-11-24 at 19:19:32 +0000","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#gazebo","text":"","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#classes","text":"Name class gazebo::BuoyantObject Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. class gazebo::ConversionFunction Abstact base class for a thruster conversion function. class gazebo::ConversionFunctionBasic The most basic conversion function: Thrust = const. w abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class gazebo::ConversionFunctionBessa Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. class gazebo::ConversionFunctionFactory Factory singleton class that creates a ConversionFunction from sdf. class gazebo::ConversionFunctionLinearInterp Conversion using linear interpolation between given data points. class gazebo::Dynamics Abstract base class for thruster dynamics. class gazebo::DynamicsFactory Factory singleton class that creates a ThrusterDynamics from sdf. class gazebo::DynamicsFirstOrder First-order dynamic system. class gazebo::DynamicsZeroOrder Trivial (no dynamics) zero-order dynamic system. class gazebo::FinPlugin class gazebo::HMBox Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. class gazebo::HMCylinder Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. class gazebo::HMFossen Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: class gazebo::HMSphere Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. class gazebo::HMSpheroid Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. class gazebo::HydrodynamicModel class gazebo::HydrodynamicModelFactory Factory singleton class that creates a HydrodynamicModel from sdf. class gazebo::LiftDrag Abstract base class for Lift&Drag models. class gazebo::LiftDragFactory Factory singleton class that creates a LiftDrag from sdf. class gazebo::LiftDragQuadratic Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). class gazebo::LiftDragTwoLines Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. class gazebo::ThrusterDynamicsBessa Bessa's dynamic thruster model. class gazebo::ThrusterDynamicsYoerger Yoerger's dynamic thruster model. class gazebo::ThrusterPlugin Class for the thruster plugin. class gazebo::UmbilicalModel class gazebo::UmbilicalModelBerg class gazebo::UmbilicalModelFactory Factory singleton class that creates an UmbilicalModel from sdf. class gazebo::UmbilicalPlugin class gazebo::UmbilicalSegment class gazebo::UnderwaterObjectPlugin Gazebo model plugin class for underwater objects.","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#types","text":"Name typedef Dynamics ( )(sdf::ElementPtr) DynamicsCreator Function pointer to create a certain thruster dynamics object. typedef boost::shared_ptr< HydrodynamicModel > HydrodynamicModelPtr Pointer to model. typedef HydrodynamicModel ( )(sdf::ElementPtr, physics::LinkPtr) HydrodynamicModelCreator Function pointer to create a certain a model. typedef LiftDrag ( )(sdf::ElementPtr) LiftDragCreator Function pointer to create a certain LiftDrag object. typedef ConversionFunction ( )(sdf::ElementPtr) ConversionFunctionCreator Function pointer to create a certain conversion function. typedef UmbilicalModel ( )(sdf::ElementPtr, physics::ModelPtr) UmbilicalModelCreator Function pointer to create a certain conversion function. typedef boost::shared_ptr< UmbilicalSegment > UmbilicalSegmentPtr","title":"Types"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#functions","text":"Name std::vector< double > Str2Vector (std::string _input) Conversion of a string to a double vector. Eigen::Matrix3d CrossProductOperator (Eigen::Vector3d _x) Returns the cross product operator matrix for Eigen vectors. Eigen::Matrix3d CrossProductOperator (ignition::math::Vector3d _x) Returns the cross product operator matrix for Gazebo vectors. Eigen::Vector3d ToEigen (const ignition::math::Vector3d & _x) Eigen::Matrix3d ToEigen (const ignition::math::Matrix3d & _x) Eigen::Vector6d EigenStack (const ignition::math::Vector3d & _x, const ignition::math::Vector3d & _y) ignition::math::Vector3d Vec3dToGazebo (const Eigen::Vector3d & _x) ignition::math::Matrix3d Mat3dToGazebo (const Eigen::Matrix3d & _x) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMFossen , & HMFossen::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMSphere , & HMSphere::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMCylinder , & HMCylinder::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMSpheroid , & HMSpheroid::create ) REGISTER_HYDRODYNAMICMODEL_CREATOR ( HMBox , & HMBox::create ) GZ_REGISTER_MODEL_PLUGIN ( UmbilicalPlugin )","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#attributes","text":"Name const typedef boost::shared_ptr< const uuv_gazebo_plugins_msgs::msgs::Double > ConstDoublePtr Definition of a pointer to the floating point message.","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#types-documentation","text":"","title":"Types Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-dynamicscreator","text":"typedef Dynamics*(* gazebo::DynamicsCreator) (sdf::ElementPtr); Function pointer to create a certain thruster dynamics object.","title":"typedef DynamicsCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-hydrodynamicmodelptr","text":"typedef boost::shared_ptr<HydrodynamicModel> gazebo::HydrodynamicModelPtr; Pointer to model.","title":"typedef HydrodynamicModelPtr"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-hydrodynamicmodelcreator","text":"typedef HydrodynamicModel*(* gazebo::HydrodynamicModelCreator) (sdf::ElementPtr, physics::LinkPtr); Function pointer to create a certain a model.","title":"typedef HydrodynamicModelCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-liftdragcreator","text":"typedef LiftDrag*(* gazebo::LiftDragCreator) (sdf::ElementPtr); Function pointer to create a certain LiftDrag object.","title":"typedef LiftDragCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-conversionfunctioncreator","text":"typedef ConversionFunction*(* gazebo::ConversionFunctionCreator) (sdf::ElementPtr); Function pointer to create a certain conversion function.","title":"typedef ConversionFunctionCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-umbilicalmodelcreator","text":"typedef UmbilicalModel*(* gazebo::UmbilicalModelCreator) (sdf::ElementPtr, physics::ModelPtr); Function pointer to create a certain conversion function.","title":"typedef UmbilicalModelCreator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#typedef-umbilicalsegmentptr","text":"typedef boost::shared_ptr<UmbilicalSegment> gazebo::UmbilicalSegmentPtr;","title":"typedef UmbilicalSegmentPtr"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-str2vector","text":"inline std::vector< double > Str2Vector( std::string _input ) Conversion of a string to a double vector.","title":"function Str2Vector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-crossproductoperator","text":"inline Eigen::Matrix3d CrossProductOperator( Eigen::Vector3d _x ) Returns the cross product operator matrix for Eigen vectors.","title":"function CrossProductOperator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-crossproductoperator_1","text":"inline Eigen::Matrix3d CrossProductOperator( ignition::math::Vector3d _x ) Returns the cross product operator matrix for Gazebo vectors.","title":"function CrossProductOperator"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-toeigen","text":"inline Eigen::Vector3d ToEigen( const ignition::math::Vector3d & _x )","title":"function ToEigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-toeigen_1","text":"inline Eigen::Matrix3d ToEigen( const ignition::math::Matrix3d & _x )","title":"function ToEigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-eigenstack","text":"inline Eigen::Vector6d EigenStack( const ignition::math::Vector3d & _x, const ignition::math::Vector3d & _y )","title":"function EigenStack"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-vec3dtogazebo","text":"inline ignition::math::Vector3d Vec3dToGazebo( const Eigen::Vector3d & _x )","title":"function Vec3dToGazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-mat3dtogazebo","text":"inline ignition::math::Matrix3d Mat3dToGazebo( const Eigen::Matrix3d & _x )","title":"function Mat3dToGazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-register_hydrodynamicmodel_creator","text":"REGISTER_HYDRODYNAMICMODEL_CREATOR( HMFossen , &HMFossen::create )","title":"function REGISTER_HYDRODYNAMICMODEL_CREATOR"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-register_hydrodynamicmodel_creator_1","text":"REGISTER_HYDRODYNAMICMODEL_CREATOR( HMSphere , &HMSphere::create )","title":"function REGISTER_HYDRODYNAMICMODEL_CREATOR"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-register_hydrodynamicmodel_creator_2","text":"REGISTER_HYDRODYNAMICMODEL_CREATOR( HMCylinder , &HMCylinder::create )","title":"function REGISTER_HYDRODYNAMICMODEL_CREATOR"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-register_hydrodynamicmodel_creator_3","text":"REGISTER_HYDRODYNAMICMODEL_CREATOR( HMSpheroid , &HMSpheroid::create )","title":"function REGISTER_HYDRODYNAMICMODEL_CREATOR"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-register_hydrodynamicmodel_creator_4","text":"REGISTER_HYDRODYNAMICMODEL_CREATOR( HMBox , &HMBox::create )","title":"function REGISTER_HYDRODYNAMICMODEL_CREATOR"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#function-gz_register_model_plugin","text":"GZ_REGISTER_MODEL_PLUGIN( UmbilicalPlugin )","title":"function GZ_REGISTER_MODEL_PLUGIN"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/Namespaces/namespacegazebo/#variable-constdoubleptr","text":"const typedef boost::shared_ptr< const uuv_gazebo_plugins_msgs::msgs::Double > ConstDoublePtr; Definition of a pointer to the floating point message. Updated on 2022-11-24 at 19:19:32 +0000","title":"variable ConstDoublePtr"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/","text":"Classes namespace gazebo class AccelerationsTestPlugin Gazebo model plugin class for underwater objects. class CustomBatteryConsumerROSPlugin class LinearBatteryROSPlugin class ThrusterManagerROSPlugin namespace test_default_fossen_vehicle class TestDefaultFossenVehicle namespace test_sphere_vehicle class TestSphereVehicle namespace test_thrusters class TestThrusters namespace uuv_gazebo_ros_plugins_msgs::srv namespace uuv_simulator_ros class FinROSPlugin class JointStatePublisher class ThrusterROSPlugin class UnderwaterObjectROSPlugin Updated on 2022-11-24 at 19:19:33 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/#classes","text":"namespace gazebo class AccelerationsTestPlugin Gazebo model plugin class for underwater objects. class CustomBatteryConsumerROSPlugin class LinearBatteryROSPlugin class ThrusterManagerROSPlugin namespace test_default_fossen_vehicle class TestDefaultFossenVehicle namespace test_sphere_vehicle class TestSphereVehicle namespace test_thrusters class TestThrusters namespace uuv_gazebo_ros_plugins_msgs::srv namespace uuv_simulator_ros class FinROSPlugin class JointStatePublisher class ThrusterROSPlugin class UnderwaterObjectROSPlugin Updated on 2022-11-24 at 19:19:33 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/","text":"gazebo::AccelerationsTestPlugin Gazebo model plugin class for underwater objects. #include <AccelerationsTestPlugin.hh> Inherits from ModelPlugin Public Functions Name AccelerationsTestPlugin () Constructor. virtual ~AccelerationsTestPlugin () Destructor. virtual void Load (gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. Protected Functions Name virtual void Connect () Connects the update event callback. Protected Attributes Name gazebo::event::ConnectionPtr updateConnection Update event. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::transport::NodePtr node Gazebo node. physics::LinkPtr link Link of test object. ros::Publisher pub_accel_b_gazebo ros::Publisher pub_accel_b_numeric ros::Publisher pub_accel_w_gazebo ros::Publisher pub_accel_w_numeric Eigen::Vector6d last_w_v_w_b Velocity of link with respect to world frame in previous time step. common::Time lastTime Time stamp of previous time step. Public Functions Documentation function AccelerationsTestPlugin AccelerationsTestPlugin() Constructor. function ~AccelerationsTestPlugin virtual ~AccelerationsTestPlugin() Destructor. function Load virtual void Load( gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf ) function Init virtual void Init() function Update void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function Connect virtual void Connect() Connects the update event callback. Protected Attributes Documentation variable updateConnection gazebo::event::ConnectionPtr updateConnection; Update event. variable world gazebo::physics::WorldPtr world; Pointer to the world plugin. variable model gazebo::physics::ModelPtr model; Pointer to the model structure. variable node gazebo::transport::NodePtr node; Gazebo node. variable link physics::LinkPtr link; Link of test object. variable pub_accel_b_gazebo ros::Publisher pub_accel_b_gazebo; variable pub_accel_b_numeric ros::Publisher pub_accel_b_numeric; variable pub_accel_w_gazebo ros::Publisher pub_accel_w_gazebo; variable pub_accel_w_numeric ros::Publisher pub_accel_w_numeric; variable last_w_v_w_b Eigen::Vector6d last_w_v_w_b; Velocity of link with respect to world frame in previous time step. variable lastTime common::Time lastTime; Time stamp of previous time step. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::AccelerationsTestPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#gazeboaccelerationstestplugin","text":"Gazebo model plugin class for underwater objects. #include <AccelerationsTestPlugin.hh> Inherits from ModelPlugin","title":"gazebo::AccelerationsTestPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#public-functions","text":"Name AccelerationsTestPlugin () Constructor. virtual ~AccelerationsTestPlugin () Destructor. virtual void Load (gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf) virtual void Init () void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#protected-functions","text":"Name virtual void Connect () Connects the update event callback.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#protected-attributes","text":"Name gazebo::event::ConnectionPtr updateConnection Update event. gazebo::physics::WorldPtr world Pointer to the world plugin. gazebo::physics::ModelPtr model Pointer to the model structure. gazebo::transport::NodePtr node Gazebo node. physics::LinkPtr link Link of test object. ros::Publisher pub_accel_b_gazebo ros::Publisher pub_accel_b_numeric ros::Publisher pub_accel_w_gazebo ros::Publisher pub_accel_w_numeric Eigen::Vector6d last_w_v_w_b Velocity of link with respect to world frame in previous time step. common::Time lastTime Time stamp of previous time step.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-accelerationstestplugin","text":"AccelerationsTestPlugin() Constructor.","title":"function AccelerationsTestPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-accelerationstestplugin_1","text":"virtual ~AccelerationsTestPlugin() Destructor.","title":"function ~AccelerationsTestPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-load","text":"virtual void Load( gazebo::physics::ModelPtr _model, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-init","text":"virtual void Init()","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-update","text":"void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#function-connect","text":"virtual void Connect() Connects the update event callback.","title":"function Connect"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-updateconnection","text":"gazebo::event::ConnectionPtr updateConnection; Update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-world","text":"gazebo::physics::WorldPtr world; Pointer to the world plugin.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-model","text":"gazebo::physics::ModelPtr model; Pointer to the model structure.","title":"variable model"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-node","text":"gazebo::transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-link","text":"physics::LinkPtr link; Link of test object.","title":"variable link"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-pub_accel_b_gazebo","text":"ros::Publisher pub_accel_b_gazebo;","title":"variable pub_accel_b_gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-pub_accel_b_numeric","text":"ros::Publisher pub_accel_b_numeric;","title":"variable pub_accel_b_numeric"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-pub_accel_w_gazebo","text":"ros::Publisher pub_accel_w_gazebo;","title":"variable pub_accel_w_gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-pub_accel_w_numeric","text":"ros::Publisher pub_accel_w_numeric;","title":"variable pub_accel_w_numeric"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-last_w_v_w_b","text":"Eigen::Vector6d last_w_v_w_b; Velocity of link with respect to world frame in previous time step.","title":"variable last_w_v_w_b"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1AccelerationsTestPlugin/#variable-lasttime","text":"common::Time lastTime; Time stamp of previous time step. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable lastTime"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/","text":"gazebo::CustomBatteryConsumerROSPlugin Inherits from ModelPlugin Public Functions Name CustomBatteryConsumerROSPlugin () Constructor. virtual ~CustomBatteryConsumerROSPlugin () Destructor. void Load (physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. Protected Functions Name void UpdateDeviceState (const std_msgs::Bool::ConstPtr & _msg) Callback for the device state topic subscriber. void UpdatePowerLoad (double _powerLoad =0.0) Update power load. Protected Attributes Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. ros::Subscriber deviceStateSub Subscriber to the device state flag. common::BatteryPtr battery Pointer to battery. bool isDeviceOn Flag to signal whether a specific device is running. double powerLoad Power load in W. int consumerID Battery consumer ID. std::string linkName Link name. std::string batteryName Battery model name. event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. Public Functions Documentation function CustomBatteryConsumerROSPlugin CustomBatteryConsumerROSPlugin() Constructor. function ~CustomBatteryConsumerROSPlugin virtual ~CustomBatteryConsumerROSPlugin() Destructor. function Load void Load( physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. Protected Functions Documentation function UpdateDeviceState void UpdateDeviceState( const std_msgs::Bool::ConstPtr & _msg ) Callback for the device state topic subscriber. function UpdatePowerLoad void UpdatePowerLoad( double _powerLoad =0.0 ) Update power load. Protected Attributes Documentation variable rosNode boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle. variable deviceStateSub ros::Subscriber deviceStateSub; Subscriber to the device state flag. variable battery common::BatteryPtr battery; Pointer to battery. variable isDeviceOn bool isDeviceOn; Flag to signal whether a specific device is running. variable powerLoad double powerLoad; Power load in W. variable consumerID int consumerID; Battery consumer ID. variable linkName std::string linkName; Link name. variable batteryName std::string batteryName; Battery model name. variable rosPublishConnection event::ConnectionPtr rosPublishConnection; Connection for callbacks on update world. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::CustomBatteryConsumerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#gazebocustombatteryconsumerrosplugin","text":"Inherits from ModelPlugin","title":"gazebo::CustomBatteryConsumerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#public-functions","text":"Name CustomBatteryConsumerROSPlugin () Constructor. virtual ~CustomBatteryConsumerROSPlugin () Destructor. void Load (physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#protected-functions","text":"Name void UpdateDeviceState (const std_msgs::Bool::ConstPtr & _msg) Callback for the device state topic subscriber. void UpdatePowerLoad (double _powerLoad =0.0) Update power load.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#protected-attributes","text":"Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. ros::Subscriber deviceStateSub Subscriber to the device state flag. common::BatteryPtr battery Pointer to battery. bool isDeviceOn Flag to signal whether a specific device is running. double powerLoad Power load in W. int consumerID Battery consumer ID. std::string linkName Link name. std::string batteryName Battery model name. event::ConnectionPtr rosPublishConnection Connection for callbacks on update world.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#function-custombatteryconsumerrosplugin","text":"CustomBatteryConsumerROSPlugin() Constructor.","title":"function CustomBatteryConsumerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#function-custombatteryconsumerrosplugin_1","text":"virtual ~CustomBatteryConsumerROSPlugin() Destructor.","title":"function ~CustomBatteryConsumerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#function-load","text":"void Load( physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#function-updatedevicestate","text":"void UpdateDeviceState( const std_msgs::Bool::ConstPtr & _msg ) Callback for the device state topic subscriber.","title":"function UpdateDeviceState"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#function-updatepowerload","text":"void UpdatePowerLoad( double _powerLoad =0.0 ) Update power load.","title":"function UpdatePowerLoad"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-rosnode","text":"boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle.","title":"variable rosNode"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-devicestatesub","text":"ros::Subscriber deviceStateSub; Subscriber to the device state flag.","title":"variable deviceStateSub"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-battery","text":"common::BatteryPtr battery; Pointer to battery.","title":"variable battery"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-isdeviceon","text":"bool isDeviceOn; Flag to signal whether a specific device is running.","title":"variable isDeviceOn"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-powerload","text":"double powerLoad; Power load in W.","title":"variable powerLoad"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-consumerid","text":"int consumerID; Battery consumer ID.","title":"variable consumerID"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-linkname","text":"std::string linkName; Link name.","title":"variable linkName"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-batteryname","text":"std::string batteryName; Battery model name.","title":"variable batteryName"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1CustomBatteryConsumerROSPlugin/#variable-rospublishconnection","text":"event::ConnectionPtr rosPublishConnection; Connection for callbacks on update world. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable rosPublishConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/","text":"gazebo::LinearBatteryROSPlugin Inherits from LinearBatteryPlugin Public Functions Name LinearBatteryROSPlugin () Constructor. virtual ~LinearBatteryROSPlugin () Destructor. void Load (physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. virtual void Init () Initialize Module. virtual void Reset () Reset Module. Protected Functions Name void PublishBatteryState () Publish battery states. Protected Attributes Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. std::string robotNamespace Namespace for this ROS node. sensor_msgs::BatteryState batteryStateMsg Battery state ROS message. ros::Timer updateTimer Connection for callbacks on update world. Public Functions Documentation function LinearBatteryROSPlugin LinearBatteryROSPlugin() Constructor. function ~LinearBatteryROSPlugin virtual ~LinearBatteryROSPlugin() Destructor. function Load void Load( physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function Init virtual void Init() Initialize Module. function Reset virtual void Reset() Reset Module. Protected Functions Documentation function PublishBatteryState void PublishBatteryState() Publish battery states. Protected Attributes Documentation variable rosNode boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle. variable robotNamespace std::string robotNamespace; Namespace for this ROS node. variable batteryStateMsg sensor_msgs::BatteryState batteryStateMsg; Battery state ROS message. variable updateTimer ros::Timer updateTimer; Connection for callbacks on update world. Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::LinearBatteryROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#gazebolinearbatteryrosplugin","text":"Inherits from LinearBatteryPlugin","title":"gazebo::LinearBatteryROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#public-functions","text":"Name LinearBatteryROSPlugin () Constructor. virtual ~LinearBatteryROSPlugin () Destructor. void Load (physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. virtual void Init () Initialize Module. virtual void Reset () Reset Module.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#protected-functions","text":"Name void PublishBatteryState () Publish battery states.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#protected-attributes","text":"Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. std::string robotNamespace Namespace for this ROS node. sensor_msgs::BatteryState batteryStateMsg Battery state ROS message. ros::Timer updateTimer Connection for callbacks on update world.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-linearbatteryrosplugin","text":"LinearBatteryROSPlugin() Constructor.","title":"function LinearBatteryROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-linearbatteryrosplugin_1","text":"virtual ~LinearBatteryROSPlugin() Destructor.","title":"function ~LinearBatteryROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-load","text":"void Load( physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-init","text":"virtual void Init() Initialize Module.","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-reset","text":"virtual void Reset() Reset Module.","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#function-publishbatterystate","text":"void PublishBatteryState() Publish battery states.","title":"function PublishBatteryState"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#variable-rosnode","text":"boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle.","title":"variable rosNode"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#variable-robotnamespace","text":"std::string robotNamespace; Namespace for this ROS node.","title":"variable robotNamespace"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#variable-batterystatemsg","text":"sensor_msgs::BatteryState batteryStateMsg; Battery state ROS message.","title":"variable batteryStateMsg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1LinearBatteryROSPlugin/#variable-updatetimer","text":"ros::Timer updateTimer; Connection for callbacks on update world. Updated on 2022-11-24 at 19:19:33 +0000","title":"variable updateTimer"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/","text":"gazebo::ThrusterManagerROSPlugin Inherits from ModelPlugin Public Functions Name ThrusterManagerROSPlugin () Constrcutor. ~ThrusterManagerROSPlugin () Destructor. void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void Update (const common::UpdateInfo & _info) Update the simulation state. Protected Functions Name void SetThrustReference (const dsor_msgs::Thruster & _msg) Callback for the input topic subscriber. Protected Attributes Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. transport::NodePtr node Gazebo node. event::ConnectionPtr updateConnection Gazebo update event. ros::Subscriber thrusterStackSubscriber Subscriber to the reference signal topic from DSOR stack. std::vector< ros::Publisher > thrustInputPublisher Vector of publishers to the output thrust topic for each thruster (ros) int thrustersNumber : Number of thrusters in vehicle. std::string dsorTopicThrusters : Thrusters topic from DSOR stack. std::vector< double > thrustVector : Vector of thrusters received from DSOR stack Public Functions Documentation function ThrusterManagerROSPlugin ThrusterManagerROSPlugin() Constrcutor. function ~ThrusterManagerROSPlugin ~ThrusterManagerROSPlugin() Destructor. function Load void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function Update void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function SetThrustReference void SetThrustReference( const dsor_msgs::Thruster & _msg ) Callback for the input topic subscriber. Protected Attributes Documentation variable rosNode boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle. variable node transport::NodePtr node; Gazebo node. variable updateConnection event::ConnectionPtr updateConnection; Gazebo update event. variable thrusterStackSubscriber ros::Subscriber thrusterStackSubscriber; Subscriber to the reference signal topic from DSOR stack. variable thrustInputPublisher std::vector< ros::Publisher > thrustInputPublisher; Vector of publishers to the output thrust topic for each thruster (ros) variable thrustersNumber int thrustersNumber; : Number of thrusters in vehicle. variable dsorTopicThrusters std::string dsorTopicThrusters; : Thrusters topic from DSOR stack. variable thrustVector std::vector< double > thrustVector; : Vector of thrusters received from DSOR stack Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo::ThrusterManagerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#gazebothrustermanagerrosplugin","text":"Inherits from ModelPlugin","title":"gazebo::ThrusterManagerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#public-functions","text":"Name ThrusterManagerROSPlugin () Constrcutor. ~ThrusterManagerROSPlugin () Destructor. void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void Update (const common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#protected-functions","text":"Name void SetThrustReference (const dsor_msgs::Thruster & _msg) Callback for the input topic subscriber.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#protected-attributes","text":"Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. transport::NodePtr node Gazebo node. event::ConnectionPtr updateConnection Gazebo update event. ros::Subscriber thrusterStackSubscriber Subscriber to the reference signal topic from DSOR stack. std::vector< ros::Publisher > thrustInputPublisher Vector of publishers to the output thrust topic for each thruster (ros) int thrustersNumber : Number of thrusters in vehicle. std::string dsorTopicThrusters : Thrusters topic from DSOR stack. std::vector< double > thrustVector : Vector of thrusters received from DSOR stack","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#function-thrustermanagerrosplugin","text":"ThrusterManagerROSPlugin() Constrcutor.","title":"function ThrusterManagerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#function-thrustermanagerrosplugin_1","text":"~ThrusterManagerROSPlugin() Destructor.","title":"function ~ThrusterManagerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#function-load","text":"void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#function-update","text":"void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#function-setthrustreference","text":"void SetThrustReference( const dsor_msgs::Thruster & _msg ) Callback for the input topic subscriber.","title":"function SetThrustReference"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-rosnode","text":"boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle.","title":"variable rosNode"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-node","text":"transport::NodePtr node; Gazebo node.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Gazebo update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-thrusterstacksubscriber","text":"ros::Subscriber thrusterStackSubscriber; Subscriber to the reference signal topic from DSOR stack.","title":"variable thrusterStackSubscriber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-thrustinputpublisher","text":"std::vector< ros::Publisher > thrustInputPublisher; Vector of publishers to the output thrust topic for each thruster (ros)","title":"variable thrustInputPublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-thrustersnumber","text":"int thrustersNumber; : Number of thrusters in vehicle.","title":"variable thrustersNumber"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-dsortopicthrusters","text":"std::string dsorTopicThrusters; : Thrusters topic from DSOR stack.","title":"variable dsorTopicThrusters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classgazebo_1_1ThrusterManagerROSPlugin/#variable-thrustvector","text":"std::vector< double > thrustVector; : Vector of thrusters received from DSOR stack Updated on 2022-11-24 at 19:19:33 +0000","title":"variable thrustVector"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/","text":"test_default_fossen_vehicle::TestDefaultFossenVehicle Inherits from TestCase Public Functions Name def test_get_model_parameters (self self) def test_set_fluid_density (self self) def test_volume_offset (self self) def test_added_mass_scaling (self self) def test_damping_scaling (self self) def test_volume_scaling (self self) def test_added_mass_offset (self self) def test_linear_damping_offset (self self) def test_linear_forward_speed_damping_offset (self self) def test_linear_forward_speed_damping_offset (self self) Public Functions Documentation function test_get_model_parameters def test_get_model_parameters( self self ) function test_set_fluid_density def test_set_fluid_density( self self ) function test_volume_offset def test_volume_offset( self self ) function test_added_mass_scaling def test_added_mass_scaling( self self ) function test_damping_scaling def test_damping_scaling( self self ) function test_volume_scaling def test_volume_scaling( self self ) function test_added_mass_offset def test_added_mass_offset( self self ) function test_linear_damping_offset def test_linear_damping_offset( self self ) function test_linear_forward_speed_damping_offset def test_linear_forward_speed_damping_offset( self self ) function test_linear_forward_speed_damping_offset def test_linear_forward_speed_damping_offset( self self ) Updated on 2022-11-24 at 19:19:33 +0000","title":"test_default_fossen_vehicle::TestDefaultFossenVehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#test_default_fossen_vehicletestdefaultfossenvehicle","text":"Inherits from TestCase","title":"test_default_fossen_vehicle::TestDefaultFossenVehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#public-functions","text":"Name def test_get_model_parameters (self self) def test_set_fluid_density (self self) def test_volume_offset (self self) def test_added_mass_scaling (self self) def test_damping_scaling (self self) def test_volume_scaling (self self) def test_added_mass_offset (self self) def test_linear_damping_offset (self self) def test_linear_forward_speed_damping_offset (self self) def test_linear_forward_speed_damping_offset (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_get_model_parameters","text":"def test_get_model_parameters( self self )","title":"function test_get_model_parameters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_set_fluid_density","text":"def test_set_fluid_density( self self )","title":"function test_set_fluid_density"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_volume_offset","text":"def test_volume_offset( self self )","title":"function test_volume_offset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_added_mass_scaling","text":"def test_added_mass_scaling( self self )","title":"function test_added_mass_scaling"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_damping_scaling","text":"def test_damping_scaling( self self )","title":"function test_damping_scaling"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_volume_scaling","text":"def test_volume_scaling( self self )","title":"function test_volume_scaling"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_added_mass_offset","text":"def test_added_mass_offset( self self )","title":"function test_added_mass_offset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_linear_damping_offset","text":"def test_linear_damping_offset( self self )","title":"function test_linear_damping_offset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_linear_forward_speed_damping_offset","text":"def test_linear_forward_speed_damping_offset( self self )","title":"function test_linear_forward_speed_damping_offset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__default__fossen__vehicle_1_1TestDefaultFossenVehicle/#function-test_linear_forward_speed_damping_offset_1","text":"def test_linear_forward_speed_damping_offset( self self ) Updated on 2022-11-24 at 19:19:33 +0000","title":"function test_linear_forward_speed_damping_offset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/","text":"test_sphere_vehicle::TestSphereVehicle Inherits from TestCase Public Functions Name def test_get_model_parameters (self self) def test_added_mass_coefs (self self) def test_nonlinear_damping_coefs (self self) Public Functions Documentation function test_get_model_parameters def test_get_model_parameters( self self ) function test_added_mass_coefs def test_added_mass_coefs( self self ) function test_nonlinear_damping_coefs def test_nonlinear_damping_coefs( self self ) Updated on 2022-11-24 at 19:19:33 +0000","title":"test_sphere_vehicle::TestSphereVehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#test_sphere_vehicletestspherevehicle","text":"Inherits from TestCase","title":"test_sphere_vehicle::TestSphereVehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#public-functions","text":"Name def test_get_model_parameters (self self) def test_added_mass_coefs (self self) def test_nonlinear_damping_coefs (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#function-test_get_model_parameters","text":"def test_get_model_parameters( self self )","title":"function test_get_model_parameters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#function-test_added_mass_coefs","text":"def test_added_mass_coefs( self self )","title":"function test_added_mass_coefs"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__sphere__vehicle_1_1TestSphereVehicle/#function-test_nonlinear_damping_coefs","text":"def test_nonlinear_damping_coefs( self self ) Updated on 2022-11-24 at 19:19:33 +0000","title":"function test_nonlinear_damping_coefs"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/","text":"test_thrusters::TestThrusters Inherits from TestCase Public Functions Name def init (self self, * args) def test_input_output_topics_exist (self self) def test_convertion_fcn_parameters (self self) def test_change_thruster_state (self self) def test_change_thrust_efficiency (self self) def test_change_dyn_state_efficiency (self self) Public Attributes Name thruster_input_pub Public Functions Documentation function init def __init__( self self, * args ) function test_input_output_topics_exist def test_input_output_topics_exist( self self ) function test_convertion_fcn_parameters def test_convertion_fcn_parameters( self self ) function test_change_thruster_state def test_change_thruster_state( self self ) function test_change_thrust_efficiency def test_change_thrust_efficiency( self self ) function test_change_dyn_state_efficiency def test_change_dyn_state_efficiency( self self ) Public Attributes Documentation variable thruster_input_pub thruster_input_pub; Updated on 2022-11-24 at 19:19:33 +0000","title":"test_thrusters::TestThrusters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#test_thrusterstestthrusters","text":"Inherits from TestCase","title":"test_thrusters::TestThrusters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#public-functions","text":"Name def init (self self, * args) def test_input_output_topics_exist (self self) def test_convertion_fcn_parameters (self self) def test_change_thruster_state (self self) def test_change_thrust_efficiency (self self) def test_change_dyn_state_efficiency (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#public-attributes","text":"Name thruster_input_pub","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-init","text":"def __init__( self self, * args )","title":"function init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-test_input_output_topics_exist","text":"def test_input_output_topics_exist( self self )","title":"function test_input_output_topics_exist"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-test_convertion_fcn_parameters","text":"def test_convertion_fcn_parameters( self self )","title":"function test_convertion_fcn_parameters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-test_change_thruster_state","text":"def test_change_thruster_state( self self )","title":"function test_change_thruster_state"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-test_change_thrust_efficiency","text":"def test_change_thrust_efficiency( self self )","title":"function test_change_thrust_efficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#function-test_change_dyn_state_efficiency","text":"def test_change_dyn_state_efficiency( self self )","title":"function test_change_dyn_state_efficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classtest__thrusters_1_1TestThrusters/#variable-thruster_input_pub","text":"thruster_input_pub; Updated on 2022-11-24 at 19:19:33 +0000","title":"variable thruster_input_pub"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/","text":"uuv_simulator_ros::FinROSPlugin Inherits from FinPlugin Public Functions Name FinROSPlugin () Constrcutor. ~FinROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void RosPublishStates () Publish state via ROS. void SetReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point. bool GetLiftDragParams (uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req, uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res) Return the list of paramaters of the lift and drag model. gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). virtual void Init () Initialize Module. virtual void Reset () Reset Module. Public Functions Documentation function FinROSPlugin FinROSPlugin() Constrcutor. function ~FinROSPlugin ~FinROSPlugin() Destructor. function Load void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function RosPublishStates void RosPublishStates() Publish state via ROS. function SetReference void SetReference( const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg ) Set new set point. function GetLiftDragParams bool GetLiftDragParams( uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req, uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res ) Return the list of paramaters of the lift and drag model. function GetRosPublishPeriod gazebo::common::Time GetRosPublishPeriod() Return the ROS publish period. function SetRosPublishRate void SetRosPublishRate( double _hz ) Set the ROS publish frequency (Hz). function Init virtual void Init() Initialize Module. function Reset virtual void Reset() Reset Module. Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_simulator_ros::FinROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#uuv_simulator_rosfinrosplugin","text":"Inherits from FinPlugin","title":"uuv_simulator_ros::FinROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#public-functions","text":"Name FinROSPlugin () Constrcutor. ~FinROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void RosPublishStates () Publish state via ROS. void SetReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point. bool GetLiftDragParams (uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req, uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res) Return the list of paramaters of the lift and drag model. gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). virtual void Init () Initialize Module. virtual void Reset () Reset Module.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-finrosplugin","text":"FinROSPlugin() Constrcutor.","title":"function FinROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-finrosplugin_1","text":"~FinROSPlugin() Destructor.","title":"function ~FinROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-load","text":"void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-rospublishstates","text":"void RosPublishStates() Publish state via ROS.","title":"function RosPublishStates"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-setreference","text":"void SetReference( const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg ) Set new set point.","title":"function SetReference"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-getliftdragparams","text":"bool GetLiftDragParams( uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req, uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res ) Return the list of paramaters of the lift and drag model.","title":"function GetLiftDragParams"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-getrospublishperiod","text":"gazebo::common::Time GetRosPublishPeriod() Return the ROS publish period.","title":"function GetRosPublishPeriod"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-setrospublishrate","text":"void SetRosPublishRate( double _hz ) Set the ROS publish frequency (Hz).","title":"function SetRosPublishRate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-init","text":"virtual void Init() Initialize Module.","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1FinROSPlugin/#function-reset","text":"virtual void Reset() Reset Module. Updated on 2022-11-24 at 19:19:33 +0000","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/","text":"uuv_simulator_ros::JointStatePublisher Inherits from ModelPlugin Public Functions Name JointStatePublisher () ~JointStatePublisher () void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) void OnUpdate (const gazebo::common::UpdateInfo & _info) void PublishJointStates () Public Functions Documentation function JointStatePublisher JointStatePublisher() function ~JointStatePublisher ~JointStatePublisher() function Load void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) function OnUpdate void OnUpdate( const gazebo::common::UpdateInfo & _info ) function PublishJointStates void PublishJointStates() Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_simulator_ros::JointStatePublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#uuv_simulator_rosjointstatepublisher","text":"Inherits from ModelPlugin","title":"uuv_simulator_ros::JointStatePublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#public-functions","text":"Name JointStatePublisher () ~JointStatePublisher () void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) void OnUpdate (const gazebo::common::UpdateInfo & _info) void PublishJointStates ()","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#function-jointstatepublisher","text":"JointStatePublisher()","title":"function JointStatePublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#function-jointstatepublisher_1","text":"~JointStatePublisher()","title":"function ~JointStatePublisher"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#function-load","text":"void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#function-onupdate","text":"void OnUpdate( const gazebo::common::UpdateInfo & _info )","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1JointStatePublisher/#function-publishjointstates","text":"void PublishJointStates() Updated on 2022-11-24 at 19:19:33 +0000","title":"function PublishJointStates"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/","text":"uuv_simulator_ros::ThrusterROSPlugin Inherits from ThrusterPlugin Public Functions Name ThrusterROSPlugin () Constrcutor. ~ThrusterROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void RosPublishStates () Publish thruster state via ROS. void SetThrustReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point (desired thrust [N]) for thruster. gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). virtual void Init () Initialize Module. virtual void Reset () Reset Module. bool SetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the thrust efficiency factor. bool GetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the thrust efficiency factor. bool SetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the dynamic state efficiency factor. bool GetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the dynamic state efficiency factor. bool SetThrusterState (uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res) Turn thruster on/off. bool GetThrusterState (uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res) Get thruster state. bool GetThrusterConversionFcn (uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res) Get thruster conversion function parameters. Public Functions Documentation function ThrusterROSPlugin ThrusterROSPlugin() Constrcutor. function ~ThrusterROSPlugin ~ThrusterROSPlugin() Destructor. function Load void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function RosPublishStates void RosPublishStates() Publish thruster state via ROS. function SetThrustReference void SetThrustReference( const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg ) Set new set point (desired thrust [N]) for thruster. function GetRosPublishPeriod gazebo::common::Time GetRosPublishPeriod() Return the ROS publish period. function SetRosPublishRate void SetRosPublishRate( double _hz ) Set the ROS publish frequency (Hz). function Init virtual void Init() Initialize Module. function Reset virtual void Reset() Reset Module. function SetThrustForceEfficiency bool SetThrustForceEfficiency( uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res ) Set the thrust efficiency factor. function GetThrustForceEfficiency bool GetThrustForceEfficiency( uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res ) Get the thrust efficiency factor. function SetDynamicStateEfficiency bool SetDynamicStateEfficiency( uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res ) Set the dynamic state efficiency factor. function GetDynamicStateEfficiency bool GetDynamicStateEfficiency( uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res ) Get the dynamic state efficiency factor. function SetThrusterState bool SetThrusterState( uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res ) Turn thruster on/off. function GetThrusterState bool GetThrusterState( uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res ) Get thruster state. function GetThrusterConversionFcn bool GetThrusterConversionFcn( uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res ) Get thruster conversion function parameters. Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_simulator_ros::ThrusterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#uuv_simulator_rosthrusterrosplugin","text":"Inherits from ThrusterPlugin","title":"uuv_simulator_ros::ThrusterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#public-functions","text":"Name ThrusterROSPlugin () Constrcutor. ~ThrusterROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. void RosPublishStates () Publish thruster state via ROS. void SetThrustReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point (desired thrust [N]) for thruster. gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). virtual void Init () Initialize Module. virtual void Reset () Reset Module. bool SetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the thrust efficiency factor. bool GetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the thrust efficiency factor. bool SetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the dynamic state efficiency factor. bool GetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the dynamic state efficiency factor. bool SetThrusterState (uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res) Turn thruster on/off. bool GetThrusterState (uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res) Get thruster state. bool GetThrusterConversionFcn (uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res) Get thruster conversion function parameters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-thrusterrosplugin","text":"ThrusterROSPlugin() Constrcutor.","title":"function ThrusterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-thrusterrosplugin_1","text":"~ThrusterROSPlugin() Destructor.","title":"function ~ThrusterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-load","text":"void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-rospublishstates","text":"void RosPublishStates() Publish thruster state via ROS.","title":"function RosPublishStates"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-setthrustreference","text":"void SetThrustReference( const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg ) Set new set point (desired thrust [N]) for thruster.","title":"function SetThrustReference"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-getrospublishperiod","text":"gazebo::common::Time GetRosPublishPeriod() Return the ROS publish period.","title":"function GetRosPublishPeriod"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-setrospublishrate","text":"void SetRosPublishRate( double _hz ) Set the ROS publish frequency (Hz).","title":"function SetRosPublishRate"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-init","text":"virtual void Init() Initialize Module.","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-reset","text":"virtual void Reset() Reset Module.","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-setthrustforceefficiency","text":"bool SetThrustForceEfficiency( uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res ) Set the thrust efficiency factor.","title":"function SetThrustForceEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-getthrustforceefficiency","text":"bool GetThrustForceEfficiency( uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res ) Get the thrust efficiency factor.","title":"function GetThrustForceEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-setdynamicstateefficiency","text":"bool SetDynamicStateEfficiency( uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res ) Set the dynamic state efficiency factor.","title":"function SetDynamicStateEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-getdynamicstateefficiency","text":"bool GetDynamicStateEfficiency( uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res ) Get the dynamic state efficiency factor.","title":"function GetDynamicStateEfficiency"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-setthrusterstate","text":"bool SetThrusterState( uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res ) Turn thruster on/off.","title":"function SetThrusterState"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-getthrusterstate","text":"bool GetThrusterState( uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res ) Get thruster state.","title":"function GetThrusterState"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1ThrusterROSPlugin/#function-getthrusterconversionfcn","text":"bool GetThrusterConversionFcn( uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req, uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res ) Get thruster conversion function parameters. Updated on 2022-11-24 at 19:19:33 +0000","title":"function GetThrusterConversionFcn"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/","text":"uuv_simulator_ros::UnderwaterObjectROSPlugin Inherits from UnderwaterObjectPlugin Public Functions Name UnderwaterObjectROSPlugin () Constructor. virtual ~UnderwaterObjectROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. virtual void Init () Initialize Module. virtual void Reset () Reset Module. virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. void UpdateLocalCurrentVelocity (const geometry_msgs::Vector3::ConstPtr & _msg) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. bool SetUseGlobalCurrentVel (uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req, uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res) Set flag to use the global current velocity topic input. bool GetModelProperties (uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req, uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. bool SetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the scaling factor for the added-mass matrix. bool GetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return current scaling factor for the added-mass matrix. bool SetScalingDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set a scaling factor for the overall damping matrix. bool GetScalingDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the scaling factor for the overall damping matrix. bool SetScalingVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set scaling factor for the model's volume used for buoyancy force computation. bool GetScalingVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get scaling factor for the model's volume used for buoyancy force computation. bool SetFluidDensity (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set new fluid density (this will alter the value for the buoyancy force) bool GetFluidDensity (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get current value for the fluid density. bool SetOffsetVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set offset factor for the model's volume (this will alter the value for the buoyancy force) bool GetOffsetVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the model's volume. bool SetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the added-mass matrix. bool GetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the added-mass matrix. bool SetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear damping matrix. bool GetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear damping matrix. bool SetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear forward speed damping matrix. bool GetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear forward speed damping matrix. bool SetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the nonlinear damping matrix. bool GetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the nonlinear damping matrix. Protected Functions Name virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. virtual void GenWrenchMsg (ignition::math::Vector3d _force, ignition::math::Vector3d _torque, geometry_msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. virtual void PublishCurrentVelocityMarker () Publishes the current velocity marker. virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) Public Functions Documentation function UnderwaterObjectROSPlugin UnderwaterObjectROSPlugin() Constructor. function ~UnderwaterObjectROSPlugin virtual ~UnderwaterObjectROSPlugin() Destructor. function Load void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function Init virtual void Init() Initialize Module. function Reset virtual void Reset() Reset Module. function Update virtual void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. function UpdateLocalCurrentVelocity void UpdateLocalCurrentVelocity( const geometry_msgs::Vector3::ConstPtr & _msg ) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. function SetUseGlobalCurrentVel bool SetUseGlobalCurrentVel( uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req, uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res ) Set flag to use the global current velocity topic input. function GetModelProperties bool GetModelProperties( uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req, uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res ) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. function SetScalingAddedMass bool SetScalingAddedMass( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the scaling factor for the added-mass matrix. function GetScalingAddedMass bool GetScalingAddedMass( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return current scaling factor for the added-mass matrix. function SetScalingDamping bool SetScalingDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set a scaling factor for the overall damping matrix. function GetScalingDamping bool GetScalingDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the scaling factor for the overall damping matrix. function SetScalingVolume bool SetScalingVolume( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set scaling factor for the model's volume used for buoyancy force computation. function GetScalingVolume bool GetScalingVolume( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Get scaling factor for the model's volume used for buoyancy force computation. function SetFluidDensity bool SetFluidDensity( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set new fluid density (this will alter the value for the buoyancy force) function GetFluidDensity bool GetFluidDensity( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Get current value for the fluid density. function SetOffsetVolume bool SetOffsetVolume( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set offset factor for the model's volume (this will alter the value for the buoyancy force) function GetOffsetVolume bool GetOffsetVolume( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the model's volume. function SetOffsetAddedMass bool SetOffsetAddedMass( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the added-mass matrix. function GetOffsetAddedMass bool GetOffsetAddedMass( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the added-mass matrix. function SetOffsetLinearDamping bool SetOffsetLinearDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the linear damping matrix. function GetOffsetLinearDamping bool GetOffsetLinearDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the linear damping matrix. function SetOffsetLinearForwardSpeedDamping bool SetOffsetLinearForwardSpeedDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the linear forward speed damping matrix. function GetOffsetLinearForwardSpeedDamping bool GetOffsetLinearForwardSpeedDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the linear forward speed damping matrix. function SetOffsetNonLinearDamping bool SetOffsetNonLinearDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the nonlinear damping matrix. function GetOffsetNonLinearDamping bool GetOffsetNonLinearDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the nonlinear damping matrix. Protected Functions Documentation function PublishRestoringForce virtual void PublishRestoringForce( gazebo::physics::LinkPtr _link ) Publish restoring force. Parameters : _link Pointer to the link where the force information will be extracted from function PublishHydrodynamicWrenches virtual void PublishHydrodynamicWrenches( gazebo::physics::LinkPtr _link ) Publish hydrodynamic wrenches. Parameters : _link Pointer to the link where the force information will be extracted from function GenWrenchMsg virtual void GenWrenchMsg( ignition::math::Vector3d _force, ignition::math::Vector3d _torque, geometry_msgs::WrenchStamped & _output ) Returns the wrench message for debugging topics. Parameters : _force Force vector _torque Torque vector _output Stamped wrench message to be updated function InitDebug virtual void InitDebug( gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro ) Sets the topics used for publishing the intermediate data during the simulation. Parameters : _link Pointer to the link _hydro Pointer to the hydrodynamic model function PublishCurrentVelocityMarker virtual void PublishCurrentVelocityMarker() Publishes the current velocity marker. function PublishIsSubmerged virtual void PublishIsSubmerged() Publishes the state of the vehicle (is submerged) Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_simulator_ros::UnderwaterObjectROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#uuv_simulator_rosunderwaterobjectrosplugin","text":"Inherits from UnderwaterObjectPlugin","title":"uuv_simulator_ros::UnderwaterObjectROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#public-functions","text":"Name UnderwaterObjectROSPlugin () Constructor. virtual ~UnderwaterObjectROSPlugin () Destructor. void Load (gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. virtual void Init () Initialize Module. virtual void Reset () Reset Module. virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. void UpdateLocalCurrentVelocity (const geometry_msgs::Vector3::ConstPtr & _msg) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. bool SetUseGlobalCurrentVel (uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req, uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res) Set flag to use the global current velocity topic input. bool GetModelProperties (uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req, uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. bool SetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the scaling factor for the added-mass matrix. bool GetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return current scaling factor for the added-mass matrix. bool SetScalingDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set a scaling factor for the overall damping matrix. bool GetScalingDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the scaling factor for the overall damping matrix. bool SetScalingVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set scaling factor for the model's volume used for buoyancy force computation. bool GetScalingVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get scaling factor for the model's volume used for buoyancy force computation. bool SetFluidDensity (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set new fluid density (this will alter the value for the buoyancy force) bool GetFluidDensity (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get current value for the fluid density. bool SetOffsetVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set offset factor for the model's volume (this will alter the value for the buoyancy force) bool GetOffsetVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the model's volume. bool SetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the added-mass matrix. bool GetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the added-mass matrix. bool SetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear damping matrix. bool GetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear damping matrix. bool SetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear forward speed damping matrix. bool GetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear forward speed damping matrix. bool SetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the nonlinear damping matrix. bool GetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the nonlinear damping matrix.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#protected-functions","text":"Name virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. virtual void GenWrenchMsg (ignition::math::Vector3d _force, ignition::math::Vector3d _torque, geometry_msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. virtual void PublishCurrentVelocityMarker () Publishes the current velocity marker. virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged)","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-underwaterobjectrosplugin","text":"UnderwaterObjectROSPlugin() Constructor.","title":"function UnderwaterObjectROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-underwaterobjectrosplugin_1","text":"virtual ~UnderwaterObjectROSPlugin() Destructor.","title":"function ~UnderwaterObjectROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-load","text":"void Load( gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-init","text":"virtual void Init() Initialize Module.","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-reset","text":"virtual void Reset() Reset Module.","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-update","text":"virtual void Update( const gazebo::common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-updatelocalcurrentvelocity","text":"void UpdateLocalCurrentVelocity( const geometry_msgs::Vector3::ConstPtr & _msg ) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false.","title":"function UpdateLocalCurrentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setuseglobalcurrentvel","text":"bool SetUseGlobalCurrentVel( uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req, uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res ) Set flag to use the global current velocity topic input.","title":"function SetUseGlobalCurrentVel"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getmodelproperties","text":"bool GetModelProperties( uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req, uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res ) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models.","title":"function GetModelProperties"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setscalingaddedmass","text":"bool SetScalingAddedMass( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the scaling factor for the added-mass matrix.","title":"function SetScalingAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getscalingaddedmass","text":"bool GetScalingAddedMass( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return current scaling factor for the added-mass matrix.","title":"function GetScalingAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setscalingdamping","text":"bool SetScalingDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set a scaling factor for the overall damping matrix.","title":"function SetScalingDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getscalingdamping","text":"bool GetScalingDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the scaling factor for the overall damping matrix.","title":"function GetScalingDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setscalingvolume","text":"bool SetScalingVolume( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set scaling factor for the model's volume used for buoyancy force computation.","title":"function SetScalingVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getscalingvolume","text":"bool GetScalingVolume( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Get scaling factor for the model's volume used for buoyancy force computation.","title":"function GetScalingVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setfluiddensity","text":"bool SetFluidDensity( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set new fluid density (this will alter the value for the buoyancy force)","title":"function SetFluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getfluiddensity","text":"bool GetFluidDensity( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Get current value for the fluid density.","title":"function GetFluidDensity"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setoffsetvolume","text":"bool SetOffsetVolume( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set offset factor for the model's volume (this will alter the value for the buoyancy force)","title":"function SetOffsetVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getoffsetvolume","text":"bool GetOffsetVolume( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the model's volume.","title":"function GetOffsetVolume"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setoffsetaddedmass","text":"bool SetOffsetAddedMass( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the added-mass matrix.","title":"function SetOffsetAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getoffsetaddedmass","text":"bool GetOffsetAddedMass( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the added-mass matrix.","title":"function GetOffsetAddedMass"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setoffsetlineardamping","text":"bool SetOffsetLinearDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the linear damping matrix.","title":"function SetOffsetLinearDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getoffsetlineardamping","text":"bool GetOffsetLinearDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the linear damping matrix.","title":"function GetOffsetLinearDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setoffsetlinearforwardspeeddamping","text":"bool SetOffsetLinearForwardSpeedDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the linear forward speed damping matrix.","title":"function SetOffsetLinearForwardSpeedDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getoffsetlinearforwardspeeddamping","text":"bool GetOffsetLinearForwardSpeedDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the linear forward speed damping matrix.","title":"function GetOffsetLinearForwardSpeedDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-setoffsetnonlineardamping","text":"bool SetOffsetNonLinearDamping( uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res ) Set the offset factor for the nonlinear damping matrix.","title":"function SetOffsetNonLinearDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-getoffsetnonlineardamping","text":"bool GetOffsetNonLinearDamping( uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req, uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res ) Return the offset factor for the nonlinear damping matrix.","title":"function GetOffsetNonLinearDamping"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-publishrestoringforce","text":"virtual void PublishRestoringForce( gazebo::physics::LinkPtr _link ) Publish restoring force. Parameters : _link Pointer to the link where the force information will be extracted from","title":"function PublishRestoringForce"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-publishhydrodynamicwrenches","text":"virtual void PublishHydrodynamicWrenches( gazebo::physics::LinkPtr _link ) Publish hydrodynamic wrenches. Parameters : _link Pointer to the link where the force information will be extracted from","title":"function PublishHydrodynamicWrenches"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-genwrenchmsg","text":"virtual void GenWrenchMsg( ignition::math::Vector3d _force, ignition::math::Vector3d _torque, geometry_msgs::WrenchStamped & _output ) Returns the wrench message for debugging topics. Parameters : _force Force vector _torque Torque vector _output Stamped wrench message to be updated","title":"function GenWrenchMsg"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-initdebug","text":"virtual void InitDebug( gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro ) Sets the topics used for publishing the intermediate data during the simulation. Parameters : _link Pointer to the link _hydro Pointer to the hydrodynamic model","title":"function InitDebug"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-publishcurrentvelocitymarker","text":"virtual void PublishCurrentVelocityMarker() Publishes the current velocity marker.","title":"function PublishCurrentVelocityMarker"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterObjectROSPlugin/#function-publishissubmerged","text":"virtual void PublishIsSubmerged() Publishes the state of the vehicle (is submerged) Updated on 2022-11-24 at 19:19:33 +0000","title":"function PublishIsSubmerged"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:33 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:33 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:33 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:33 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/","text":"Namespaces namespace gazebo namespace test_default_fossen_vehicle namespace test_sphere_vehicle namespace test_thrusters namespace uuv_gazebo_ros_plugins_msgs::srv namespace uuv_simulator_ros Updated on 2022-11-24 at 19:19:33 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/#namespaces","text":"namespace gazebo namespace test_default_fossen_vehicle namespace test_sphere_vehicle namespace test_thrusters namespace uuv_gazebo_ros_plugins_msgs::srv namespace uuv_simulator_ros Updated on 2022-11-24 at 19:19:33 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/","text":"gazebo More... Classes Name class gazebo::AccelerationsTestPlugin Gazebo model plugin class for underwater objects. class gazebo::CustomBatteryConsumerROSPlugin class gazebo::LinearBatteryROSPlugin class gazebo::ThrusterManagerROSPlugin Functions Name geometry_msgs::Accel accelFromEigen (const Eigen::Vector6d & acc) Eigen::Matrix3d Matrix3ToEigen (const ignition::math::Matrix3d & m) Detailed Description Authors: Andre Potes ( andre.potes@tecnico.ulisboa.pt ) Marcelo Jacinto ( marcelo.jacinto@tecnico.ulisboa.pt ) Maintained by: Andre Potes ( andre.potes@tecnico.ulisboa.pt ) Last Update: 14/12/2021 License: MIT File: ThrusterManager.hpp Brief: Defines a thruster manager ROS plugin that translates the desired forces for the vehicle thrusters, from the DSOR stack to the UUV simulator Functions Documentation function accelFromEigen geometry_msgs::Accel accelFromEigen( const Eigen::Vector6d & acc ) function Matrix3ToEigen Eigen::Matrix3d Matrix3ToEigen( const ignition::math::Matrix3d & m ) Updated on 2022-11-24 at 19:19:33 +0000","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#gazebo","text":"More...","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#classes","text":"Name class gazebo::AccelerationsTestPlugin Gazebo model plugin class for underwater objects. class gazebo::CustomBatteryConsumerROSPlugin class gazebo::LinearBatteryROSPlugin class gazebo::ThrusterManagerROSPlugin","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#functions","text":"Name geometry_msgs::Accel accelFromEigen (const Eigen::Vector6d & acc) Eigen::Matrix3d Matrix3ToEigen (const ignition::math::Matrix3d & m)","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#detailed-description","text":"Authors: Andre Potes ( andre.potes@tecnico.ulisboa.pt ) Marcelo Jacinto ( marcelo.jacinto@tecnico.ulisboa.pt ) Maintained by: Andre Potes ( andre.potes@tecnico.ulisboa.pt ) Last Update: 14/12/2021 License: MIT File: ThrusterManager.hpp Brief: Defines a thruster manager ROS plugin that translates the desired forces for the vehicle thrusters, from the DSOR stack to the UUV simulator","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#function-accelfromeigen","text":"geometry_msgs::Accel accelFromEigen( const Eigen::Vector6d & acc )","title":"function accelFromEigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacegazebo/#function-matrix3toeigen","text":"Eigen::Matrix3d Matrix3ToEigen( const ignition::math::Matrix3d & m ) Updated on 2022-11-24 at 19:19:33 +0000","title":"function Matrix3ToEigen"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/","text":"test_default_fossen_vehicle Classes Name class test_default_fossen_vehicle::TestDefaultFossenVehicle Attributes Name string PKG string NAME Attributes Documentation variable PKG string PKG = 'uuv_gazebo_ros_plugins'; variable NAME string NAME = 'test_default_fossen_vehicle'; Updated on 2022-11-24 at 19:19:33 +0000","title":"test_default_fossen_vehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#test_default_fossen_vehicle","text":"","title":"test_default_fossen_vehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#classes","text":"Name class test_default_fossen_vehicle::TestDefaultFossenVehicle","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#attributes","text":"Name string PKG string NAME","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#variable-pkg","text":"string PKG = 'uuv_gazebo_ros_plugins';","title":"variable PKG"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__default__fossen__vehicle/#variable-name","text":"string NAME = 'test_default_fossen_vehicle'; Updated on 2022-11-24 at 19:19:33 +0000","title":"variable NAME"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/","text":"test_sphere_vehicle Classes Name class test_sphere_vehicle::TestSphereVehicle Attributes Name string PKG string NAME float RADIUS float CD Attributes Documentation variable PKG string PKG = 'uuv_gazebo_ros_plugins'; variable NAME string NAME = 'test_sphere_vehicle'; variable RADIUS float RADIUS = 0.1; variable CD float CD = 0.5; Updated on 2022-11-24 at 19:19:33 +0000","title":"test_sphere_vehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#test_sphere_vehicle","text":"","title":"test_sphere_vehicle"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#classes","text":"Name class test_sphere_vehicle::TestSphereVehicle","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#attributes","text":"Name string PKG string NAME float RADIUS float CD","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#variable-pkg","text":"string PKG = 'uuv_gazebo_ros_plugins';","title":"variable PKG"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#variable-name","text":"string NAME = 'test_sphere_vehicle';","title":"variable NAME"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#variable-radius","text":"float RADIUS = 0.1;","title":"variable RADIUS"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__sphere__vehicle/#variable-cd","text":"float CD = 0.5; Updated on 2022-11-24 at 19:19:33 +0000","title":"variable CD"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/","text":"test_thrusters Classes Name class test_thrusters::TestThrusters Attributes Name string PKG string NAME Attributes Documentation variable PKG string PKG = 'uuv_gazebo_ros_plugins'; variable NAME string NAME = 'test_thrusters'; Updated on 2022-11-24 at 19:19:33 +0000","title":"test_thrusters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#test_thrusters","text":"","title":"test_thrusters"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#classes","text":"Name class test_thrusters::TestThrusters","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#attributes","text":"Name string PKG string NAME","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#variable-pkg","text":"string PKG = 'uuv_gazebo_ros_plugins';","title":"variable PKG"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespacetest__thrusters/#variable-name","text":"string NAME = 'test_thrusters'; Updated on 2022-11-24 at 19:19:33 +0000","title":"variable NAME"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespaceuuv__gazebo__ros__plugins__msgs_1_1srv/","text":"uuv_gazebo_ros_plugins_msgs::srv Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_gazebo_ros_plugins_msgs::srv"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespaceuuv__gazebo__ros__plugins__msgs_1_1srv/#uuv_gazebo_ros_plugins_msgssrv","text":"Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_gazebo_ros_plugins_msgs::srv"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespaceuuv__simulator__ros/","text":"uuv_simulator_ros Classes Name class uuv_simulator_ros::FinROSPlugin class uuv_simulator_ros::JointStatePublisher class uuv_simulator_ros::ThrusterROSPlugin class uuv_simulator_ros::UnderwaterObjectROSPlugin Updated on 2022-11-24 at 19:19:33 +0000","title":"uuv_simulator_ros"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespaceuuv__simulator__ros/#uuv_simulator_ros","text":"","title":"uuv_simulator_ros"},{"location":"api/markdown/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/Namespaces/namespaceuuv__simulator__ros/#classes","text":"Name class uuv_simulator_ros::FinROSPlugin class uuv_simulator_ros::JointStatePublisher class uuv_simulator_ros::ThrusterROSPlugin class uuv_simulator_ros::UnderwaterObjectROSPlugin Updated on 2022-11-24 at 19:19:33 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/","text":"Classes class FirstOrderFilter namespace cv namespace gazebo class AltimeterROSPlugin class CPCROSPlugin class DVLROSPlugin class GPSROSPlugin class GazeboRosImageSonar class GstCameraPlugin struct IMUParameters IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . class IMUROSPlugin struct MagnetometerParameters class MagnetometerROSPlugin class PoseGTROSPlugin class ROSBaseModelPlugin class ROSBasePlugin class ROSBaseSensorPlugin class RPTROSPlugin class SubseaPressureROSPlugin class UnderwaterCameraROSPlugin class modemPlugin class usblPlugin namespace std namespace test_urdf_files class TestURDFFiles Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/#classes","text":"class FirstOrderFilter namespace cv namespace gazebo class AltimeterROSPlugin class CPCROSPlugin class DVLROSPlugin class GPSROSPlugin class GazeboRosImageSonar class GstCameraPlugin struct IMUParameters IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . class IMUROSPlugin struct MagnetometerParameters class MagnetometerROSPlugin class PoseGTROSPlugin class ROSBaseModelPlugin class ROSBasePlugin class ROSBaseSensorPlugin class RPTROSPlugin class SubseaPressureROSPlugin class UnderwaterCameraROSPlugin class modemPlugin class usblPlugin namespace std namespace test_urdf_files class TestURDFFiles Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/","text":"FirstOrderFilter More... Public Functions Name FirstOrderFilter (double timeConstantUp, double timeConstantDown, T initialState) T updateFilter (T inputState, double samplingTime) ~FirstOrderFilter () Protected Attributes Name double timeConstantUp_ double timeConstantDown_ T previousState_ Detailed Description template <typename T > class FirstOrderFilter; Public Functions Documentation function FirstOrderFilter inline FirstOrderFilter( double timeConstantUp, double timeConstantDown, T initialState ) function updateFilter inline T updateFilter( T inputState, double samplingTime ) function ~FirstOrderFilter inline ~FirstOrderFilter() Protected Attributes Documentation variable timeConstantUp_ double timeConstantUp_; variable timeConstantDown_ double timeConstantDown_; variable previousState_ T previousState_; Updated on 2022-11-24 at 19:19:34 +0000","title":"FirstOrderFilter"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#firstorderfilter","text":"More...","title":"FirstOrderFilter"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#public-functions","text":"Name FirstOrderFilter (double timeConstantUp, double timeConstantDown, T initialState) T updateFilter (T inputState, double samplingTime) ~FirstOrderFilter ()","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#protected-attributes","text":"Name double timeConstantUp_ double timeConstantDown_ T previousState_","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#detailed-description","text":"template <typename T > class FirstOrderFilter;","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#function-firstorderfilter","text":"inline FirstOrderFilter( double timeConstantUp, double timeConstantDown, T initialState )","title":"function FirstOrderFilter"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#function-updatefilter","text":"inline T updateFilter( T inputState, double samplingTime )","title":"function updateFilter"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#function-firstorderfilter_1","text":"inline ~FirstOrderFilter()","title":"function ~FirstOrderFilter"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#variable-timeconstantup_","text":"double timeConstantUp_;","title":"variable timeConstantUp_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#variable-timeconstantdown_","text":"double timeConstantDown_;","title":"variable timeConstantDown_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classFirstOrderFilter/#variable-previousstate_","text":"T previousState_; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable previousState_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/","text":"gazebo::AltimeterROSPlugin Inherits from RayPlugin Public Functions Name AltimeterROSPlugin () Constructor. ~AltimeterROSPlugin () Destructor. void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual void OnNewLaserScans () Update the controller. Protected Attributes Name ros::Publisher farolStackAltimeterPub Additional Measurement ROS topic specific for altimeter msgs into farol stack. Public Functions Documentation function AltimeterROSPlugin AltimeterROSPlugin() Constructor. function ~AltimeterROSPlugin ~AltimeterROSPlugin() Destructor. function Load void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load the plugin. Parameters : take in SDF root element Protected Functions Documentation function OnNewLaserScans virtual void OnNewLaserScans() Update the controller. Protected Attributes Documentation variable farolStackAltimeterPub ros::Publisher farolStackAltimeterPub; Additional Measurement ROS topic specific for altimeter msgs into farol stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::AltimeterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#gazeboaltimeterrosplugin","text":"Inherits from RayPlugin","title":"gazebo::AltimeterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#public-functions","text":"Name AltimeterROSPlugin () Constructor. ~AltimeterROSPlugin () Destructor. void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#protected-functions","text":"Name virtual void OnNewLaserScans () Update the controller.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#protected-attributes","text":"Name ros::Publisher farolStackAltimeterPub Additional Measurement ROS topic specific for altimeter msgs into farol stack.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#function-altimeterrosplugin","text":"AltimeterROSPlugin() Constructor.","title":"function AltimeterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#function-altimeterrosplugin_1","text":"~AltimeterROSPlugin() Destructor.","title":"function ~AltimeterROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#function-load","text":"void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load the plugin. Parameters : take in SDF root element","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#function-onnewlaserscans","text":"virtual void OnNewLaserScans() Update the controller.","title":"function OnNewLaserScans"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1AltimeterROSPlugin/#variable-farolstackaltimeterpub","text":"ros::Publisher farolStackAltimeterPub; Additional Measurement ROS topic specific for altimeter msgs into farol stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable farolStackAltimeterPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/","text":"gazebo::CPCROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name CPCROSPlugin () Class constructor. virtual ~CPCROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. virtual void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from simulator. Protected Attributes Name ros::Subscriber particlesSub Input topic for the plume particle point cloud. ros::Publisher salinityPub Output topic for salinity measurements based on the particle concentration. bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. double gamma Gamma velocity parameter for the smoothing function. double gain Sensor gain. double smoothingLength ros::Time lastUpdateTimestamp Last update from the point cloud callback. uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg Output measurement topic. uuv_sensor_ros_plugins_msgs::Salinity salinityMsg Output salinity measurement message. double waterSalinityValue double plumeSalinityValue Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function CPCROSPlugin CPCROSPlugin() Class constructor. function ~CPCROSPlugin virtual ~CPCROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate function OnPlumeParticlesUpdate virtual void OnPlumeParticlesUpdate( const sensor_msgs::PointCloud::ConstPtr & _msg ) Update callback from simulator. Protected Attributes Documentation variable particlesSub ros::Subscriber particlesSub; Input topic for the plume particle point cloud. variable salinityPub ros::Publisher salinityPub; Output topic for salinity measurements based on the particle concentration. variable updatingCloud bool updatingCloud; Flag to ensure the cloud and measurement update don't coincide. variable gamma double gamma; Gamma velocity parameter for the smoothing function. variable gain double gain; Sensor gain. variable smoothingLength double smoothingLength; variable lastUpdateTimestamp ros::Time lastUpdateTimestamp; Last update from the point cloud callback. variable outputMsg uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg; Output measurement topic. variable salinityMsg uuv_sensor_ros_plugins_msgs::Salinity salinityMsg; Output salinity measurement message. variable waterSalinityValue double waterSalinityValue; variable plumeSalinityValue double plumeSalinityValue; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::CPCROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#gazebocpcrosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::CPCROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#public-functions","text":"Name CPCROSPlugin () Class constructor. virtual ~CPCROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. virtual void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from simulator.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#protected-attributes","text":"Name ros::Subscriber particlesSub Input topic for the plume particle point cloud. ros::Publisher salinityPub Output topic for salinity measurements based on the particle concentration. bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. double gamma Gamma velocity parameter for the smoothing function. double gain Sensor gain. double smoothingLength ros::Time lastUpdateTimestamp Last update from the point cloud callback. uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg Output measurement topic. uuv_sensor_ros_plugins_msgs::Salinity salinityMsg Output salinity measurement message. double waterSalinityValue double plumeSalinityValue","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#function-cpcrosplugin","text":"CPCROSPlugin() Class constructor.","title":"function CPCROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#function-cpcrosplugin_1","text":"virtual ~CPCROSPlugin() Class destructor.","title":"function ~CPCROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#function-onplumeparticlesupdate","text":"virtual void OnPlumeParticlesUpdate( const sensor_msgs::PointCloud::ConstPtr & _msg ) Update callback from simulator.","title":"function OnPlumeParticlesUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-particlessub","text":"ros::Subscriber particlesSub; Input topic for the plume particle point cloud.","title":"variable particlesSub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-salinitypub","text":"ros::Publisher salinityPub; Output topic for salinity measurements based on the particle concentration.","title":"variable salinityPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-updatingcloud","text":"bool updatingCloud; Flag to ensure the cloud and measurement update don't coincide.","title":"variable updatingCloud"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-gamma","text":"double gamma; Gamma velocity parameter for the smoothing function.","title":"variable gamma"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-gain","text":"double gain; Sensor gain.","title":"variable gain"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-smoothinglength","text":"double smoothingLength;","title":"variable smoothingLength"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-lastupdatetimestamp","text":"ros::Time lastUpdateTimestamp; Last update from the point cloud callback.","title":"variable lastUpdateTimestamp"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-outputmsg","text":"uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg; Output measurement topic.","title":"variable outputMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-salinitymsg","text":"uuv_sensor_ros_plugins_msgs::Salinity salinityMsg; Output salinity measurement message.","title":"variable salinityMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-watersalinityvalue","text":"double waterSalinityValue;","title":"variable waterSalinityValue"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1CPCROSPlugin/#variable-plumesalinityvalue","text":"double plumeSalinityValue; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable plumeSalinityValue"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/","text":"gazebo::DVLROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name DVLROSPlugin () Class constructor. virtual ~DVLROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void OnBeamCallback (const sensor_msgs::RangeConstPtr & _range0, const sensor_msgs::RangeConstPtr & _range1, const sensor_msgs::RangeConstPtr & _range2, const sensor_msgs::RangeConstPtr & _range3) Get beam Range message update. bool UpdateBeamTransforms () Updates the poses of each beam wrt the DVL frame. Protected Attributes Name bool beamTransformsInitialized double altitude Measured altitude in meters. uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg ROS DVL message. std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs dsor_msgs::Measurement dvlMeasurementMsg DVL Measurement message (used by the farol stack) ros::Publisher farolStackDVLPub Additional Measurement ROS topic specific for DVL msgs into farol stack. ros::Publisher twistPub ROS publisher for twist data. geometry_msgs::TwistWithCovarianceStamped twistROSMsg Store pose message since many attributes do not change (cov.). std::vector< std::string > beamsLinkNames List of beam links. std::vector< std::string > beamTopics List of beam topics. std::vector< ignition::math::Pose3d > beamPoses List of poses of each beam wrt to the DVL frame. boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3 tf::TransformListener transformListener Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function DVLROSPlugin DVLROSPlugin() Class constructor. function ~DVLROSPlugin virtual ~DVLROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate function OnBeamCallback void OnBeamCallback( const sensor_msgs::RangeConstPtr & _range0, const sensor_msgs::RangeConstPtr & _range1, const sensor_msgs::RangeConstPtr & _range2, const sensor_msgs::RangeConstPtr & _range3 ) Get beam Range message update. function UpdateBeamTransforms bool UpdateBeamTransforms() Updates the poses of each beam wrt the DVL frame. Protected Attributes Documentation variable beamTransformsInitialized bool beamTransformsInitialized; variable altitude double altitude; Measured altitude in meters. variable dvlROSMsg uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg; ROS DVL message. variable dvlBeamMsgs std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs; variable dvlMeasurementMsg dsor_msgs::Measurement dvlMeasurementMsg; DVL Measurement message (used by the farol stack) variable farolStackDVLPub ros::Publisher farolStackDVLPub; Additional Measurement ROS topic specific for DVL msgs into farol stack. variable twistPub ros::Publisher twistPub; ROS publisher for twist data. variable twistROSMsg geometry_msgs::TwistWithCovarianceStamped twistROSMsg; Store pose message since many attributes do not change (cov.). variable beamsLinkNames std::vector< std::string > beamsLinkNames; List of beam links. variable beamTopics std::vector< std::string > beamTopics; List of beam topics. variable beamPoses std::vector< ignition::math::Pose3d > beamPoses; List of poses of each beam wrt to the DVL frame. variable syncBeamMessages boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages; variable beamSub0 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0; variable beamSub1 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1; variable beamSub2 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2; variable beamSub3 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3; variable transformListener tf::TransformListener transformListener; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::DVLROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#gazebodvlrosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::DVLROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#public-functions","text":"Name DVLROSPlugin () Class constructor. virtual ~DVLROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void OnBeamCallback (const sensor_msgs::RangeConstPtr & _range0, const sensor_msgs::RangeConstPtr & _range1, const sensor_msgs::RangeConstPtr & _range2, const sensor_msgs::RangeConstPtr & _range3) Get beam Range message update. bool UpdateBeamTransforms () Updates the poses of each beam wrt the DVL frame.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#protected-attributes","text":"Name bool beamTransformsInitialized double altitude Measured altitude in meters. uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg ROS DVL message. std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs dsor_msgs::Measurement dvlMeasurementMsg DVL Measurement message (used by the farol stack) ros::Publisher farolStackDVLPub Additional Measurement ROS topic specific for DVL msgs into farol stack. ros::Publisher twistPub ROS publisher for twist data. geometry_msgs::TwistWithCovarianceStamped twistROSMsg Store pose message since many attributes do not change (cov.). std::vector< std::string > beamsLinkNames List of beam links. std::vector< std::string > beamTopics List of beam topics. std::vector< ignition::math::Pose3d > beamPoses List of poses of each beam wrt to the DVL frame. boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2 boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3 tf::TransformListener transformListener","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-dvlrosplugin","text":"DVLROSPlugin() Class constructor.","title":"function DVLROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-dvlrosplugin_1","text":"virtual ~DVLROSPlugin() Class destructor.","title":"function ~DVLROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-onbeamcallback","text":"void OnBeamCallback( const sensor_msgs::RangeConstPtr & _range0, const sensor_msgs::RangeConstPtr & _range1, const sensor_msgs::RangeConstPtr & _range2, const sensor_msgs::RangeConstPtr & _range3 ) Get beam Range message update.","title":"function OnBeamCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#function-updatebeamtransforms","text":"bool UpdateBeamTransforms() Updates the poses of each beam wrt the DVL frame.","title":"function UpdateBeamTransforms"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamtransformsinitialized","text":"bool beamTransformsInitialized;","title":"variable beamTransformsInitialized"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-altitude","text":"double altitude; Measured altitude in meters.","title":"variable altitude"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-dvlrosmsg","text":"uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg; ROS DVL message.","title":"variable dvlROSMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-dvlbeammsgs","text":"std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs;","title":"variable dvlBeamMsgs"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-dvlmeasurementmsg","text":"dsor_msgs::Measurement dvlMeasurementMsg; DVL Measurement message (used by the farol stack)","title":"variable dvlMeasurementMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-farolstackdvlpub","text":"ros::Publisher farolStackDVLPub; Additional Measurement ROS topic specific for DVL msgs into farol stack.","title":"variable farolStackDVLPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-twistpub","text":"ros::Publisher twistPub; ROS publisher for twist data.","title":"variable twistPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-twistrosmsg","text":"geometry_msgs::TwistWithCovarianceStamped twistROSMsg; Store pose message since many attributes do not change (cov.).","title":"variable twistROSMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamslinknames","text":"std::vector< std::string > beamsLinkNames; List of beam links.","title":"variable beamsLinkNames"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamtopics","text":"std::vector< std::string > beamTopics; List of beam topics.","title":"variable beamTopics"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamposes","text":"std::vector< ignition::math::Pose3d > beamPoses; List of poses of each beam wrt to the DVL frame.","title":"variable beamPoses"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-syncbeammessages","text":"boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages;","title":"variable syncBeamMessages"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamsub0","text":"boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0;","title":"variable beamSub0"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamsub1","text":"boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1;","title":"variable beamSub1"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamsub2","text":"boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2;","title":"variable beamSub2"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-beamsub3","text":"boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3;","title":"variable beamSub3"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1DVLROSPlugin/#variable-transformlistener","text":"tf::TransformListener transformListener; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable transformListener"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/","text":"gazebo::GPSROSPlugin Inherits from gazebo::ROSBaseSensorPlugin , gazebo::ROSBasePlugin , SensorPlugin Public Functions Name GPSROSPlugin () Class constructor. virtual ~GPSROSPlugin () Class destructor. virtual void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool OnUpdateGPS () Update GPS ROS message. Protected Attributes Name sensors::GpsSensorPtr gazeboGPSSensor Pointer to the parent sensor. sensor_msgs::NavSatFix gpsMessage Output GPS ROS message. Additional inherited members Public Functions inherited from gazebo::ROSBaseSensorPlugin Name ROSBaseSensorPlugin () Class constructor. virtual ~ROSBaseSensorPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseSensorPlugin Name virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation. Protected Attributes inherited from gazebo::ROSBaseSensorPlugin Name sensors::SensorPtr parentSensor Pointer to the parent sensor. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. virtual bool OnUpdate (const common::UpdateInfo & ) =0 Update callback from simulation. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function GPSROSPlugin GPSROSPlugin() Class constructor. function ~GPSROSPlugin virtual ~GPSROSPlugin() Class destructor. function Load virtual void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. Reimplements : gazebo::ROSBaseSensorPlugin::Load function OnUpdateGPS bool OnUpdateGPS() Update GPS ROS message. Protected Attributes Documentation variable gazeboGPSSensor sensors::GpsSensorPtr gazeboGPSSensor; Pointer to the parent sensor. variable gpsMessage sensor_msgs::NavSatFix gpsMessage; Output GPS ROS message. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::GPSROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#gazebogpsrosplugin","text":"Inherits from gazebo::ROSBaseSensorPlugin , gazebo::ROSBasePlugin , SensorPlugin","title":"gazebo::GPSROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#public-functions","text":"Name GPSROSPlugin () Class constructor. virtual ~GPSROSPlugin () Class destructor. virtual void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool OnUpdateGPS () Update GPS ROS message.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#protected-attributes","text":"Name sensors::GpsSensorPtr gazeboGPSSensor Pointer to the parent sensor. sensor_msgs::NavSatFix gpsMessage Output GPS ROS message.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseSensorPlugin Name ROSBaseSensorPlugin () Class constructor. virtual ~ROSBaseSensorPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseSensorPlugin Name virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation. Protected Attributes inherited from gazebo::ROSBaseSensorPlugin Name sensors::SensorPtr parentSensor Pointer to the parent sensor. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. virtual bool OnUpdate (const common::UpdateInfo & ) =0 Update callback from simulation. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#function-gpsrosplugin","text":"GPSROSPlugin() Class constructor.","title":"function GPSROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#function-gpsrosplugin_1","text":"virtual ~GPSROSPlugin() Class destructor.","title":"function ~GPSROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#function-load","text":"virtual void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. Reimplements : gazebo::ROSBaseSensorPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#function-onupdategps","text":"bool OnUpdateGPS() Update GPS ROS message.","title":"function OnUpdateGPS"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#variable-gazebogpssensor","text":"sensors::GpsSensorPtr gazeboGPSSensor; Pointer to the parent sensor.","title":"variable gazeboGPSSensor"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GPSROSPlugin/#variable-gpsmessage","text":"sensor_msgs::NavSatFix gpsMessage; Output GPS ROS message. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable gpsMessage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/","text":"gazebo::GazeboRosImageSonar Inherits from SensorPlugin, GazeboRosCameraUtils Public Functions Name GazeboRosImageSonar () Constructor. ~GazeboRosImageSonar () Destructor. virtual void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load the plugin. virtual void Advertise () Advertise point cloud and depth image. Protected Functions Name virtual void OnNewDepthFrame (const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewRGBPointCloud (const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewImageFrame (const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void PublishCameraInfo () Protected Attributes Name ros::Publisher depth_image_camera_info_pub_ unsigned int width unsigned int height unsigned int depth std::string format cv::Mat dist_matrix_ std::vector< std::vector< int > > angle_range_indices_ std::vector< int > angle_nbr_indices_ sensors::DepthCameraSensorPtr parentSensor rendering::DepthCameraPtr depthCamera Public Functions Documentation function GazeboRosImageSonar GazeboRosImageSonar() Constructor. Parameters : parent The parent entity, must be a Model or a Sensor function ~GazeboRosImageSonar ~GazeboRosImageSonar() Destructor. function Load virtual void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load the plugin. Parameters : take in SDF root element function Advertise virtual void Advertise() Advertise point cloud and depth image. Protected Functions Documentation function OnNewDepthFrame virtual void OnNewDepthFrame( const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller. function OnNewRGBPointCloud virtual void OnNewRGBPointCloud( const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller. function OnNewImageFrame virtual void OnNewImageFrame( const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller. function PublishCameraInfo virtual void PublishCameraInfo() Protected Attributes Documentation variable depth_image_camera_info_pub_ ros::Publisher depth_image_camera_info_pub_; variable width unsigned int width; variable height unsigned int height; variable depth unsigned int depth; variable format std::string format; variable dist_matrix_ cv::Mat dist_matrix_; variable angle_range_indices_ std::vector< std::vector< int > > angle_range_indices_; variable angle_nbr_indices_ std::vector< int > angle_nbr_indices_; variable parentSensor sensors::DepthCameraSensorPtr parentSensor; variable depthCamera rendering::DepthCameraPtr depthCamera; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::GazeboRosImageSonar"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#gazebogazeborosimagesonar","text":"Inherits from SensorPlugin, GazeboRosCameraUtils","title":"gazebo::GazeboRosImageSonar"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#public-functions","text":"Name GazeboRosImageSonar () Constructor. ~GazeboRosImageSonar () Destructor. virtual void Load (sensors::SensorPtr _parent, sdf::ElementPtr _sdf) Load the plugin. virtual void Advertise () Advertise point cloud and depth image.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#protected-functions","text":"Name virtual void OnNewDepthFrame (const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewRGBPointCloud (const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewImageFrame (const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void PublishCameraInfo ()","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#protected-attributes","text":"Name ros::Publisher depth_image_camera_info_pub_ unsigned int width unsigned int height unsigned int depth std::string format cv::Mat dist_matrix_ std::vector< std::vector< int > > angle_range_indices_ std::vector< int > angle_nbr_indices_ sensors::DepthCameraSensorPtr parentSensor rendering::DepthCameraPtr depthCamera","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-gazeborosimagesonar","text":"GazeboRosImageSonar() Constructor. Parameters : parent The parent entity, must be a Model or a Sensor","title":"function GazeboRosImageSonar"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-gazeborosimagesonar_1","text":"~GazeboRosImageSonar() Destructor.","title":"function ~GazeboRosImageSonar"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-load","text":"virtual void Load( sensors::SensorPtr _parent, sdf::ElementPtr _sdf ) Load the plugin. Parameters : take in SDF root element","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-advertise","text":"virtual void Advertise() Advertise point cloud and depth image.","title":"function Advertise"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-onnewdepthframe","text":"virtual void OnNewDepthFrame( const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller.","title":"function OnNewDepthFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-onnewrgbpointcloud","text":"virtual void OnNewRGBPointCloud( const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller.","title":"function OnNewRGBPointCloud"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-onnewimageframe","text":"virtual void OnNewImageFrame( const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller.","title":"function OnNewImageFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#function-publishcamerainfo","text":"virtual void PublishCameraInfo()","title":"function PublishCameraInfo"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-depth_image_camera_info_pub_","text":"ros::Publisher depth_image_camera_info_pub_;","title":"variable depth_image_camera_info_pub_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-width","text":"unsigned int width;","title":"variable width"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-height","text":"unsigned int height;","title":"variable height"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-depth","text":"unsigned int depth;","title":"variable depth"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-format","text":"std::string format;","title":"variable format"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-dist_matrix_","text":"cv::Mat dist_matrix_;","title":"variable dist_matrix_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-angle_range_indices_","text":"std::vector< std::vector< int > > angle_range_indices_;","title":"variable angle_range_indices_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-angle_nbr_indices_","text":"std::vector< int > angle_nbr_indices_;","title":"variable angle_nbr_indices_"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-parentsensor","text":"sensors::DepthCameraSensorPtr parentSensor;","title":"variable parentSensor"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GazeboRosImageSonar/#variable-depthcamera","text":"rendering::DepthCameraPtr depthCamera; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable depthCamera"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/","text":"gazebo::GstCameraPlugin More... #include <gazebo_gst_camera_plugin.hh> Inherits from SensorPlugin Public Functions Name GstCameraPlugin () virtual ~GstCameraPlugin () virtual void Load (sensors::SensorPtr sensor, sdf::ElementPtr sdf) virtual void OnNewFrame (const unsigned char * image, unsigned int width, unsigned int height, unsigned int depth, const std::string & format) void startGstThread () void stopGstThread () void gstCallback (GstElement * appsrc) void cbVideoStream (const boost::shared_ptr< const msgs::Int > & _msg) Protected Attributes Name unsigned int width unsigned int height unsigned int depth float rate std::string format std::string udpHost int udpPort bool useRtmp std::string rtmpLocation bool useCuda sensors::CameraSensorPtr parentSensor rendering::CameraPtr camera Detailed Description class gazebo::GstCameraPlugin; A Gazebo plugin that can be attached to a camera and then streams the video data using gstreamer. It streams to a configurable UDP IP and UDP Port, defaults are respectively 127.0.0.1 and 5600. Connect to the stream via command line with: gst-launch-1.0 -v udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264' \\ ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink fps-update-interval=1000 sync=false Public Functions Documentation function GstCameraPlugin GstCameraPlugin() function ~GstCameraPlugin virtual ~GstCameraPlugin() function Load virtual void Load( sensors::SensorPtr sensor, sdf::ElementPtr sdf ) function OnNewFrame virtual void OnNewFrame( const unsigned char * image, unsigned int width, unsigned int height, unsigned int depth, const std::string & format ) function startGstThread void startGstThread() function stopGstThread void stopGstThread() function gstCallback void gstCallback( GstElement * appsrc ) function cbVideoStream void cbVideoStream( const boost::shared_ptr< const msgs::Int > & _msg ) Protected Attributes Documentation variable width unsigned int width; variable height unsigned int height; variable depth unsigned int depth; variable rate float rate; variable format std::string format; variable udpHost std::string udpHost; variable udpPort int udpPort; variable useRtmp bool useRtmp; variable rtmpLocation std::string rtmpLocation; variable useCuda bool useCuda; variable parentSensor sensors::CameraSensorPtr parentSensor; variable camera rendering::CameraPtr camera; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::GstCameraPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#gazebogstcameraplugin","text":"More... #include <gazebo_gst_camera_plugin.hh> Inherits from SensorPlugin","title":"gazebo::GstCameraPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#public-functions","text":"Name GstCameraPlugin () virtual ~GstCameraPlugin () virtual void Load (sensors::SensorPtr sensor, sdf::ElementPtr sdf) virtual void OnNewFrame (const unsigned char * image, unsigned int width, unsigned int height, unsigned int depth, const std::string & format) void startGstThread () void stopGstThread () void gstCallback (GstElement * appsrc) void cbVideoStream (const boost::shared_ptr< const msgs::Int > & _msg)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#protected-attributes","text":"Name unsigned int width unsigned int height unsigned int depth float rate std::string format std::string udpHost int udpPort bool useRtmp std::string rtmpLocation bool useCuda sensors::CameraSensorPtr parentSensor rendering::CameraPtr camera","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#detailed-description","text":"class gazebo::GstCameraPlugin; A Gazebo plugin that can be attached to a camera and then streams the video data using gstreamer. It streams to a configurable UDP IP and UDP Port, defaults are respectively 127.0.0.1 and 5600. Connect to the stream via command line with: gst-launch-1.0 -v udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264' \\ ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink fps-update-interval=1000 sync=false","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-gstcameraplugin","text":"GstCameraPlugin()","title":"function GstCameraPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-gstcameraplugin_1","text":"virtual ~GstCameraPlugin()","title":"function ~GstCameraPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-load","text":"virtual void Load( sensors::SensorPtr sensor, sdf::ElementPtr sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-onnewframe","text":"virtual void OnNewFrame( const unsigned char * image, unsigned int width, unsigned int height, unsigned int depth, const std::string & format )","title":"function OnNewFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-startgstthread","text":"void startGstThread()","title":"function startGstThread"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-stopgstthread","text":"void stopGstThread()","title":"function stopGstThread"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-gstcallback","text":"void gstCallback( GstElement * appsrc )","title":"function gstCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#function-cbvideostream","text":"void cbVideoStream( const boost::shared_ptr< const msgs::Int > & _msg )","title":"function cbVideoStream"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-width","text":"unsigned int width;","title":"variable width"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-height","text":"unsigned int height;","title":"variable height"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-depth","text":"unsigned int depth;","title":"variable depth"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-rate","text":"float rate;","title":"variable rate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-format","text":"std::string format;","title":"variable format"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-udphost","text":"std::string udpHost;","title":"variable udpHost"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-udpport","text":"int udpPort;","title":"variable udpPort"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-usertmp","text":"bool useRtmp;","title":"variable useRtmp"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-rtmplocation","text":"std::string rtmpLocation;","title":"variable rtmpLocation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-usecuda","text":"bool useCuda;","title":"variable useCuda"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-parentsensor","text":"sensors::CameraSensorPtr parentSensor;","title":"variable parentSensor"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1GstCameraPlugin/#variable-camera","text":"rendering::CameraPtr camera; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable camera"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/","text":"gazebo::IMUROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name IMUROSPlugin () Class constructor. virtual ~IMUROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void AddNoise (ignition::math::Vector3d & _linAcc, ignition::math::Vector3d & _angVel, ignition::math::Quaterniond & _orientation, double _dt) Apply and add nosie model to ideal measurements. Protected Attributes Name ignition::math::Vector3d measLinearAcc Last measurement of linear acceleration.. ignition::math::Vector3d measAngularVel Last measurement of angular velocity. ignition::math::Quaterniond measOrientation (Simulation) time when the last sensor measurement was generated. ignition::math::Vector3d gravityWorld Gravity vector wrt. reference frame. ignition::math::Vector3d gyroscopeBias Current (drifting) gyroscope bias. ignition::math::Vector3d accelerometerBias Current (drifting) accelerometer bias. ignition::math::Vector3d gyroscopeTurnOnBias Constant turn-on gyroscope bias. ignition::math::Vector3d accelerometerTurnOnBias Constant turn-on accelerometer bias. IMUParameters imuParameters IMU model parameters. sensor_msgs::Imu imuROSMessage ROS IMU message. dsor_msgs::Measurement imuMeasurementMsg IMU Measurement message (used by the farol stack) ros::Publisher farolStackImuPub Additional Measurement ROS topic specific for IMU msgs into stack. Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function IMUROSPlugin IMUROSPlugin() Class constructor. function ~IMUROSPlugin virtual ~IMUROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate function AddNoise void AddNoise( ignition::math::Vector3d & _linAcc, ignition::math::Vector3d & _angVel, ignition::math::Quaterniond & _orientation, double _dt ) Apply and add nosie model to ideal measurements. Gyroscope Accelerometer Orientation Protected Attributes Documentation variable measLinearAcc ignition::math::Vector3d measLinearAcc; Last measurement of linear acceleration.. variable measAngularVel ignition::math::Vector3d measAngularVel; Last measurement of angular velocity. variable measOrientation ignition::math::Quaterniond measOrientation; (Simulation) time when the last sensor measurement was generated. variable gravityWorld ignition::math::Vector3d gravityWorld; Gravity vector wrt. reference frame. variable gyroscopeBias ignition::math::Vector3d gyroscopeBias; Current (drifting) gyroscope bias. variable accelerometerBias ignition::math::Vector3d accelerometerBias; Current (drifting) accelerometer bias. variable gyroscopeTurnOnBias ignition::math::Vector3d gyroscopeTurnOnBias; Constant turn-on gyroscope bias. variable accelerometerTurnOnBias ignition::math::Vector3d accelerometerTurnOnBias; Constant turn-on accelerometer bias. variable imuParameters IMUParameters imuParameters; IMU model parameters. variable imuROSMessage sensor_msgs::Imu imuROSMessage; ROS IMU message. variable imuMeasurementMsg dsor_msgs::Measurement imuMeasurementMsg; IMU Measurement message (used by the farol stack) variable farolStackImuPub ros::Publisher farolStackImuPub; Additional Measurement ROS topic specific for IMU msgs into stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::IMUROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#gazeboimurosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::IMUROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#public-functions","text":"Name IMUROSPlugin () Class constructor. virtual ~IMUROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void AddNoise (ignition::math::Vector3d & _linAcc, ignition::math::Vector3d & _angVel, ignition::math::Quaterniond & _orientation, double _dt) Apply and add nosie model to ideal measurements.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#protected-attributes","text":"Name ignition::math::Vector3d measLinearAcc Last measurement of linear acceleration.. ignition::math::Vector3d measAngularVel Last measurement of angular velocity. ignition::math::Quaterniond measOrientation (Simulation) time when the last sensor measurement was generated. ignition::math::Vector3d gravityWorld Gravity vector wrt. reference frame. ignition::math::Vector3d gyroscopeBias Current (drifting) gyroscope bias. ignition::math::Vector3d accelerometerBias Current (drifting) accelerometer bias. ignition::math::Vector3d gyroscopeTurnOnBias Constant turn-on gyroscope bias. ignition::math::Vector3d accelerometerTurnOnBias Constant turn-on accelerometer bias. IMUParameters imuParameters IMU model parameters. sensor_msgs::Imu imuROSMessage ROS IMU message. dsor_msgs::Measurement imuMeasurementMsg IMU Measurement message (used by the farol stack) ros::Publisher farolStackImuPub Additional Measurement ROS topic specific for IMU msgs into stack.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#function-imurosplugin","text":"IMUROSPlugin() Class constructor.","title":"function IMUROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#function-imurosplugin_1","text":"virtual ~IMUROSPlugin() Class destructor.","title":"function ~IMUROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#function-addnoise","text":"void AddNoise( ignition::math::Vector3d & _linAcc, ignition::math::Vector3d & _angVel, ignition::math::Quaterniond & _orientation, double _dt ) Apply and add nosie model to ideal measurements. Gyroscope Accelerometer Orientation","title":"function AddNoise"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-measlinearacc","text":"ignition::math::Vector3d measLinearAcc; Last measurement of linear acceleration..","title":"variable measLinearAcc"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-measangularvel","text":"ignition::math::Vector3d measAngularVel; Last measurement of angular velocity.","title":"variable measAngularVel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-measorientation","text":"ignition::math::Quaterniond measOrientation; (Simulation) time when the last sensor measurement was generated.","title":"variable measOrientation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-gravityworld","text":"ignition::math::Vector3d gravityWorld; Gravity vector wrt. reference frame.","title":"variable gravityWorld"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-gyroscopebias","text":"ignition::math::Vector3d gyroscopeBias; Current (drifting) gyroscope bias.","title":"variable gyroscopeBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-accelerometerbias","text":"ignition::math::Vector3d accelerometerBias; Current (drifting) accelerometer bias.","title":"variable accelerometerBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-gyroscopeturnonbias","text":"ignition::math::Vector3d gyroscopeTurnOnBias; Constant turn-on gyroscope bias.","title":"variable gyroscopeTurnOnBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-accelerometerturnonbias","text":"ignition::math::Vector3d accelerometerTurnOnBias; Constant turn-on accelerometer bias.","title":"variable accelerometerTurnOnBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-imuparameters","text":"IMUParameters imuParameters; IMU model parameters.","title":"variable imuParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-imurosmessage","text":"sensor_msgs::Imu imuROSMessage; ROS IMU message.","title":"variable imuROSMessage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-imumeasurementmsg","text":"dsor_msgs::Measurement imuMeasurementMsg; IMU Measurement message (used by the farol stack)","title":"variable imuMeasurementMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1IMUROSPlugin/#variable-farolstackimupub","text":"ros::Publisher farolStackImuPub; Additional Measurement ROS topic specific for IMU msgs into stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable farolStackImuPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/","text":"gazebo::MagnetometerROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name MagnetometerROSPlugin () Class constructor. virtual ~MagnetometerROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Protected Attributes Name MagnetometerParameters parameters Magnetometer configuration parameters: ignition::math::Vector3d magneticFieldWorld Reference magnetic field in world frame: ignition::math::Vector3d turnOnBias Constant turn-on bias [muT]. ignition::math::Vector3d measMagneticField Last measurement of magnetic field. sensor_msgs::MagneticField rosMsg ROS message. Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function MagnetometerROSPlugin MagnetometerROSPlugin() Class constructor. function ~MagnetometerROSPlugin virtual ~MagnetometerROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate Protected Attributes Documentation variable parameters MagnetometerParameters parameters; Magnetometer configuration parameters: variable magneticFieldWorld ignition::math::Vector3d magneticFieldWorld; Reference magnetic field in world frame: variable turnOnBias ignition::math::Vector3d turnOnBias; Constant turn-on bias [muT]. variable measMagneticField ignition::math::Vector3d measMagneticField; Last measurement of magnetic field. variable rosMsg sensor_msgs::MagneticField rosMsg; ROS message. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::MagnetometerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#gazebomagnetometerrosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::MagnetometerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#public-functions","text":"Name MagnetometerROSPlugin () Class constructor. virtual ~MagnetometerROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#protected-attributes","text":"Name MagnetometerParameters parameters Magnetometer configuration parameters: ignition::math::Vector3d magneticFieldWorld Reference magnetic field in world frame: ignition::math::Vector3d turnOnBias Constant turn-on bias [muT]. ignition::math::Vector3d measMagneticField Last measurement of magnetic field. sensor_msgs::MagneticField rosMsg ROS message.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#function-magnetometerrosplugin","text":"MagnetometerROSPlugin() Class constructor.","title":"function MagnetometerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#function-magnetometerrosplugin_1","text":"virtual ~MagnetometerROSPlugin() Class destructor.","title":"function ~MagnetometerROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#variable-parameters","text":"MagnetometerParameters parameters; Magnetometer configuration parameters:","title":"variable parameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#variable-magneticfieldworld","text":"ignition::math::Vector3d magneticFieldWorld; Reference magnetic field in world frame:","title":"variable magneticFieldWorld"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#variable-turnonbias","text":"ignition::math::Vector3d turnOnBias; Constant turn-on bias [muT].","title":"variable turnOnBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#variable-measmagneticfield","text":"ignition::math::Vector3d measMagneticField; Last measurement of magnetic field.","title":"variable measMagneticField"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1MagnetometerROSPlugin/#variable-rosmsg","text":"sensor_msgs::MagneticField rosMsg; ROS message. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable rosMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/","text":"gazebo::PoseGTROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name PoseGTROSPlugin () Class constructor. ~PoseGTROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void PublishOdomMessage (common::Time _time, ignition::math::Pose3d _pose, ignition::math::Vector3d _linVel, ignition::math::Vector3d _angVel) void UpdateNEDTransform () Protected Attributes Name ros::Publisher nedOdomPub ignition::math::Pose3d offset Pose offset. std::string nedFrameID ignition::math::Pose3d nedTransform bool nedTransformIsInit bool publishNEDOdom tf2_ros::Buffer tfBuffer boost::shared_ptr< tf2_ros::TransformListener > tfListener ignition::math::Vector3d lastLinVel ignition::math::Vector3d lastAngVel ignition::math::Vector3d linAcc ignition::math::Vector3d angAcc ignition::math::Vector3d lastRefLinVel ignition::math::Vector3d lastRefAngVel ignition::math::Vector3d refLinAcc ignition::math::Vector3d refAngAcc Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function PoseGTROSPlugin PoseGTROSPlugin() Class constructor. function ~PoseGTROSPlugin ~PoseGTROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate function PublishOdomMessage void PublishOdomMessage( common::Time _time, ignition::math::Pose3d _pose, ignition::math::Vector3d _linVel, ignition::math::Vector3d _angVel ) function UpdateNEDTransform void UpdateNEDTransform() Protected Attributes Documentation variable nedOdomPub ros::Publisher nedOdomPub; variable offset ignition::math::Pose3d offset; Pose offset. variable nedFrameID std::string nedFrameID; variable nedTransform ignition::math::Pose3d nedTransform; variable nedTransformIsInit bool nedTransformIsInit; variable publishNEDOdom bool publishNEDOdom; variable tfBuffer tf2_ros::Buffer tfBuffer; variable tfListener boost::shared_ptr< tf2_ros::TransformListener > tfListener; variable lastLinVel ignition::math::Vector3d lastLinVel; variable lastAngVel ignition::math::Vector3d lastAngVel; variable linAcc ignition::math::Vector3d linAcc; variable angAcc ignition::math::Vector3d angAcc; variable lastRefLinVel ignition::math::Vector3d lastRefLinVel; variable lastRefAngVel ignition::math::Vector3d lastRefAngVel; variable refLinAcc ignition::math::Vector3d refLinAcc; variable refAngAcc ignition::math::Vector3d refAngAcc; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::PoseGTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#gazeboposegtrosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::PoseGTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#public-functions","text":"Name PoseGTROSPlugin () Class constructor. ~PoseGTROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. void PublishOdomMessage (common::Time _time, ignition::math::Pose3d _pose, ignition::math::Vector3d _linVel, ignition::math::Vector3d _angVel) void UpdateNEDTransform ()","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#protected-attributes","text":"Name ros::Publisher nedOdomPub ignition::math::Pose3d offset Pose offset. std::string nedFrameID ignition::math::Pose3d nedTransform bool nedTransformIsInit bool publishNEDOdom tf2_ros::Buffer tfBuffer boost::shared_ptr< tf2_ros::TransformListener > tfListener ignition::math::Vector3d lastLinVel ignition::math::Vector3d lastAngVel ignition::math::Vector3d linAcc ignition::math::Vector3d angAcc ignition::math::Vector3d lastRefLinVel ignition::math::Vector3d lastRefAngVel ignition::math::Vector3d refLinAcc ignition::math::Vector3d refAngAcc","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-posegtrosplugin","text":"PoseGTROSPlugin() Class constructor.","title":"function PoseGTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-posegtrosplugin_1","text":"~PoseGTROSPlugin() Class destructor.","title":"function ~PoseGTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-publishodommessage","text":"void PublishOdomMessage( common::Time _time, ignition::math::Pose3d _pose, ignition::math::Vector3d _linVel, ignition::math::Vector3d _angVel )","title":"function PublishOdomMessage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#function-updatenedtransform","text":"void UpdateNEDTransform()","title":"function UpdateNEDTransform"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-nedodompub","text":"ros::Publisher nedOdomPub;","title":"variable nedOdomPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-offset","text":"ignition::math::Pose3d offset; Pose offset.","title":"variable offset"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-nedframeid","text":"std::string nedFrameID;","title":"variable nedFrameID"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-nedtransform","text":"ignition::math::Pose3d nedTransform;","title":"variable nedTransform"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-nedtransformisinit","text":"bool nedTransformIsInit;","title":"variable nedTransformIsInit"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-publishnedodom","text":"bool publishNEDOdom;","title":"variable publishNEDOdom"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-tfbuffer","text":"tf2_ros::Buffer tfBuffer;","title":"variable tfBuffer"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-tflistener","text":"boost::shared_ptr< tf2_ros::TransformListener > tfListener;","title":"variable tfListener"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-lastlinvel","text":"ignition::math::Vector3d lastLinVel;","title":"variable lastLinVel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-lastangvel","text":"ignition::math::Vector3d lastAngVel;","title":"variable lastAngVel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-linacc","text":"ignition::math::Vector3d linAcc;","title":"variable linAcc"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-angacc","text":"ignition::math::Vector3d angAcc;","title":"variable angAcc"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-lastreflinvel","text":"ignition::math::Vector3d lastRefLinVel;","title":"variable lastRefLinVel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-lastrefangvel","text":"ignition::math::Vector3d lastRefAngVel;","title":"variable lastRefAngVel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-reflinacc","text":"ignition::math::Vector3d refLinAcc;","title":"variable refLinAcc"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1PoseGTROSPlugin/#variable-refangacc","text":"ignition::math::Vector3d refAngAcc; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable refAngAcc"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/","text":"gazebo::ROSBaseModelPlugin Inherits from gazebo::ROSBasePlugin , ModelPlugin Inherited by gazebo::CPCROSPlugin , gazebo::DVLROSPlugin , gazebo::IMUROSPlugin , gazebo::MagnetometerROSPlugin , gazebo::PoseGTROSPlugin , gazebo::RPTROSPlugin , gazebo::SubseaPressureROSPlugin Public Functions Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions Name virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation. void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Additional inherited members Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function ROSBaseModelPlugin ROSBaseModelPlugin() Class constructor. function ~ROSBaseModelPlugin virtual ~ROSBaseModelPlugin() Class destructor. Protected Functions Documentation function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf,. Reimplemented by : gazebo::SubseaPressureROSPlugin::Load , gazebo::RPTROSPlugin::Load , gazebo::CPCROSPlugin::Load , gazebo::PoseGTROSPlugin::Load , gazebo::DVLROSPlugin::Load , gazebo::MagnetometerROSPlugin::Load , gazebo::IMUROSPlugin::Load function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & ) Update callback from simulation. Reimplements : gazebo::ROSBasePlugin::OnUpdate Reimplemented by : gazebo::SubseaPressureROSPlugin::OnUpdate , gazebo::RPTROSPlugin::OnUpdate , gazebo::CPCROSPlugin::OnUpdate , gazebo::PoseGTROSPlugin::OnUpdate , gazebo::DVLROSPlugin::OnUpdate , gazebo::MagnetometerROSPlugin::OnUpdate , gazebo::IMUROSPlugin::OnUpdate function SendLocalNEDTransform void SendLocalNEDTransform() Returns true if the base_link_ned frame exists. Protected Attributes Documentation variable model physics::ModelPtr model; Pointer to the model. variable link physics::LinkPtr link; Pointer to the link. variable enableLocalNEDFrame bool enableLocalNEDFrame; True if a the local NED frame needs to be broadcasted. variable tfBroadcaster tf::TransformBroadcaster * tfBroadcaster; TF broadcaster for the local NED frame. variable localNEDFrame ignition::math::Pose3d localNEDFrame; Pose of the local NED frame wrt link frame. variable tfLocalNEDFrame tf::StampedTransform tfLocalNEDFrame; Local NED TF frame. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::ROSBaseModelPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#gazeborosbasemodelplugin","text":"Inherits from gazebo::ROSBasePlugin , ModelPlugin Inherited by gazebo::CPCROSPlugin , gazebo::DVLROSPlugin , gazebo::IMUROSPlugin , gazebo::MagnetometerROSPlugin , gazebo::PoseGTROSPlugin , gazebo::RPTROSPlugin , gazebo::SubseaPressureROSPlugin","title":"gazebo::ROSBaseModelPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#public-functions","text":"Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#protected-functions","text":"Name virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation. void SendLocalNEDTransform () Returns true if the base_link_ned frame exists.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#protected-attributes","text":"Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#function-rosbasemodelplugin","text":"ROSBaseModelPlugin() Class constructor.","title":"function ROSBaseModelPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#function-rosbasemodelplugin_1","text":"virtual ~ROSBaseModelPlugin() Class destructor.","title":"function ~ROSBaseModelPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf,. Reimplemented by : gazebo::SubseaPressureROSPlugin::Load , gazebo::RPTROSPlugin::Load , gazebo::CPCROSPlugin::Load , gazebo::PoseGTROSPlugin::Load , gazebo::DVLROSPlugin::Load , gazebo::MagnetometerROSPlugin::Load , gazebo::IMUROSPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & ) Update callback from simulation. Reimplements : gazebo::ROSBasePlugin::OnUpdate Reimplemented by : gazebo::SubseaPressureROSPlugin::OnUpdate , gazebo::RPTROSPlugin::OnUpdate , gazebo::CPCROSPlugin::OnUpdate , gazebo::PoseGTROSPlugin::OnUpdate , gazebo::DVLROSPlugin::OnUpdate , gazebo::MagnetometerROSPlugin::OnUpdate , gazebo::IMUROSPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#function-sendlocalnedtransform","text":"void SendLocalNEDTransform() Returns true if the base_link_ned frame exists.","title":"function SendLocalNEDTransform"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-model","text":"physics::ModelPtr model; Pointer to the model.","title":"variable model"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-link","text":"physics::LinkPtr link; Pointer to the link.","title":"variable link"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-enablelocalnedframe","text":"bool enableLocalNEDFrame; True if a the local NED frame needs to be broadcasted.","title":"variable enableLocalNEDFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-tfbroadcaster","text":"tf::TransformBroadcaster * tfBroadcaster; TF broadcaster for the local NED frame.","title":"variable tfBroadcaster"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-localnedframe","text":"ignition::math::Pose3d localNEDFrame; Pose of the local NED frame wrt link frame.","title":"variable localNEDFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseModelPlugin/#variable-tflocalnedframe","text":"tf::StampedTransform tfLocalNEDFrame; Local NED TF frame. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable tfLocalNEDFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/","text":"gazebo::ROSBasePlugin Inherited by gazebo::ROSBaseModelPlugin , gazebo::ROSBaseSensorPlugin Public Functions Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. virtual bool OnUpdate (const common::UpdateInfo & ) =0 Update callback from simulation. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function ROSBasePlugin ROSBasePlugin() Class constructor. function ~ROSBasePlugin virtual ~ROSBasePlugin() Class destructor. function InitBasePlugin bool InitBasePlugin( sdf::ElementPtr _sdf ) Initialize base plugin. function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & ) =0 Update callback from simulation. Reimplemented by : gazebo::ROSBaseSensorPlugin::OnUpdate , gazebo::ROSBaseModelPlugin::OnUpdate , gazebo::SubseaPressureROSPlugin::OnUpdate , gazebo::RPTROSPlugin::OnUpdate , gazebo::CPCROSPlugin::OnUpdate , gazebo::PoseGTROSPlugin::OnUpdate , gazebo::DVLROSPlugin::OnUpdate , gazebo::MagnetometerROSPlugin::OnUpdate , gazebo::IMUROSPlugin::OnUpdate function AddNoiseModel bool AddNoiseModel( std::string _name, double _sigma ) Add noise normal distribution to the list. Protected Functions Documentation function IsOn bool IsOn() Returns true if the plugin is activated. function PublishState void PublishState() Publish the current state of the plugin. function ChangeSensorState bool ChangeSensorState( uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res ) Change sensor state (ON/OFF) function GetTFMessage void GetTFMessage( const tf::tfMessage::ConstPtr & _msg ) Callback function for the static TF message. function GetGaussianNoise double GetGaussianNoise( double _amp ) Returns noise value for a function with zero mean from the default Gaussian noise model. function GetGaussianNoise double GetGaussianNoise( std::string _name, double _amp ) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. function EnableMeasurement bool EnableMeasurement( const common::UpdateInfo & _info ) const Enables generation of simulated measurement if the timeout since the last update has been reached. function UpdateReferenceFramePose void UpdateReferenceFramePose() Updates the pose of the reference frame wrt the world frame. Protected Attributes Documentation variable robotNamespace std::string robotNamespace; Robot namespace. variable sensorOutputTopic std::string sensorOutputTopic; Name of the sensor's output topic. variable world physics::WorldPtr world; Pointer to the world. variable updateConnection event::ConnectionPtr updateConnection; Pointer to the update event connection. variable lastMeasurementTime common::Time lastMeasurementTime; (Simulation) time when the last sensor measurement was generated. variable updateRate double updateRate; Sensor update rate. variable noiseSigma double noiseSigma; Noise standard deviation. variable noiseAmp double noiseAmp; Noise amplitude. variable gazeboMsgEnabled bool gazeboMsgEnabled; Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. variable rndGen std::default_random_engine rndGen; Pseudo random number generator. variable noiseModels std::map< std::string, std::normal_distribution< double > > noiseModels; Normal distribution describing the noise models. variable isOn std_msgs::Bool isOn; Flag to control the generation of output messages. variable rosNode boost::shared_ptr< ros::NodeHandle > rosNode; ROS node handle for communication with ROS. variable gazeboNode transport::NodePtr gazeboNode; Gazebo's node handle for transporting measurement messages. variable rosSensorOutputPub ros::Publisher rosSensorOutputPub; Gazebo's publisher for transporting measurement messages. variable gazeboSensorOutputPub transport::PublisherPtr gazeboSensorOutputPub; Gazebo's publisher for transporting measurement messages. variable changeSensorSrv ros::ServiceServer changeSensorSrv; Service server object. variable pluginStatePub ros::Publisher pluginStatePub; ROS publisher for the switchable sensor data. variable referenceFrame ignition::math::Pose3d referenceFrame; Pose of the reference frame wrt world frame. variable tfStaticSub ros::Subscriber tfStaticSub; ROS subscriber for the TF static reference frame. variable referenceFrameID std::string referenceFrameID; Frame ID of the reference frame. variable isReferenceInit bool isReferenceInit; Flag set to true if reference frame initialized. variable referenceLink physics::LinkPtr referenceLink; Reference link. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::ROSBasePlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#gazeborosbaseplugin","text":"Inherited by gazebo::ROSBaseModelPlugin , gazebo::ROSBaseSensorPlugin","title":"gazebo::ROSBasePlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#public-functions","text":"Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. virtual bool OnUpdate (const common::UpdateInfo & ) =0 Update callback from simulation. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#protected-functions","text":"Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#protected-attributes","text":"Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-rosbaseplugin","text":"ROSBasePlugin() Class constructor.","title":"function ROSBasePlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-rosbaseplugin_1","text":"virtual ~ROSBasePlugin() Class destructor.","title":"function ~ROSBasePlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-initbaseplugin","text":"bool InitBasePlugin( sdf::ElementPtr _sdf ) Initialize base plugin.","title":"function InitBasePlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & ) =0 Update callback from simulation. Reimplemented by : gazebo::ROSBaseSensorPlugin::OnUpdate , gazebo::ROSBaseModelPlugin::OnUpdate , gazebo::SubseaPressureROSPlugin::OnUpdate , gazebo::RPTROSPlugin::OnUpdate , gazebo::CPCROSPlugin::OnUpdate , gazebo::PoseGTROSPlugin::OnUpdate , gazebo::DVLROSPlugin::OnUpdate , gazebo::MagnetometerROSPlugin::OnUpdate , gazebo::IMUROSPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-addnoisemodel","text":"bool AddNoiseModel( std::string _name, double _sigma ) Add noise normal distribution to the list.","title":"function AddNoiseModel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-ison","text":"bool IsOn() Returns true if the plugin is activated.","title":"function IsOn"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-publishstate","text":"void PublishState() Publish the current state of the plugin.","title":"function PublishState"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-changesensorstate","text":"bool ChangeSensorState( uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res ) Change sensor state (ON/OFF)","title":"function ChangeSensorState"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-gettfmessage","text":"void GetTFMessage( const tf::tfMessage::ConstPtr & _msg ) Callback function for the static TF message.","title":"function GetTFMessage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-getgaussiannoise","text":"double GetGaussianNoise( double _amp ) Returns noise value for a function with zero mean from the default Gaussian noise model.","title":"function GetGaussianNoise"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-getgaussiannoise_1","text":"double GetGaussianNoise( std::string _name, double _amp ) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name.","title":"function GetGaussianNoise"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-enablemeasurement","text":"bool EnableMeasurement( const common::UpdateInfo & _info ) const Enables generation of simulated measurement if the timeout since the last update has been reached.","title":"function EnableMeasurement"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#function-updatereferenceframepose","text":"void UpdateReferenceFramePose() Updates the pose of the reference frame wrt the world frame.","title":"function UpdateReferenceFramePose"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-robotnamespace","text":"std::string robotNamespace; Robot namespace.","title":"variable robotNamespace"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-sensoroutputtopic","text":"std::string sensorOutputTopic; Name of the sensor's output topic.","title":"variable sensorOutputTopic"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-world","text":"physics::WorldPtr world; Pointer to the world.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Pointer to the update event connection.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-lastmeasurementtime","text":"common::Time lastMeasurementTime; (Simulation) time when the last sensor measurement was generated.","title":"variable lastMeasurementTime"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-updaterate","text":"double updateRate; Sensor update rate.","title":"variable updateRate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-noisesigma","text":"double noiseSigma; Noise standard deviation.","title":"variable noiseSigma"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-noiseamp","text":"double noiseAmp; Noise amplitude.","title":"variable noiseAmp"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-gazebomsgenabled","text":"bool gazeboMsgEnabled; Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages.","title":"variable gazeboMsgEnabled"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-rndgen","text":"std::default_random_engine rndGen; Pseudo random number generator.","title":"variable rndGen"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-noisemodels","text":"std::map< std::string, std::normal_distribution< double > > noiseModels; Normal distribution describing the noise models.","title":"variable noiseModels"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-ison","text":"std_msgs::Bool isOn; Flag to control the generation of output messages.","title":"variable isOn"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-rosnode","text":"boost::shared_ptr< ros::NodeHandle > rosNode; ROS node handle for communication with ROS.","title":"variable rosNode"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-gazebonode","text":"transport::NodePtr gazeboNode; Gazebo's node handle for transporting measurement messages.","title":"variable gazeboNode"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-rossensoroutputpub","text":"ros::Publisher rosSensorOutputPub; Gazebo's publisher for transporting measurement messages.","title":"variable rosSensorOutputPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-gazebosensoroutputpub","text":"transport::PublisherPtr gazeboSensorOutputPub; Gazebo's publisher for transporting measurement messages.","title":"variable gazeboSensorOutputPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-changesensorsrv","text":"ros::ServiceServer changeSensorSrv; Service server object.","title":"variable changeSensorSrv"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-pluginstatepub","text":"ros::Publisher pluginStatePub; ROS publisher for the switchable sensor data.","title":"variable pluginStatePub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-referenceframe","text":"ignition::math::Pose3d referenceFrame; Pose of the reference frame wrt world frame.","title":"variable referenceFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-tfstaticsub","text":"ros::Subscriber tfStaticSub; ROS subscriber for the TF static reference frame.","title":"variable tfStaticSub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-referenceframeid","text":"std::string referenceFrameID; Frame ID of the reference frame.","title":"variable referenceFrameID"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-isreferenceinit","text":"bool isReferenceInit; Flag set to true if reference frame initialized.","title":"variable isReferenceInit"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBasePlugin/#variable-referencelink","text":"physics::LinkPtr referenceLink; Reference link. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable referenceLink"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/","text":"gazebo::ROSBaseSensorPlugin Inherits from gazebo::ROSBasePlugin , SensorPlugin Inherited by gazebo::GPSROSPlugin Public Functions Name ROSBaseSensorPlugin () Class constructor. virtual ~ROSBaseSensorPlugin () Class destructor. Protected Functions Name virtual void Load (sensors::SensorPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation. Protected Attributes Name sensors::SensorPtr parentSensor Pointer to the parent sensor. Additional inherited members Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function ROSBaseSensorPlugin ROSBaseSensorPlugin() Class constructor. function ~ROSBaseSensorPlugin virtual ~ROSBaseSensorPlugin() Class destructor. Protected Functions Documentation function Load virtual void Load( sensors::SensorPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf,. Reimplemented by : gazebo::GPSROSPlugin::Load function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & ) Update callback from simulation. Reimplements : gazebo::ROSBasePlugin::OnUpdate Protected Attributes Documentation variable parentSensor sensors::SensorPtr parentSensor; Pointer to the parent sensor. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::ROSBaseSensorPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#gazeborosbasesensorplugin","text":"Inherits from gazebo::ROSBasePlugin , SensorPlugin Inherited by gazebo::GPSROSPlugin","title":"gazebo::ROSBaseSensorPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#public-functions","text":"Name ROSBaseSensorPlugin () Class constructor. virtual ~ROSBaseSensorPlugin () Class destructor.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#protected-functions","text":"Name virtual void Load (sensors::SensorPtr _model, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. virtual bool OnUpdate (const common::UpdateInfo & ) Update callback from simulation.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#protected-attributes","text":"Name sensors::SensorPtr parentSensor Pointer to the parent sensor.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#function-rosbasesensorplugin","text":"ROSBaseSensorPlugin() Class constructor.","title":"function ROSBaseSensorPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#function-rosbasesensorplugin_1","text":"virtual ~ROSBaseSensorPlugin() Class destructor.","title":"function ~ROSBaseSensorPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#function-load","text":"virtual void Load( sensors::SensorPtr _model, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf,. Reimplemented by : gazebo::GPSROSPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & ) Update callback from simulation. Reimplements : gazebo::ROSBasePlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1ROSBaseSensorPlugin/#variable-parentsensor","text":"sensors::SensorPtr parentSensor; Pointer to the parent sensor. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable parentSensor"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/","text":"gazebo::RPTROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name RPTROSPlugin () Class constructor. virtual ~RPTROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Protected Attributes Name ignition::math::Vector3d position Latest measured position. uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage Store message since many attributes do not change (cov.). Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function RPTROSPlugin RPTROSPlugin() Class constructor. function ~RPTROSPlugin virtual ~RPTROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate Protected Attributes Documentation variable position ignition::math::Vector3d position; Latest measured position. variable rosMessage uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage; Store message since many attributes do not change (cov.). Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::RPTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#gazeborptrosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::RPTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#public-functions","text":"Name RPTROSPlugin () Class constructor. virtual ~RPTROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#protected-attributes","text":"Name ignition::math::Vector3d position Latest measured position. uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage Store message since many attributes do not change (cov.).","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#function-rptrosplugin","text":"RPTROSPlugin() Class constructor.","title":"function RPTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#function-rptrosplugin_1","text":"virtual ~RPTROSPlugin() Class destructor.","title":"function ~RPTROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#variable-position","text":"ignition::math::Vector3d position; Latest measured position.","title":"variable position"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1RPTROSPlugin/#variable-rosmessage","text":"uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage; Store message since many attributes do not change (cov.). Updated on 2022-11-24 at 19:19:34 +0000","title":"variable rosMessage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/","text":"gazebo::SubseaPressureROSPlugin Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin Public Functions Name SubseaPressureROSPlugin () Class constructor. ~SubseaPressureROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin. Protected Functions Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Protected Attributes Name double saturation Sensor saturation (max. value for output pressure in Pa) bool estimateDepth If flag is set to true, estimate depth according to pressure measurement. double standardPressure Standard pressure. double kPaPerM Factor of kPa per meter. dsor_msgs::Measurement depthMeasurementMsg Depth measurement message (used by the farol stack) ros::Publisher farolStackDepthPub Additional Measurement ROS topic specific for depth msgs into stack. Additional inherited members Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link. Public Functions Documentation function SubseaPressureROSPlugin SubseaPressureROSPlugin() Class constructor. function ~SubseaPressureROSPlugin ~SubseaPressureROSPlugin() Class destructor. function Load virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load Protected Functions Documentation function OnUpdate virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate Protected Attributes Documentation variable saturation double saturation; Sensor saturation (max. value for output pressure in Pa) variable estimateDepth bool estimateDepth; If flag is set to true, estimate depth according to pressure measurement. variable standardPressure double standardPressure; Standard pressure. variable kPaPerM double kPaPerM; Factor of kPa per meter. variable depthMeasurementMsg dsor_msgs::Measurement depthMeasurementMsg; Depth measurement message (used by the farol stack) variable farolStackDepthPub ros::Publisher farolStackDepthPub; Additional Measurement ROS topic specific for depth msgs into stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::SubseaPressureROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#gazebosubseapressurerosplugin","text":"Inherits from gazebo::ROSBaseModelPlugin , gazebo::ROSBasePlugin , ModelPlugin","title":"gazebo::SubseaPressureROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#public-functions","text":"Name SubseaPressureROSPlugin () Class constructor. ~SubseaPressureROSPlugin () Class destructor. virtual void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) Load the plugin.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#protected-functions","text":"Name virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#protected-attributes","text":"Name double saturation Sensor saturation (max. value for output pressure in Pa) bool estimateDepth If flag is set to true, estimate depth according to pressure measurement. double standardPressure Standard pressure. double kPaPerM Factor of kPa per meter. dsor_msgs::Measurement depthMeasurementMsg Depth measurement message (used by the farol stack) ros::Publisher farolStackDepthPub Additional Measurement ROS topic specific for depth msgs into stack.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#additional-inherited-members","text":"Public Functions inherited from gazebo::ROSBaseModelPlugin Name ROSBaseModelPlugin () Class constructor. virtual ~ROSBaseModelPlugin () Class destructor. Protected Functions inherited from gazebo::ROSBaseModelPlugin Name void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Protected Attributes inherited from gazebo::ROSBaseModelPlugin Name physics::ModelPtr model Pointer to the model. physics::LinkPtr link Pointer to the link. bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. tf::StampedTransform tfLocalNEDFrame Local NED TF frame. Public Functions inherited from gazebo::ROSBasePlugin Name ROSBasePlugin () Class constructor. virtual ~ROSBasePlugin () Class destructor. bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. bool AddNoiseModel (std::string _name, double _sigma) Add noise normal distribution to the list. Protected Functions inherited from gazebo::ROSBasePlugin Name bool IsOn () Returns true if the plugin is activated. void PublishState () Publish the current state of the plugin. bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req, uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. double GetGaussianNoise (std::string _name, double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Protected Attributes inherited from gazebo::ROSBasePlugin Name std::string robotNamespace Robot namespace. std::string sensorOutputTopic Name of the sensor's output topic. physics::WorldPtr world Pointer to the world. event::ConnectionPtr updateConnection Pointer to the update event connection. common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. double updateRate Sensor update rate. double noiseSigma Noise standard deviation. double noiseAmp Noise amplitude. bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. std::default_random_engine rndGen Pseudo random number generator. std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. std_msgs::Bool isOn Flag to control the generation of output messages. boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. ros::ServiceServer changeSensorSrv Service server object. ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. std::string referenceFrameID Frame ID of the reference frame. bool isReferenceInit Flag set to true if reference frame initialized. physics::LinkPtr referenceLink Reference link.","title":"Additional inherited members"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#function-subseapressurerosplugin","text":"SubseaPressureROSPlugin() Class constructor.","title":"function SubseaPressureROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#function-subseapressurerosplugin_1","text":"~SubseaPressureROSPlugin() Class destructor.","title":"function ~SubseaPressureROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#function-load","text":"virtual void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) Load the plugin. Reimplements : gazebo::ROSBaseModelPlugin::Load","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#function-onupdate","text":"virtual bool OnUpdate( const common::UpdateInfo & _info ) Update sensor measurement. Reimplements : gazebo::ROSBaseModelPlugin::OnUpdate","title":"function OnUpdate"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-saturation","text":"double saturation; Sensor saturation (max. value for output pressure in Pa)","title":"variable saturation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-estimatedepth","text":"bool estimateDepth; If flag is set to true, estimate depth according to pressure measurement.","title":"variable estimateDepth"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-standardpressure","text":"double standardPressure; Standard pressure.","title":"variable standardPressure"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-kpaperm","text":"double kPaPerM; Factor of kPa per meter.","title":"variable kPaPerM"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-depthmeasurementmsg","text":"dsor_msgs::Measurement depthMeasurementMsg; Depth measurement message (used by the farol stack)","title":"variable depthMeasurementMsg"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1SubseaPressureROSPlugin/#variable-farolstackdepthpub","text":"ros::Publisher farolStackDepthPub; Additional Measurement ROS topic specific for depth msgs into stack. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable farolStackDepthPub"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/","text":"gazebo::UnderwaterCameraROSPlugin Inherits from DepthCameraPlugin, GazeboRosCameraUtils Public Functions Name UnderwaterCameraROSPlugin () Class constructor. virtual ~UnderwaterCameraROSPlugin () Class destructor. void Load (sensors::SensorPtr _sensor, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. virtual void OnNewDepthFrame (const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) virtual void OnNewRGBPointCloud (const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewImageFrame (const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Protected Functions Name virtual void SimulateUnderwater (const cv::Mat & _inputImage, const cv::Mat & _inputDepth, cv::Mat & _outputImage) Add underwater light damping to image. Protected Attributes Name const float * lastDepth Temporarily store pointer to previous depth image. unsigned char * lastImage Latest simulated image. float * depth2rangeLUT Depth to range lookup table (LUT) float attenuation Attenuation constants per channel (RGB) unsigned char background Background constants per channel (RGB) Public Functions Documentation function UnderwaterCameraROSPlugin UnderwaterCameraROSPlugin() Class constructor. function ~UnderwaterCameraROSPlugin virtual ~UnderwaterCameraROSPlugin() Class destructor. function Load void Load( sensors::SensorPtr _sensor, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf. function OnNewDepthFrame virtual void OnNewDepthFrame( const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) function OnNewRGBPointCloud virtual void OnNewRGBPointCloud( const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller. function OnNewImageFrame virtual void OnNewImageFrame( const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Protected Functions Documentation function SimulateUnderwater virtual void SimulateUnderwater( const cv::Mat & _inputImage, const cv::Mat & _inputDepth, cv::Mat & _outputImage ) Add underwater light damping to image. Protected Attributes Documentation variable lastDepth const float * lastDepth; Temporarily store pointer to previous depth image. variable lastImage unsigned char * lastImage; Latest simulated image. variable depth2rangeLUT float * depth2rangeLUT; Depth to range lookup table (LUT) variable attenuation float attenuation; Attenuation constants per channel (RGB) variable background unsigned char background; Background constants per channel (RGB) Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::UnderwaterCameraROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#gazebounderwatercamerarosplugin","text":"Inherits from DepthCameraPlugin, GazeboRosCameraUtils","title":"gazebo::UnderwaterCameraROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#public-functions","text":"Name UnderwaterCameraROSPlugin () Class constructor. virtual ~UnderwaterCameraROSPlugin () Class destructor. void Load (sensors::SensorPtr _sensor, sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. virtual void OnNewDepthFrame (const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) virtual void OnNewRGBPointCloud (const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format) Update the controller. virtual void OnNewImageFrame (const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#protected-functions","text":"Name virtual void SimulateUnderwater (const cv::Mat & _inputImage, const cv::Mat & _inputDepth, cv::Mat & _outputImage) Add underwater light damping to image.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#protected-attributes","text":"Name const float * lastDepth Temporarily store pointer to previous depth image. unsigned char * lastImage Latest simulated image. float * depth2rangeLUT Depth to range lookup table (LUT) float attenuation Attenuation constants per channel (RGB) unsigned char background Background constants per channel (RGB)","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-underwatercamerarosplugin","text":"UnderwaterCameraROSPlugin() Class constructor.","title":"function UnderwaterCameraROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-underwatercamerarosplugin_1","text":"virtual ~UnderwaterCameraROSPlugin() Class destructor.","title":"function ~UnderwaterCameraROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-load","text":"void Load( sensors::SensorPtr _sensor, sdf::ElementPtr _sdf ) Load plugin and its configuration from sdf.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-onnewdepthframe","text":"virtual void OnNewDepthFrame( const float * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format )","title":"function OnNewDepthFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-onnewrgbpointcloud","text":"virtual void OnNewRGBPointCloud( const float * _pcd, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format ) Update the controller.","title":"function OnNewRGBPointCloud"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-onnewimageframe","text":"virtual void OnNewImageFrame( const unsigned char * _image, unsigned int _width, unsigned int _height, unsigned int _depth, const std::string & _format )","title":"function OnNewImageFrame"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#function-simulateunderwater","text":"virtual void SimulateUnderwater( const cv::Mat & _inputImage, const cv::Mat & _inputDepth, cv::Mat & _outputImage ) Add underwater light damping to image.","title":"function SimulateUnderwater"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#variable-lastdepth","text":"const float * lastDepth; Temporarily store pointer to previous depth image.","title":"variable lastDepth"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#variable-lastimage","text":"unsigned char * lastImage; Latest simulated image.","title":"variable lastImage"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#variable-depth2rangelut","text":"float * depth2rangeLUT; Depth to range lookup table (LUT)","title":"variable depth2rangeLUT"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#variable-attenuation","text":"float attenuation; Attenuation constants per channel (RGB)","title":"variable attenuation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1UnderwaterCameraROSPlugin/#variable-background","text":"unsigned char background; Background constants per channel (RGB) Updated on 2022-11-24 at 19:19:34 +0000","title":"variable background"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/","text":"gazebo::modemPlugin Inherits from ModelPlugin Public Functions Name modemPlugin () ~modemPlugin () void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) void iisRosCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void cisRosCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void payloadToTransmitCallback (const std_msgs::StringConstPtr & payload) void queueThread () void publishPosition (double & bearing, double & range, double & elevation) void calcuateRelativePose (ignition::math::Vector3d position, double & bearing, double & range, double & elevation) Public Functions Documentation function modemPlugin modemPlugin() function ~modemPlugin ~modemPlugin() function Load void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) function iisRosCallback void iisRosCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position ) function cisRosCallback void cisRosCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position ) function payloadToTransmitCallback void payloadToTransmitCallback( const std_msgs::StringConstPtr & payload ) function queueThread void queueThread() function publishPosition void publishPosition( double & bearing, double & range, double & elevation ) function calcuateRelativePose void calcuateRelativePose( ignition::math::Vector3d position, double & bearing, double & range, double & elevation ) Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::modemPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#gazebomodemplugin","text":"Inherits from ModelPlugin","title":"gazebo::modemPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#public-functions","text":"Name modemPlugin () ~modemPlugin () void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) void iisRosCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void cisRosCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void payloadToTransmitCallback (const std_msgs::StringConstPtr & payload) void queueThread () void publishPosition (double & bearing, double & range, double & elevation) void calcuateRelativePose (ignition::math::Vector3d position, double & bearing, double & range, double & elevation)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-modemplugin","text":"modemPlugin()","title":"function modemPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-modemplugin_1","text":"~modemPlugin()","title":"function ~modemPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-load","text":"void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-iisroscallback","text":"void iisRosCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position )","title":"function iisRosCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-cisroscallback","text":"void cisRosCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position )","title":"function cisRosCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-payloadtotransmitcallback","text":"void payloadToTransmitCallback( const std_msgs::StringConstPtr & payload )","title":"function payloadToTransmitCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-queuethread","text":"void queueThread()","title":"function queueThread"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-publishposition","text":"void publishPosition( double & bearing, double & range, double & elevation )","title":"function publishPosition"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1modemPlugin/#function-calcuaterelativepose","text":"void calcuateRelativePose( ignition::math::Vector3d position, double & bearing, double & range, double & elevation ) Updated on 2022-11-24 at 19:19:34 +0000","title":"function calcuateRelativePose"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/","text":"gazebo::usblPlugin Inherits from ModelPlugin Public Functions Name usblPlugin () ~usblPlugin () void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) void sendPing (const ros::TimerEvent & ) void channelSwitchCallback (const std_msgs::StringConstPtr & msg) void interrogationModeRosCallback (const std_msgs::StringConstPtr & msg) void receiveModemPoseCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void publishPosition (double & bearing, double & range, double & elevation) void calcuateRelativePose (ignition::math::Vector3d position, double & bearing, double & range, double & elevation) void payloadToTransmitCallback (const std_msgs::StringConstPtr & payload) void enablePingerCallback (const std_msgs::BoolConstPtr & msg) void queueThread () int getIndex (std::string elem) Public Attributes Name std::string m_namespace std::string m_usblDevice std::string m_usblID std::string m_modemAttachedObject std::string m_usblAttachedObject std::string m_channel std::string m_interrogationMode std::string m_pingerScheduler Public Functions Documentation function usblPlugin usblPlugin() function ~usblPlugin ~usblPlugin() function Load void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) SDF PARAMETERS function sendPing void sendPing( const ros::TimerEvent & ) function channelSwitchCallback void channelSwitchCallback( const std_msgs::StringConstPtr & msg ) function interrogationModeRosCallback void interrogationModeRosCallback( const std_msgs::StringConstPtr & msg ) function receiveModemPoseCallback void receiveModemPoseCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position ) function publishPosition void publishPosition( double & bearing, double & range, double & elevation ) function calcuateRelativePose void calcuateRelativePose( ignition::math::Vector3d position, double & bearing, double & range, double & elevation ) function payloadToTransmitCallback void payloadToTransmitCallback( const std_msgs::StringConstPtr & payload ) function enablePingerCallback void enablePingerCallback( const std_msgs::BoolConstPtr & msg ) function queueThread void queueThread() function getIndex int getIndex( std::string elem ) Public Attributes Documentation variable m_namespace std::string m_namespace; variable m_usblDevice std::string m_usblDevice; variable m_usblID std::string m_usblID; variable m_modemAttachedObject std::string m_modemAttachedObject; variable m_usblAttachedObject std::string m_usblAttachedObject; variable m_channel std::string m_channel = \"1\"; variable m_interrogationMode std::string m_interrogationMode; variable m_pingerScheduler std::string m_pingerScheduler = \"1\"; Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::usblPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#gazebousblplugin","text":"Inherits from ModelPlugin","title":"gazebo::usblPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#public-functions","text":"Name usblPlugin () ~usblPlugin () void Load (physics::ModelPtr _model, sdf::ElementPtr _sdf) void sendPing (const ros::TimerEvent & ) void channelSwitchCallback (const std_msgs::StringConstPtr & msg) void interrogationModeRosCallback (const std_msgs::StringConstPtr & msg) void receiveModemPoseCallback (uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position) void publishPosition (double & bearing, double & range, double & elevation) void calcuateRelativePose (ignition::math::Vector3d position, double & bearing, double & range, double & elevation) void payloadToTransmitCallback (const std_msgs::StringConstPtr & payload) void enablePingerCallback (const std_msgs::BoolConstPtr & msg) void queueThread () int getIndex (std::string elem)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#public-attributes","text":"Name std::string m_namespace std::string m_usblDevice std::string m_usblID std::string m_modemAttachedObject std::string m_usblAttachedObject std::string m_channel std::string m_interrogationMode std::string m_pingerScheduler","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-usblplugin","text":"usblPlugin()","title":"function usblPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-usblplugin_1","text":"~usblPlugin()","title":"function ~usblPlugin"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-load","text":"void Load( physics::ModelPtr _model, sdf::ElementPtr _sdf ) SDF PARAMETERS","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-sendping","text":"void sendPing( const ros::TimerEvent & )","title":"function sendPing"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-channelswitchcallback","text":"void channelSwitchCallback( const std_msgs::StringConstPtr & msg )","title":"function channelSwitchCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-interrogationmoderoscallback","text":"void interrogationModeRosCallback( const std_msgs::StringConstPtr & msg )","title":"function interrogationModeRosCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-receivemodemposecallback","text":"void receiveModemPoseCallback( uuv_sensor_ros_plugins_msgs::modemLocationConstPtr modem_position )","title":"function receiveModemPoseCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-publishposition","text":"void publishPosition( double & bearing, double & range, double & elevation )","title":"function publishPosition"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-calcuaterelativepose","text":"void calcuateRelativePose( ignition::math::Vector3d position, double & bearing, double & range, double & elevation )","title":"function calcuateRelativePose"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-payloadtotransmitcallback","text":"void payloadToTransmitCallback( const std_msgs::StringConstPtr & payload )","title":"function payloadToTransmitCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-enablepingercallback","text":"void enablePingerCallback( const std_msgs::BoolConstPtr & msg )","title":"function enablePingerCallback"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-queuethread","text":"void queueThread()","title":"function queueThread"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#function-getindex","text":"int getIndex( std::string elem )","title":"function getIndex"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_namespace","text":"std::string m_namespace;","title":"variable m_namespace"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_usbldevice","text":"std::string m_usblDevice;","title":"variable m_usblDevice"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_usblid","text":"std::string m_usblID;","title":"variable m_usblID"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_modemattachedobject","text":"std::string m_modemAttachedObject;","title":"variable m_modemAttachedObject"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_usblattachedobject","text":"std::string m_usblAttachedObject;","title":"variable m_usblAttachedObject"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_channel","text":"std::string m_channel = \"1\";","title":"variable m_channel"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_interrogationmode","text":"std::string m_interrogationMode;","title":"variable m_interrogationMode"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classgazebo_1_1usblPlugin/#variable-m_pingerscheduler","text":"std::string m_pingerScheduler = \"1\"; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable m_pingerScheduler"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classtest__urdf__files_1_1TestURDFFiles/","text":"test_urdf_files::TestURDFFiles Inherits from TestCase Public Functions Name def test_xacro (self self) Public Functions Documentation function test_xacro def test_xacro( self self ) Updated on 2022-11-24 at 19:19:34 +0000","title":"test_urdf_files::TestURDFFiles"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classtest__urdf__files_1_1TestURDFFiles/#test_urdf_filestesturdffiles","text":"Inherits from TestCase","title":"test_urdf_files::TestURDFFiles"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classtest__urdf__files_1_1TestURDFFiles/#public-functions","text":"Name def test_xacro (self self)","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classtest__urdf__files_1_1TestURDFFiles/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/classtest__urdf__files_1_1TestURDFFiles/#function-test_xacro","text":"def test_xacro( self self ) Updated on 2022-11-24 at 19:19:34 +0000","title":"function test_xacro"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/","text":"title: gazebo::IMUParameters summary: IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics. gazebo::IMUParameters IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . #include <IMUROSPlugin.hh> Public Functions Name IMUParameters () Constructor. Public Attributes Name double gyroscopeNoiseDensity Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. double gyroscopeRandomWalk Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. double gyroscopeBiasCorrelationTime Gyroscope bias correlation time constant [s]. double gyroscopeTurnOnBiasSigma Gyroscope turn on bias standard deviation [rad/s]. double accelerometerNoiseDensity Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. double accelerometerRandomWalk Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. double accelerometerBiasCorrelationTime Accelerometer bias correlation time constant [s]. double accelerometerTurnOnBiasSigma Accelerometer turn on bias standard deviation [m/s^2]. double orientationNoise Standard deviation of orientation noise per axis [rad]. Public Functions Documentation function IMUParameters inline IMUParameters() Constructor. Public Attributes Documentation variable gyroscopeNoiseDensity double gyroscopeNoiseDensity; Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. variable gyroscopeRandomWalk double gyroscopeRandomWalk; Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. variable gyroscopeBiasCorrelationTime double gyroscopeBiasCorrelationTime; Gyroscope bias correlation time constant [s]. variable gyroscopeTurnOnBiasSigma double gyroscopeTurnOnBiasSigma; Gyroscope turn on bias standard deviation [rad/s]. variable accelerometerNoiseDensity double accelerometerNoiseDensity; Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. variable accelerometerRandomWalk double accelerometerRandomWalk; Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. variable accelerometerBiasCorrelationTime double accelerometerBiasCorrelationTime; Accelerometer bias correlation time constant [s]. variable accelerometerTurnOnBiasSigma double accelerometerTurnOnBiasSigma; Accelerometer turn on bias standard deviation [m/s^2]. variable orientationNoise double orientationNoise; Standard deviation of orientation noise per axis [rad]. Updated on 2022-11-24 at 19:19:34 +0000","title":"structgazebo 1 1IMUParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#gazeboimuparameters","text":"IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . #include <IMUROSPlugin.hh>","title":"gazebo::IMUParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#public-functions","text":"Name IMUParameters () Constructor.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#public-attributes","text":"Name double gyroscopeNoiseDensity Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. double gyroscopeRandomWalk Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. double gyroscopeBiasCorrelationTime Gyroscope bias correlation time constant [s]. double gyroscopeTurnOnBiasSigma Gyroscope turn on bias standard deviation [rad/s]. double accelerometerNoiseDensity Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. double accelerometerRandomWalk Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. double accelerometerBiasCorrelationTime Accelerometer bias correlation time constant [s]. double accelerometerTurnOnBiasSigma Accelerometer turn on bias standard deviation [m/s^2]. double orientationNoise Standard deviation of orientation noise per axis [rad].","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#function-imuparameters","text":"inline IMUParameters() Constructor.","title":"function IMUParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-gyroscopenoisedensity","text":"double gyroscopeNoiseDensity; Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)].","title":"variable gyroscopeNoiseDensity"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-gyroscoperandomwalk","text":"double gyroscopeRandomWalk; Gyroscope bias random walk [rad/s/s/sqrt(Hz)].","title":"variable gyroscopeRandomWalk"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-gyroscopebiascorrelationtime","text":"double gyroscopeBiasCorrelationTime; Gyroscope bias correlation time constant [s].","title":"variable gyroscopeBiasCorrelationTime"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-gyroscopeturnonbiassigma","text":"double gyroscopeTurnOnBiasSigma; Gyroscope turn on bias standard deviation [rad/s].","title":"variable gyroscopeTurnOnBiasSigma"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-accelerometernoisedensity","text":"double accelerometerNoiseDensity; Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)].","title":"variable accelerometerNoiseDensity"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-accelerometerrandomwalk","text":"double accelerometerRandomWalk; Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)].","title":"variable accelerometerRandomWalk"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-accelerometerbiascorrelationtime","text":"double accelerometerBiasCorrelationTime; Accelerometer bias correlation time constant [s].","title":"variable accelerometerBiasCorrelationTime"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-accelerometerturnonbiassigma","text":"double accelerometerTurnOnBiasSigma; Accelerometer turn on bias standard deviation [m/s^2].","title":"variable accelerometerTurnOnBiasSigma"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1IMUParameters/#variable-orientationnoise","text":"double orientationNoise; Standard deviation of orientation noise per axis [rad]. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable orientationNoise"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/","text":"gazebo::MagnetometerParameters Public Attributes Name double intensity Intensity of reference earth magnetic field [muT]. double heading Heading angle of reference earth magnetic field [rad]. double declination Declination of reference earth magnetic field [rad]. double inclination Inclination of reference earth magnetic field [rad]. double noiseXY Discrete-time standard dev. of output noise in xy-axis [muT]. double noiseZ Discrete-time standard dev. of output noise in z-axis [muT]. double turnOnBias Standard deviation of constant systematic offset of measurements [muT]. Public Attributes Documentation variable intensity double intensity; Intensity of reference earth magnetic field [muT]. variable heading double heading; Heading angle of reference earth magnetic field [rad]. variable declination double declination; Declination of reference earth magnetic field [rad]. variable inclination double inclination; Inclination of reference earth magnetic field [rad]. variable noiseXY double noiseXY; Discrete-time standard dev. of output noise in xy-axis [muT]. variable noiseZ double noiseZ; Discrete-time standard dev. of output noise in z-axis [muT]. variable turnOnBias double turnOnBias; Standard deviation of constant systematic offset of measurements [muT]. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::MagnetometerParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#gazebomagnetometerparameters","text":"","title":"gazebo::MagnetometerParameters"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#public-attributes","text":"Name double intensity Intensity of reference earth magnetic field [muT]. double heading Heading angle of reference earth magnetic field [rad]. double declination Declination of reference earth magnetic field [rad]. double inclination Inclination of reference earth magnetic field [rad]. double noiseXY Discrete-time standard dev. of output noise in xy-axis [muT]. double noiseZ Discrete-time standard dev. of output noise in z-axis [muT]. double turnOnBias Standard deviation of constant systematic offset of measurements [muT].","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-intensity","text":"double intensity; Intensity of reference earth magnetic field [muT].","title":"variable intensity"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-heading","text":"double heading; Heading angle of reference earth magnetic field [rad].","title":"variable heading"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-declination","text":"double declination; Declination of reference earth magnetic field [rad].","title":"variable declination"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-inclination","text":"double inclination; Inclination of reference earth magnetic field [rad].","title":"variable inclination"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-noisexy","text":"double noiseXY; Discrete-time standard dev. of output noise in xy-axis [muT].","title":"variable noiseXY"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-noisez","text":"double noiseZ; Discrete-time standard dev. of output noise in z-axis [muT].","title":"variable noiseZ"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Classes/structgazebo_1_1MagnetometerParameters/#variable-turnonbias","text":"double turnOnBias; Standard deviation of constant systematic offset of measurements [muT]. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable turnOnBias"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/","text":"Namespaces namespace cv namespace gazebo namespace std namespace test_urdf_files Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/#namespaces","text":"namespace cv namespace gazebo namespace std namespace test_urdf_files Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacecv/","text":"cv Updated on 2022-11-24 at 19:19:34 +0000","title":"cv"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacecv/#cv","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"cv"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/","text":"gazebo More... Classes Name class gazebo::AltimeterROSPlugin class gazebo::CPCROSPlugin class gazebo::DVLROSPlugin class gazebo::GazeboRosImageSonar class gazebo::GPSROSPlugin class gazebo::GstCameraPlugin struct gazebo::IMUParameters IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . class gazebo::IMUROSPlugin struct gazebo::MagnetometerParameters class gazebo::MagnetometerROSPlugin class gazebo::modemPlugin class gazebo::PoseGTROSPlugin class gazebo::ROSBaseModelPlugin class gazebo::ROSBasePlugin class gazebo::ROSBaseSensorPlugin class gazebo::RPTROSPlugin class gazebo::SubseaPressureROSPlugin class gazebo::UnderwaterCameraROSPlugin class gazebo::usblPlugin Functions Name template <class T > bool GetSDFParam (sdf::ElementPtr sdf, const std::string & name, T & param, const T & default_value, const bool & verbose =false) Obtains a parameter from sdf. Detailed Description Author : Jose Capriles. Jose Capriles, Bence Magyar. Functions Documentation function GetSDFParam template <class T > bool GetSDFParam( sdf::ElementPtr sdf, const std::string & name, T & param, const T & default_value, const bool & verbose =false ) Obtains a parameter from sdf. Parameters : sdf Pointer to the sdf object. name Name of the parameter. param Param Variable to write the parameter to. default_value Default value, if the parameter not available. verbose If true, gzerror if the parameter is not available. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#gazebo","text":"More...","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#classes","text":"Name class gazebo::AltimeterROSPlugin class gazebo::CPCROSPlugin class gazebo::DVLROSPlugin class gazebo::GazeboRosImageSonar class gazebo::GPSROSPlugin class gazebo::GstCameraPlugin struct gazebo::IMUParameters IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . class gazebo::IMUROSPlugin struct gazebo::MagnetometerParameters class gazebo::MagnetometerROSPlugin class gazebo::modemPlugin class gazebo::PoseGTROSPlugin class gazebo::ROSBaseModelPlugin class gazebo::ROSBasePlugin class gazebo::ROSBaseSensorPlugin class gazebo::RPTROSPlugin class gazebo::SubseaPressureROSPlugin class gazebo::UnderwaterCameraROSPlugin class gazebo::usblPlugin","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#functions","text":"Name template <class T > bool GetSDFParam (sdf::ElementPtr sdf, const std::string & name, T & param, const T & default_value, const bool & verbose =false) Obtains a parameter from sdf.","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#detailed-description","text":"Author : Jose Capriles. Jose Capriles, Bence Magyar.","title":"Detailed Description"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacegazebo/#function-getsdfparam","text":"template <class T > bool GetSDFParam( sdf::ElementPtr sdf, const std::string & name, T & param, const T & default_value, const bool & verbose =false ) Obtains a parameter from sdf. Parameters : sdf Pointer to the sdf object. name Name of the parameter. param Param Variable to write the parameter to. default_value Default value, if the parameter not available. verbose If true, gzerror if the parameter is not available. Updated on 2022-11-24 at 19:19:34 +0000","title":"function GetSDFParam"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacestd/","text":"std Updated on 2022-11-24 at 19:19:34 +0000","title":"std"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacestd/#std","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"std"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/","text":"test_urdf_files Classes Name class test_urdf_files::TestURDFFiles Functions Name def call_xacro (xml_file xml_file) Attributes Name string PKG string NAME Functions Documentation function call_xacro def call_xacro( xml_file xml_file ) Attributes Documentation variable PKG string PKG = 'uuv_sensor_ros_plugins'; variable NAME string NAME = 'test_urdf_files'; Updated on 2022-11-24 at 19:19:34 +0000","title":"test_urdf_files"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#test_urdf_files","text":"","title":"test_urdf_files"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#classes","text":"Name class test_urdf_files::TestURDFFiles","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#functions","text":"Name def call_xacro (xml_file xml_file)","title":"Functions"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#attributes","text":"Name string PKG string NAME","title":"Attributes"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#function-call_xacro","text":"def call_xacro( xml_file xml_file )","title":"function call_xacro"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#variable-pkg","text":"string PKG = 'uuv_sensor_ros_plugins';","title":"variable PKG"},{"location":"api/markdown/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/Namespaces/namespacetest__urdf__files/#variable-name","text":"string NAME = 'test_urdf_files'; Updated on 2022-11-24 at 19:19:34 +0000","title":"variable NAME"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/","text":"Classes namespace gazebo class GaussMarkovProcess Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. class UnderwaterCurrentPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/#classes","text":"namespace gazebo class GaussMarkovProcess Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. class UnderwaterCurrentPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/","text":"gazebo::GaussMarkovProcess Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. #include <GaussMarkovProcess.hh> Public Functions Name GaussMarkovProcess () Class constructor. void Reset () Resets the process parameters. bool SetModel (double _mean, double _min, double _max, double _mu =0, double _noise =0) Sets all the necessary parameters for the computation. bool SetMean (double _mean) Set mean process value. double Update (double _time) Update function for a new time stamp. void Print () Print current model paramters. Public Attributes Name double var Process variable. double mean Mean process value. double min Minimum limit for the process variable. double max Maximum limit for the process variable. double mu Process constant, if zero, process becomes a random walk. double noiseAmp Gaussian white noise amplitude. double lastUpdate Timestamp for the last update. Public Functions Documentation function GaussMarkovProcess GaussMarkovProcess() Class constructor. function Reset void Reset() Resets the process parameters. function SetModel bool SetModel( double _mean, double _min, double _max, double _mu =0, double _noise =0 ) Sets all the necessary parameters for the computation. Parameters : _mean Mean value _min Minimum limit _max Maximum limit _mu Process constant _noise Amplitude for the Gaussian white noise Return : True, if all parameters were valid function SetMean bool SetMean( double _mean ) Set mean process value. Parameters : _mean New mean value Return : True, if value inside the limit range function Update double Update( double _time ) Update function for a new time stamp. Parameters : _time Current time stamp function Print void Print() Print current model paramters. Public Attributes Documentation variable var double var; Process variable. variable mean double mean; Mean process value. variable min double min; Minimum limit for the process variable. variable max double max; Maximum limit for the process variable. variable mu double mu; Process constant, if zero, process becomes a random walk. variable noiseAmp double noiseAmp; Gaussian white noise amplitude. variable lastUpdate double lastUpdate; Timestamp for the last update. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::GaussMarkovProcess"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#gazebogaussmarkovprocess","text":"Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. #include <GaussMarkovProcess.hh>","title":"gazebo::GaussMarkovProcess"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#public-functions","text":"Name GaussMarkovProcess () Class constructor. void Reset () Resets the process parameters. bool SetModel (double _mean, double _min, double _max, double _mu =0, double _noise =0) Sets all the necessary parameters for the computation. bool SetMean (double _mean) Set mean process value. double Update (double _time) Update function for a new time stamp. void Print () Print current model paramters.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#public-attributes","text":"Name double var Process variable. double mean Mean process value. double min Minimum limit for the process variable. double max Maximum limit for the process variable. double mu Process constant, if zero, process becomes a random walk. double noiseAmp Gaussian white noise amplitude. double lastUpdate Timestamp for the last update.","title":"Public Attributes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-gaussmarkovprocess","text":"GaussMarkovProcess() Class constructor.","title":"function GaussMarkovProcess"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-reset","text":"void Reset() Resets the process parameters.","title":"function Reset"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-setmodel","text":"bool SetModel( double _mean, double _min, double _max, double _mu =0, double _noise =0 ) Sets all the necessary parameters for the computation. Parameters : _mean Mean value _min Minimum limit _max Maximum limit _mu Process constant _noise Amplitude for the Gaussian white noise Return : True, if all parameters were valid","title":"function SetModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-setmean","text":"bool SetMean( double _mean ) Set mean process value. Parameters : _mean New mean value Return : True, if value inside the limit range","title":"function SetMean"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-update","text":"double Update( double _time ) Update function for a new time stamp. Parameters : _time Current time stamp","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#function-print","text":"void Print() Print current model paramters.","title":"function Print"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-var","text":"double var; Process variable.","title":"variable var"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-mean","text":"double mean; Mean process value.","title":"variable mean"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-min","text":"double min; Minimum limit for the process variable.","title":"variable min"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-max","text":"double max; Maximum limit for the process variable.","title":"variable max"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-mu","text":"double mu; Process constant, if zero, process becomes a random walk.","title":"variable mu"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-noiseamp","text":"double noiseAmp; Gaussian white noise amplitude.","title":"variable noiseAmp"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1GaussMarkovProcess/#variable-lastupdate","text":"double lastUpdate; Timestamp for the last update. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable lastUpdate"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/","text":"title: gazebo::UnderwaterCurrentPlugin summary: Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. gazebo::UnderwaterCurrentPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. #include <UnderwaterCurrentPlugin.hh> Inherits from WorldPlugin Public Functions Name UnderwaterCurrentPlugin () Class constructor. virtual ~UnderwaterCurrentPlugin () Class destructor. virtual void Load (physics::WorldPtr _world, sdf::ElementPtr _sdf) virtual void Init () void Update (const common::UpdateInfo & _info) Update the simulation state. Protected Functions Name void PublishCurrentVelocity () Publish current velocity and the pose of its frame. Protected Attributes Name event::ConnectionPtr updateConnection Update event. physics::WorldPtr world Pointer to world. sdf::ElementPtr sdf Pointer to sdf. bool hasSurface True if the sea surface is present. transport::NodePtr node Pointer to a node for communication. std::map< std::string, transport::PublisherPtr > publishers Map of publishers. std::string currentVelocityTopic Current velocity topic. std::string ns Namespace for topics and services. GaussMarkovProcess currentVelModel Gauss-Markov process instance for the current velocity. GaussMarkovProcess currentHorzAngleModel Gauss-Markov process instance for horizontal angle model. GaussMarkovProcess currentVertAngleModel Gauss-Markov process instance for vertical angle model. common::Time lastUpdate Last update time stamp. ignition::math::Vector3d currentVelocity Current linear velocity vector. Public Functions Documentation function UnderwaterCurrentPlugin UnderwaterCurrentPlugin() Class constructor. function ~UnderwaterCurrentPlugin virtual ~UnderwaterCurrentPlugin() Class destructor. function Load virtual void Load( physics::WorldPtr _world, sdf::ElementPtr _sdf ) function Init virtual void Init() function Update void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event. Protected Functions Documentation function PublishCurrentVelocity void PublishCurrentVelocity() Publish current velocity and the pose of its frame. Protected Attributes Documentation variable updateConnection event::ConnectionPtr updateConnection; Update event. variable world physics::WorldPtr world; Pointer to world. variable sdf sdf::ElementPtr sdf; Pointer to sdf. variable hasSurface bool hasSurface; True if the sea surface is present. variable node transport::NodePtr node; Pointer to a node for communication. variable publishers std::map< std::string, transport::PublisherPtr > publishers; Map of publishers. variable currentVelocityTopic std::string currentVelocityTopic; Current velocity topic. variable ns std::string ns; Namespace for topics and services. variable currentVelModel GaussMarkovProcess currentVelModel; Gauss-Markov process instance for the current velocity. variable currentHorzAngleModel GaussMarkovProcess currentHorzAngleModel; Gauss-Markov process instance for horizontal angle model. variable currentVertAngleModel GaussMarkovProcess currentVertAngleModel; Gauss-Markov process instance for vertical angle model. variable lastUpdate common::Time lastUpdate; Last update time stamp. variable currentVelocity ignition::math::Vector3d currentVelocity; Current linear velocity vector. Updated on 2022-11-24 at 19:19:34 +0000","title":"classgazebo 1 1UnderwaterCurrentPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#gazebounderwatercurrentplugin","text":"Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. #include <UnderwaterCurrentPlugin.hh> Inherits from WorldPlugin","title":"gazebo::UnderwaterCurrentPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#public-functions","text":"Name UnderwaterCurrentPlugin () Class constructor. virtual ~UnderwaterCurrentPlugin () Class destructor. virtual void Load (physics::WorldPtr _world, sdf::ElementPtr _sdf) virtual void Init () void Update (const common::UpdateInfo & _info) Update the simulation state.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#protected-functions","text":"Name void PublishCurrentVelocity () Publish current velocity and the pose of its frame.","title":"Protected Functions"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#protected-attributes","text":"Name event::ConnectionPtr updateConnection Update event. physics::WorldPtr world Pointer to world. sdf::ElementPtr sdf Pointer to sdf. bool hasSurface True if the sea surface is present. transport::NodePtr node Pointer to a node for communication. std::map< std::string, transport::PublisherPtr > publishers Map of publishers. std::string currentVelocityTopic Current velocity topic. std::string ns Namespace for topics and services. GaussMarkovProcess currentVelModel Gauss-Markov process instance for the current velocity. GaussMarkovProcess currentHorzAngleModel Gauss-Markov process instance for horizontal angle model. GaussMarkovProcess currentVertAngleModel Gauss-Markov process instance for vertical angle model. common::Time lastUpdate Last update time stamp. ignition::math::Vector3d currentVelocity Current linear velocity vector.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-underwatercurrentplugin","text":"UnderwaterCurrentPlugin() Class constructor.","title":"function UnderwaterCurrentPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-underwatercurrentplugin_1","text":"virtual ~UnderwaterCurrentPlugin() Class destructor.","title":"function ~UnderwaterCurrentPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-load","text":"virtual void Load( physics::WorldPtr _world, sdf::ElementPtr _sdf )","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-init","text":"virtual void Init()","title":"function Init"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-update","text":"void Update( const common::UpdateInfo & _info ) Update the simulation state. Parameters : _info Information used in the update event.","title":"function Update"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#function-publishcurrentvelocity","text":"void PublishCurrentVelocity() Publish current velocity and the pose of its frame.","title":"function PublishCurrentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-updateconnection","text":"event::ConnectionPtr updateConnection; Update event.","title":"variable updateConnection"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-world","text":"physics::WorldPtr world; Pointer to world.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-sdf","text":"sdf::ElementPtr sdf; Pointer to sdf.","title":"variable sdf"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-hassurface","text":"bool hasSurface; True if the sea surface is present.","title":"variable hasSurface"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-node","text":"transport::NodePtr node; Pointer to a node for communication.","title":"variable node"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-publishers","text":"std::map< std::string, transport::PublisherPtr > publishers; Map of publishers.","title":"variable publishers"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-currentvelocitytopic","text":"std::string currentVelocityTopic; Current velocity topic.","title":"variable currentVelocityTopic"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-ns","text":"std::string ns; Namespace for topics and services.","title":"variable ns"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-currentvelmodel","text":"GaussMarkovProcess currentVelModel; Gauss-Markov process instance for the current velocity.","title":"variable currentVelModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-currenthorzanglemodel","text":"GaussMarkovProcess currentHorzAngleModel; Gauss-Markov process instance for horizontal angle model.","title":"variable currentHorzAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-currentvertanglemodel","text":"GaussMarkovProcess currentVertAngleModel; Gauss-Markov process instance for vertical angle model.","title":"variable currentVertAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-lastupdate","text":"common::Time lastUpdate; Last update time stamp.","title":"variable lastUpdate"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Classes/classgazebo_1_1UnderwaterCurrentPlugin/#variable-currentvelocity","text":"ignition::math::Vector3d currentVelocity; Current linear velocity vector. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable currentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Namespaces/","text":"Namespaces namespace gazebo Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Namespaces/#namespaces","text":"namespace gazebo Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Namespaces/namespacegazebo/","text":"gazebo Classes Name class gazebo::GaussMarkovProcess Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. class gazebo::UnderwaterCurrentPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Namespaces/namespacegazebo/#gazebo","text":"","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_plugins/Namespaces/namespacegazebo/#classes","text":"Name class gazebo::GaussMarkovProcess Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. class gazebo::UnderwaterCurrentPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/","text":"Classes namespace gazebo class SphericalCoordinatesROSInterfacePlugin namespace uuv_simulator_ros class UnderwaterCurrentROSPlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/#classes","text":"namespace gazebo class SphericalCoordinatesROSInterfacePlugin namespace uuv_simulator_ros class UnderwaterCurrentROSPlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/","text":"gazebo::SphericalCoordinatesROSInterfacePlugin Inherits from WorldPlugin Public Functions Name SphericalCoordinatesROSInterfacePlugin () Constructor. virtual ~SphericalCoordinatesROSInterfacePlugin () Destructor. void Load (physics::WorldPtr _world, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool GetOriginSphericalCoord (uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. bool SetOriginSphericalCoord (uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. bool TransformToSphericalCoord (uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res) Service call to transform from Cartesian to spherical coordinates. bool TransformFromSphericalCoord (uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res) Service call to transform from spherical to Cartesian coordinates. Protected Attributes Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. physics::WorldPtr world Pointer to world. std::map< std::string, ros::ServiceServer > worldServices All underwater world services. Public Functions Documentation function SphericalCoordinatesROSInterfacePlugin SphericalCoordinatesROSInterfacePlugin() Constructor. function ~SphericalCoordinatesROSInterfacePlugin virtual ~SphericalCoordinatesROSInterfacePlugin() Destructor. function Load void Load( physics::WorldPtr _world, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function GetOriginSphericalCoord bool GetOriginSphericalCoord( uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res ) Service call that returns the origin in WGS84 standard. function SetOriginSphericalCoord bool SetOriginSphericalCoord( uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res ) Service call that returns the origin in WGS84 standard. function TransformToSphericalCoord bool TransformToSphericalCoord( uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res ) Service call to transform from Cartesian to spherical coordinates. function TransformFromSphericalCoord bool TransformFromSphericalCoord( uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res ) Service call to transform from spherical to Cartesian coordinates. Protected Attributes Documentation variable rosNode boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle. variable rosPublishConnection event::ConnectionPtr rosPublishConnection; Connection for callbacks on update world. variable world physics::WorldPtr world; Pointer to world. variable worldServices std::map< std::string, ros::ServiceServer > worldServices; All underwater world services. Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo::SphericalCoordinatesROSInterfacePlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#gazebosphericalcoordinatesrosinterfaceplugin","text":"Inherits from WorldPlugin","title":"gazebo::SphericalCoordinatesROSInterfacePlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#public-functions","text":"Name SphericalCoordinatesROSInterfacePlugin () Constructor. virtual ~SphericalCoordinatesROSInterfacePlugin () Destructor. void Load (physics::WorldPtr _world, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool GetOriginSphericalCoord (uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. bool SetOriginSphericalCoord (uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. bool TransformToSphericalCoord (uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res) Service call to transform from Cartesian to spherical coordinates. bool TransformFromSphericalCoord (uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res) Service call to transform from spherical to Cartesian coordinates.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#protected-attributes","text":"Name boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. physics::WorldPtr world Pointer to world. std::map< std::string, ros::ServiceServer > worldServices All underwater world services.","title":"Protected Attributes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-sphericalcoordinatesrosinterfaceplugin","text":"SphericalCoordinatesROSInterfacePlugin() Constructor.","title":"function SphericalCoordinatesROSInterfacePlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-sphericalcoordinatesrosinterfaceplugin_1","text":"virtual ~SphericalCoordinatesROSInterfacePlugin() Destructor.","title":"function ~SphericalCoordinatesROSInterfacePlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-load","text":"void Load( physics::WorldPtr _world, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-getoriginsphericalcoord","text":"bool GetOriginSphericalCoord( uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res ) Service call that returns the origin in WGS84 standard.","title":"function GetOriginSphericalCoord"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-setoriginsphericalcoord","text":"bool SetOriginSphericalCoord( uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res ) Service call that returns the origin in WGS84 standard.","title":"function SetOriginSphericalCoord"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-transformtosphericalcoord","text":"bool TransformToSphericalCoord( uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res ) Service call to transform from Cartesian to spherical coordinates.","title":"function TransformToSphericalCoord"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#function-transformfromsphericalcoord","text":"bool TransformFromSphericalCoord( uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req, uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res ) Service call to transform from spherical to Cartesian coordinates.","title":"function TransformFromSphericalCoord"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#variable-rosnode","text":"boost::scoped_ptr< ros::NodeHandle > rosNode; Pointer to this ROS node's handle.","title":"variable rosNode"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#variable-rospublishconnection","text":"event::ConnectionPtr rosPublishConnection; Connection for callbacks on update world.","title":"variable rosPublishConnection"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#variable-world","text":"physics::WorldPtr world; Pointer to world.","title":"variable world"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classgazebo_1_1SphericalCoordinatesROSInterfacePlugin/#variable-worldservices","text":"std::map< std::string, ros::ServiceServer > worldServices; All underwater world services. Updated on 2022-11-24 at 19:19:34 +0000","title":"variable worldServices"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/","text":"uuv_simulator_ros::UnderwaterCurrentROSPlugin Inherits from UnderwaterCurrentPlugin Public Functions Name UnderwaterCurrentROSPlugin () Class constructor. virtual ~UnderwaterCurrentROSPlugin () Class destructor. void Load (gazebo::physics::WorldPtr _world, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool UpdateCurrentVelocityModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the velocity Gauss-Markov process model. bool UpdateCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the horizontal angle Gauss-Markov process model. bool UpdateCurrentVertAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the vertical angle Gauss-Markov process model. bool GetCurrentVelocityModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the velocity Gauss-Markov process model. bool GetCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the horizontal angle Gauss-Markov process model. bool GetCurrentVertAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the vertical angle Gauss-Markov process model. bool UpdateCurrentVelocity (uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res) Service call to update the mean value of the flow velocity. bool UpdateHorzAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the horizontal angle. bool UpdateVertAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the vertical angle. Public Functions Documentation function UnderwaterCurrentROSPlugin UnderwaterCurrentROSPlugin() Class constructor. function ~UnderwaterCurrentROSPlugin virtual ~UnderwaterCurrentROSPlugin() Class destructor. function Load void Load( gazebo::physics::WorldPtr _world, sdf::ElementPtr _sdf ) Load module and read parameters from SDF. function UpdateCurrentVelocityModel bool UpdateCurrentVelocityModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the velocity Gauss-Markov process model. function UpdateCurrentHorzAngleModel bool UpdateCurrentHorzAngleModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the horizontal angle Gauss-Markov process model. function UpdateCurrentVertAngleModel bool UpdateCurrentVertAngleModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the vertical angle Gauss-Markov process model. function GetCurrentVelocityModel bool GetCurrentVelocityModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the velocity Gauss-Markov process model. function GetCurrentHorzAngleModel bool GetCurrentHorzAngleModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the horizontal angle Gauss-Markov process model. function GetCurrentVertAngleModel bool GetCurrentVertAngleModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the vertical angle Gauss-Markov process model. function UpdateCurrentVelocity bool UpdateCurrentVelocity( uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res ) Service call to update the mean value of the flow velocity. function UpdateHorzAngle bool UpdateHorzAngle( uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res ) Service call to update the mean value of the horizontal angle. function UpdateVertAngle bool UpdateVertAngle( uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res ) Service call to update the mean value of the vertical angle. Updated on 2022-11-24 at 19:19:34 +0000","title":"uuv_simulator_ros::UnderwaterCurrentROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#uuv_simulator_rosunderwatercurrentrosplugin","text":"Inherits from UnderwaterCurrentPlugin","title":"uuv_simulator_ros::UnderwaterCurrentROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#public-functions","text":"Name UnderwaterCurrentROSPlugin () Class constructor. virtual ~UnderwaterCurrentROSPlugin () Class destructor. void Load (gazebo::physics::WorldPtr _world, sdf::ElementPtr _sdf) Load module and read parameters from SDF. bool UpdateCurrentVelocityModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the velocity Gauss-Markov process model. bool UpdateCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the horizontal angle Gauss-Markov process model. bool UpdateCurrentVertAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the vertical angle Gauss-Markov process model. bool GetCurrentVelocityModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the velocity Gauss-Markov process model. bool GetCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the horizontal angle Gauss-Markov process model. bool GetCurrentVertAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the vertical angle Gauss-Markov process model. bool UpdateCurrentVelocity (uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res) Service call to update the mean value of the flow velocity. bool UpdateHorzAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the horizontal angle. bool UpdateVertAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the vertical angle.","title":"Public Functions"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-underwatercurrentrosplugin","text":"UnderwaterCurrentROSPlugin() Class constructor.","title":"function UnderwaterCurrentROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-underwatercurrentrosplugin_1","text":"virtual ~UnderwaterCurrentROSPlugin() Class destructor.","title":"function ~UnderwaterCurrentROSPlugin"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-load","text":"void Load( gazebo::physics::WorldPtr _world, sdf::ElementPtr _sdf ) Load module and read parameters from SDF.","title":"function Load"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatecurrentvelocitymodel","text":"bool UpdateCurrentVelocityModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the velocity Gauss-Markov process model.","title":"function UpdateCurrentVelocityModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatecurrenthorzanglemodel","text":"bool UpdateCurrentHorzAngleModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the horizontal angle Gauss-Markov process model.","title":"function UpdateCurrentHorzAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatecurrentvertanglemodel","text":"bool UpdateCurrentVertAngleModel( uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res ) Service call to update the parameters for the vertical angle Gauss-Markov process model.","title":"function UpdateCurrentVertAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-getcurrentvelocitymodel","text":"bool GetCurrentVelocityModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the velocity Gauss-Markov process model.","title":"function GetCurrentVelocityModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-getcurrenthorzanglemodel","text":"bool GetCurrentHorzAngleModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the horizontal angle Gauss-Markov process model.","title":"function GetCurrentHorzAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-getcurrentvertanglemodel","text":"bool GetCurrentVertAngleModel( uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req, uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res ) Service call to read the parameters for the vertical angle Gauss-Markov process model.","title":"function GetCurrentVertAngleModel"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatecurrentvelocity","text":"bool UpdateCurrentVelocity( uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res ) Service call to update the mean value of the flow velocity.","title":"function UpdateCurrentVelocity"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatehorzangle","text":"bool UpdateHorzAngle( uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res ) Service call to update the mean value of the horizontal angle.","title":"function UpdateHorzAngle"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Classes/classuuv__simulator__ros_1_1UnderwaterCurrentROSPlugin/#function-updatevertangle","text":"bool UpdateVertAngle( uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req, uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res ) Service call to update the mean value of the vertical angle. Updated on 2022-11-24 at 19:19:34 +0000","title":"function UpdateVertAngle"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Examples/","text":"Examples Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Examples/#examples","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Examples"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Modules/","text":"Modules Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Modules/#modules","text":"Updated on 2022-11-24 at 19:19:34 +0000","title":"Modules"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/","text":"Namespaces namespace gazebo namespace uuv_simulator_ros Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/#namespaces","text":"namespace gazebo namespace uuv_simulator_ros Updated on 2022-11-24 at 19:19:34 +0000","title":"Namespaces"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespacegazebo/","text":"gazebo Classes Name class gazebo::SphericalCoordinatesROSInterfacePlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespacegazebo/#gazebo","text":"","title":"gazebo"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespacegazebo/#classes","text":"Name class gazebo::SphericalCoordinatesROSInterfacePlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespaceuuv__simulator__ros/","text":"uuv_simulator_ros Classes Name class uuv_simulator_ros::UnderwaterCurrentROSPlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"uuv_simulator_ros"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespaceuuv__simulator__ros/#uuv_simulator_ros","text":"","title":"uuv_simulator_ros"},{"location":"api/markdown/uuv_simulator/uuv_world_plugins/uuv_world_ros_plugins/Namespaces/namespaceuuv__simulator__ros/#classes","text":"Name class uuv_simulator_ros::UnderwaterCurrentROSPlugin Updated on 2022-11-24 at 19:19:34 +0000","title":"Classes"},{"location":"bluerov-regular/","text":"","title":"Overview"},{"location":"farol-gazebo-bringup/","text":"","title":"Overview"},{"location":"farol-worlds/","text":"","title":"Overview"},{"location":"pages/Acknowledgments/","text":"The Farol project results from the work and dedication of many. Share the love \u2764\ufe0f with the following members that came before you did! Active Developers Jo\u00e3o Quintas jquintas@gmail.com Marcelo Jacinto marcelo.jacinto@tecnico.ulisboa.pt David Souto david.souto@tecnico.ulisboa.pt Andr\u00e9 Potes andre.potes@tecnico.ulisboa.pt Francisco Rego ffcrego@gmail.com David Cabecinhas dcabecinhas@isr.tecnico.ulisboa.pt We also welcome the new members to the DSOR team Eduardo Cunha Daniel Rosa Previous contributors which left us with some precious legacy Jo\u00e3o Cruz Hung Tuan Shubham Garg Jorge Ribeiro Miguel Ribeiro Henrique Silva Jo\u00e3o Botelho Filipa Almeida Omnipresent members Prof. Ant\u00f3nio Pascoal Prof. Carlos Silvestre Prof. Rita Cunha Prof. Bruno Guerreiro Prof. Pedro Batista Lu\u00eds Sebasti\u00e3o Manuel Rufino Pedro Gois Helena Santana And never forget, we stand on the shoulders of giants!","title":"Acknowledgments"},{"location":"pages/Acknowledgments/#active-developers","text":"Jo\u00e3o Quintas jquintas@gmail.com Marcelo Jacinto marcelo.jacinto@tecnico.ulisboa.pt David Souto david.souto@tecnico.ulisboa.pt Andr\u00e9 Potes andre.potes@tecnico.ulisboa.pt Francisco Rego ffcrego@gmail.com David Cabecinhas dcabecinhas@isr.tecnico.ulisboa.pt","title":"Active Developers"},{"location":"pages/Acknowledgments/#we-also-welcome-the-new-members-to-the-dsor-team","text":"Eduardo Cunha Daniel Rosa","title":"We also welcome the new members to the DSOR team"},{"location":"pages/Acknowledgments/#previous-contributors-which-left-us-with-some-precious-legacy","text":"Jo\u00e3o Cruz Hung Tuan Shubham Garg Jorge Ribeiro Miguel Ribeiro Henrique Silva Jo\u00e3o Botelho Filipa Almeida","title":"Previous contributors which left us with some precious legacy"},{"location":"pages/Acknowledgments/#omnipresent-members","text":"Prof. Ant\u00f3nio Pascoal Prof. Carlos Silvestre Prof. Rita Cunha Prof. Bruno Guerreiro Prof. Pedro Batista Lu\u00eds Sebasti\u00e3o Manuel Rufino Pedro Gois Helena Santana And never forget, we stand on the shoulders of giants!","title":"Omnipresent members"},{"location":"pages/CHANGELOG/","text":"Changelog v1.1 First version of farol repository with automatic documentation generation","title":"Changelog"},{"location":"pages/CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"pages/CHANGELOG/#v11","text":"First version of farol repository with automatic documentation generation","title":"v1.1"},{"location":"pages/CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jquintas@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"pages/CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"pages/CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"pages/CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"pages/CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"pages/CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"pages/CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jquintas@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"pages/CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"pages/CONTRIBUTING/","text":"TODO","title":"Contributing"},{"location":"pages/CONTRIBUTING/#todo","text":"","title":"TODO"},{"location":"pages/LICENSE/","text":"MIT License Copyright (c) 2022 dsor-isr Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"pages/get_started/Build-the-Code/","text":"","title":"Build the Code"},{"location":"pages/get_started/Install-Guide/","text":"1. Ubuntu and ROS installation: 1. Install Ubuntu 20.04LTS (https://releases.ubuntu.com/20.04) 2. Install ROS 1 Noetic (http://wiki.ros.org/noetic/Installation/Ubuntu) 3. Add the following Functions and Alias to your .bashrc file, to make development easier \ud83e\udd13 1. Create a file to store the latest catkin workspace (if it does not exist) and put in the first line the default name, i.e. catkin_ws ``` if [ ! -f ~/.catkin_ws_config ]; then touch ~/.catkin_ws_config && echo catkin_ws > ~/.catkin_ws_config ;fi ``` 2. Set the variable CATKIN_PACKAGE with the workspace in the catkin_ws_config file ``` export CATKIN_PACKAGE=$(head -n 1 ~/.catkin_ws_config) ``` 3. Function to update the default catkin workspace variable and store the last setting in the file ``` set_catkin_ws_function() { #set CATKIN_PACKAGE according the an input parameter export CATKIN_PACKAGE=catkin_ws_$1 echo CATKIN_PACKAGE = ${CATKIN_PACKAGE} # save into a hidden file the catkin workspace setting echo $CATKIN_PACKAGE > ~/.catkin_ws_config source ~/.bashrc } ``` 4. This is required (to source the ROS and farol files) ``` source /opt/ros/noetic/setup.bash export CATKIN_ROOT=${HOME}/<path_to_workspace> export ROS_WORKSPACE=${CATKIN_ROOT}/${CATKIN_PACKAGE} export FAROL_SCRIPTS=$(find ${ROS_WORKSPACE}/src/ -type d -iname farol_scripts | head -n 1) source ${FAROL_SCRIPTS}/farol_easy_alias/farol_permanent_alias/alias.sh ``` NOTE: replace /<path_to_workspace> with the folder where you put you catkin_ws inside (for example /dsor ). If you put in your home folder, then this variable should be left empty! Create a catkin_ws directory 2. Downloading the repository: Start by cloning the repository with git clone --recursive https://github.com/dsor-isr/farol . If the repository was cloned non-recursively previously, use git submodule update --init to clone the necessary submodules. 3. Configuring the dependencies: Run the installation bash script using ./","title":"Install Guide"},{"location":"pages/get_started/Repository-Structure/","text":"","title":"Repository Structure"},{"location":"uuv-assistants/","text":"","title":"Overview"},{"location":"uuv-descriptions/","text":"nav: - Overview: \"README.md\"","title":"Overview"},{"location":"uuv-gazebo-plugins/","text":"","title":"Overview"},{"location":"uuv-gazebo-ros-plugins/","text":"","title":"Overview"},{"location":"uuv-gazebo-ros-plugins-msgs/","text":"","title":"Overview"},{"location":"uuv-sensor-ros-plugins/","text":"","title":"Overview"},{"location":"uuv-sensor-ros-plugins-messages/","text":"","title":"Overview"},{"location":"uuv-world-plugins/","text":"","title":"Overview"},{"location":"uuv-world-ros-plugins/","text":"","title":"Overview"},{"location":"uuv-world-ros-plugins-messages/","text":"","title":"Overview"}]}